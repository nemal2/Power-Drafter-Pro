/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(routes)/workspace/[fileId]/page",{

/***/ "(app-pages-browser)/./app/(routes)/workspace/_components/Canvas.tsx":
/*!*******************************************************!*\
  !*** ./app/(routes)/workspace/_components/Canvas.tsx ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// \"use client\";\n// import React, { useRef, useState } from \"react\";\n// import Draggable from \"react-draggable\"; // Import ReactDraggable\n// import { LibraryItems } from \"./CanvasSidebar/LibraryItems\";\n// interface LibraryItem {\n//   id: string;\n//   name: string;\n//   svg: string;\n//   x: number;\n//   y: number;\n// }\n// const Canvas: React.FC = () => {\n//   const canvasRef = useRef<HTMLDivElement | null>(null);\n//   const [board, setBoard] = useState<LibraryItem[]>([]);\n//   // Function to handle dropping items onto the canvas\n//   const handleDrop = (item: LibraryItem, x: number, y: number) => {\n//     setBoard((prevBoard) => [\n//       ...prevBoard,\n//       { ...item, x, y }, // Add position to the item\n//     ]);\n//   };\n//   // Mock function to simulate adding items (replace with actual drag-and-drop logic)\n//   const addLibraryItem = (itemId: string) => {\n//     const libraryItem = LibraryItems.find((item) => item.id === itemId);\n//     if (libraryItem && canvasRef.current) {\n//       const rect = canvasRef.current.getBoundingClientRect();\n//       const x = rect.width / 2 - 25; // Center horizontally (adjust as needed)\n//       const y = rect.height / 2 - 25; // Center vertically (adjust as needed)\n//       handleDrop(libraryItem, x, y);\n//     }\n//   };\n//   return (\n//     <div\n//       ref={canvasRef}\n//       className=\"relative w-full h-full bg-[#317873]\"\n//       style={{\n//         width: \"800px\",\n//         height: \"600px\",\n//         position: \"relative\",\n//         overflow: \"hidden\",\n//       }}\n//     >\n//       {/* Add Buttons for Testing (simulate adding items) */}\n//       <div className=\"absolute top-4 left-4 flex gap-2\">\n//         {LibraryItems.map((item) => (\n//           <button\n//             key={item.id}\n//             onClick={() => addLibraryItem(item.id)}\n//             className=\"bg-white text-black px-3 py-1 rounded shadow\"\n//           >\n//             Add {item.name}\n//           </button>\n//         ))}\n//       </div>\n//       {/* Render items on the canvas */}\n//       {board.map((item) => (\n//         <Draggable\n//           key={item.id}\n//           bounds=\"parent\"\n//           defaultPosition={{ x: item.x, y: item.y }}\n//         >\n//           <div\n//             style={{\n//               width: \"50px\",\n//               height: \"50px\",\n//               backgroundImage: `url(${item.svg})`,\n//               backgroundSize: \"contain\",\n//               backgroundRepeat: \"no-repeat\",\n//               position: \"absolute\",\n//               cursor: \"move\",\n//             }}\n//           ></div>\n//         </Draggable>\n//       ))}\n//     </div>\n//   );\n// };\n// export default Canvas;\n// \"use client\";\n// import React, { useRef, useState } from \"react\";\n// import Draggable from \"react-draggable\"; // Import ReactDraggable\n// import { LibraryItems } from \"./CanvasSidebar/LibraryItems\";\n// import html2canvas from \"html2canvas\";\n// interface LibraryItem {\n//   id: string;\n//   name: string;\n//   svg: string;\n//   x: number;\n//   y: number;\n// }\n// const Canvas: React.FC = () => {\n//   const canvasRef = useRef<HTMLDivElement | null>(null);\n//   const [board, setBoard] = useState<LibraryItem[]>([]);\n//   // Function to handle dropping items onto the canvas\n//   const handleDrop = (item: LibraryItem, x: number, y: number) => {\n//     setBoard((prevBoard) => [\n//       ...prevBoard,\n//       { ...item, x, y }, // Add position to the item\n//     ]);\n//   };\n//   // Mock function to simulate adding items (replace with actual drag-and-drop logic)\n//   const addLibraryItem = (itemId: string) => {\n//     const libraryItem = LibraryItems.find((item) => item.id === itemId);\n//     if (libraryItem && canvasRef.current) {\n//       const rect = canvasRef.current.getBoundingClientRect();\n//       const x = rect.width / 2 - 25; // Center horizontally (adjust as needed)\n//       const y = rect.height / 2 - 25; // Center vertically (adjust as needed)\n//       handleDrop(libraryItem, x, y);\n//     }\n//   };\n//   // Save canvas as PNG\n//   const saveAsPNG = () => {\n//     if (!canvasRef.current) return;\n//     // Convert the canvas to an image\n//     const svgElements = canvasRef.current.querySelectorAll(\"svg\");\n//     svgElements.forEach((svg) => {\n//       const outerHTML = svg.outerHTML;\n//       const blob = new Blob([outerHTML], { type: \"image/svg+xml;charset=utf-8\" });\n//       const url = URL.createObjectURL(blob);\n//       const img = new Image();\n//       img.src = url;\n//       img.onload = () => URL.revokeObjectURL(url);\n//     });\n//     html2canvas(canvasRef.current).then((canvas) => {\n//       const link = document.createElement(\"a\");\n//       link.download = \"canvas.png\";\n//       link.href = canvas.toDataURL();\n//       link.click();\n//     });\n//   };\n//   // Print canvas\n//   const printCanvas = () => {\n//     if (!canvasRef.current) return;\n//     html2canvas(canvasRef.current).then((canvas) => {\n//       const newWindow = window.open();\n//       if (newWindow) {\n//         newWindow.document.body.innerHTML = `\n//           <img src=\"${canvas.toDataURL()}\" style=\"width:100%; height:auto;\">\n//         `;\n//         newWindow.print();\n//       }\n//     });\n//   };\n//   return (\n//     <div>\n//       <div className=\"relative w-full h-full bg-[#317873]\" style={{ width: \"800px\", height: \"600px\", position: \"relative\", overflow: \"hidden\" }} ref={canvasRef}>\n//         {/* Add Buttons for Testing (simulate adding items) */}\n//         <div className=\"absolute top-4 left-4 flex gap-2\">\n//           {LibraryItems.map((item) => (\n//             <button\n//               key={item.id}\n//               onClick={() => addLibraryItem(item.id)}\n//               className=\"bg-white text-black px-3 py-1 rounded shadow\"\n//             >\n//               Add {item.name}\n//             </button>\n//           ))}\n//         </div>\n//         {/* Render items on the canvas */}\n//         {board.map((item) => (\n//           <Draggable\n//             key={item.id}\n//             bounds=\"parent\"\n//             defaultPosition={{ x: item.x, y: item.y }}\n//           >\n//             <div\n//               style={{\n//                 width: \"50px\",\n//                 height: \"50px\",\n//                 backgroundImage: `url(${item.svg})`,\n//                 backgroundSize: \"contain\",\n//                 backgroundRepeat: \"no-repeat\",\n//                 position: \"absolute\",\n//                 cursor: \"move\",\n//               }}\n//             ></div>\n//           </Draggable>\n//         ))}\n//       </div>\n//       {/* Save and Print Buttons */}\n//       <div className=\"mt-4 flex gap-4\">\n//         <button\n//           onClick={saveAsPNG}\n//           className=\"bg-blue-500 text-white px-4 py-2 rounded shadow\"\n//         >\n//           Save as PNG\n//         </button>\n//         <button\n//           onClick={printCanvas}\n//           className=\"bg-green-500 text-white px-4 py-2 rounded shadow\"\n//         >\n//           Print Canvas\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n// export default Canvas;\n///superb one--------------------------------------------------------------------------------------------------\n// \"use client\";\n// import React, { useRef, useState } from \"react\";\n// import Draggable from \"react-draggable\"; // Import ReactDraggable\n// import { LibraryItems } from \"./CanvasSidebar/LibraryItems\";\n// interface LibraryItem {\n//   id: string;\n//   name: string;\n//   svg: string;\n//   x: number;\n//   y: number;\n// }\n// const Canvas: React.FC = () => {\n//   const canvasRef = useRef<HTMLDivElement | null>(null);\n//   const [board, setBoard] = useState<LibraryItem[]>([]);\n//   // Function to handle dropping items onto the canvas\n//   const handleDrop = (item: LibraryItem, x: number, y: number) => {\n//     setBoard((prevBoard) => [\n//       ...prevBoard,\n//       { ...item, x, y }, // Add position to the item\n//     ]);\n//   };\n//   // Mock function to simulate adding items (replace with actual drag-and-drop logic)\n//   const addLibraryItem = (itemId: string) => {\n//     const libraryItem = LibraryItems.find((item) => item.id === itemId);\n//     if (libraryItem && canvasRef.current) {\n//       const rect = canvasRef.current.getBoundingClientRect();\n//       const x = rect.width / 2 - 25; // Center horizontally (adjust as needed)\n//       const y = rect.height / 2 - 25; // Center vertically (adjust as needed)\n//       handleDrop(libraryItem, x, y);\n//     }\n//   };\n//   // Save canvas as PNG\n//   const saveAsPNG = () => {\n//     if (!canvasRef.current) return;\n//     html2canvas(canvasRef.current).then((canvas) => {\n//       const link = document.createElement(\"a\");\n//       link.download = \"canvas.png\";\n//       link.href = canvas.toDataURL();\n//       link.click();\n//     });\n//   };\n//   // Print canvas\n//   const printCanvas = () => {\n//     if (!canvasRef.current) return;\n//     html2canvas(canvasRef.current).then((canvas) => {\n//       const newWindow = window.open();\n//       if (newWindow) {\n//         newWindow.document.body.innerHTML = `\n//           <img src=\"${canvas.toDataURL()}\" style=\"width:100%; height:auto;\">\n//         `;\n//         newWindow.print();\n//       }\n//     });\n//   };\n//   return (\n//     <div>\n//       <div\n//         className=\"relative w-full h-full bg-[#317873]\"\n//         style={{\n//           width: \"1300px\", // Increased width\n//           height: \"750px\",\n//           position: \"relative\",\n//           overflow: \"hidden\",\n//         }}\n//         ref={canvasRef}\n//       >\n//         {/* Add Buttons for Testing (simulate adding items) */}\n//         <div className=\"absolute top-4 left-4 flex gap-2\">\n//           {LibraryItems.map((item) => (\n//             <button\n//               key={item.id}\n//               onClick={() => addLibraryItem(item.id)}\n//               className=\"bg-white text-black px-3 py-1 rounded shadow\"\n//             >\n//               Add {item.name}\n//             </button>\n//           ))}\n//         </div>\n//         {/* Render items on the canvas */}\n//         {board.map((item) => (\n//           <Draggable\n//             key={item.id}\n//             bounds=\"parent\"\n//             defaultPosition={{ x: item.x, y: item.y }}\n//           >\n//             <div\n//               style={{\n//                 width: \"50px\",\n//                 height: \"50px\",\n//                 backgroundImage: `url(${item.svg})`,\n//                 backgroundSize: \"contain\",\n//                 backgroundRepeat: \"no-repeat\",\n//                 position: \"absolute\",\n//                 cursor: \"move\",\n//               }}\n//             ></div>\n//           </Draggable>\n//         ))}\n//       </div>\n//       {/* Save and Print Buttons */}\n//       <div className=\"mt-4 flex gap-4\">\n//         <button\n//           onClick={saveAsPNG}\n//           className=\"bg-blue-500 text-white px-4 py-2 rounded shadow\"\n//         >\n//           Save as PNG\n//         </button>\n//         <button\n//           onClick={printCanvas}\n//           className=\"bg-green-500 text-white px-4 py-2 rounded shadow\"\n//         >\n//           Print Canvas\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n// export default Canvas;\n// // \n// //////////////////////////////////////////////////////////////////////////////////////\n// \"use client\";\n// import React, { useRef, useState } from \"react\";\n// import Draggable from \"react-draggable\";\n// import { useDrag, useDrop } from \"react-dnd\";\n// import { LibraryItems } from \"./CanvasSidebar/LibraryItems\";\n// import html2canvas from \"html2canvas\";\n// interface LibraryItem {\n//   id: string;\n//   name: string;\n//   svg: string;\n//   x: number;\n//   y: number;\n// }\n// const Canvas: React.FC = () => {\n//   const canvasRef = useRef<HTMLDivElement | null>(null);\n//   const [board, setBoard] = useState<LibraryItem[]>([]);\n//   // Function to handle dropping items onto the canvas\n//   const handleDrop = (item: LibraryItem, x: number, y: number) => {\n//     setBoard((prevBoard) => [\n//       ...prevBoard,\n//       { ...item, x, y }, // Add position to the item\n//     ]);\n//   };\n//   // React-DnD drop functionality\n//   const [{ isOver }, drop] = useDrop(() => ({\n//     accept: \"libraryItem\",\n//     drop: (item: LibraryItem, monitor) => {\n//       const offset = monitor.getClientOffset();\n//       if (offset && canvasRef.current) {\n//         const rect = canvasRef.current.getBoundingClientRect();\n//         const x = offset.x - rect.left;\n//         const y = offset.y - rect.top;\n//         handleDrop(item, x, y);\n//       }\n//     },\n//     collect: (monitor) => ({\n//       isOver: !!monitor.isOver(),\n//     }),\n//   }));\n//   // React-DnD drag functionality\n//   const LibraryItemComponent: React.FC<{ item: LibraryItem }> = ({ item }) => {\n//     const [, drag] = useDrag(() => ({\n//       type: \"libraryItem\",\n//       item,\n//     }));\n//     return (\n//       <div\n//         ref={drag}\n//         className=\"cursor-pointer p-2 border rounded bg-white shadow\"\n//       >\n//         {item.name}\n//       </div>\n//     );\n//   };\n//   // Save canvas as PNG\n//   const saveAsPNG = () => {\n//     if (!canvasRef.current) return;\n//     html2canvas(canvasRef.current).then((canvas) => {\n//       const link = document.createElement(\"a\");\n//       link.download = \"canvas.png\";\n//       link.href = canvas.toDataURL();\n//       link.click();\n//     });\n//   };\n//   // Print canvas\n//   const printCanvas = () => {\n//     if (!canvasRef.current) return;\n//     html2canvas(canvasRef.current).then((canvas) => {\n//       const newWindow = window.open();\n//       if (newWindow) {\n//         newWindow.document.body.innerHTML = `\n//           <img src=\"${canvas.toDataURL()}\" style=\"width:100%; height:auto;\">\n//         `;\n//         newWindow.print();\n//       }\n//     });\n//   };\n//   return (\n//     <div className=\"flex\">\n//       {/* Sidebar with Library Items */}\n//       <div className=\"w-1/4 p-4 bg-gray-100 border-r\">\n//         <h2 className=\"text-lg font-bold mb-4\">Library Items</h2>\n//         {LibraryItems.map((item) => (\n//           <LibraryItemComponent key={item.id} item={item} />\n//         ))}\n//       </div>\n//       {/* Canvas */}\n//       <div className=\"w-3/4 p-4\">\n//         <div\n//           ref={(node) => {\n//             drop(node);\n//             canvasRef.current = node;\n//           }}\n//           className={`relative bg-[#317873] w-full h-[750px] ${\n//             isOver ? \"border-4 border-blue-500\" : \"\"\n//           }`}\n//           style={{ position: \"relative\", overflow: \"hidden\" }}\n//         >\n//           {board.map((item) => (\n//             <Draggable\n//               key={item.id}\n//               bounds=\"parent\"\n//               defaultPosition={{ x: item.x, y: item.y }}\n//             >\n//               <div\n//                 style={{\n//                   width: \"50px\",\n//                   height: \"50px\",\n//                   backgroundImage: `url(${item.svg})`,\n//                   backgroundSize: \"contain\",\n//                   backgroundRepeat: \"no-repeat\",\n//                   position: \"absolute\",\n//                   cursor: \"move\",\n//                 }}\n//               ></div>\n//             </Draggable>\n//           ))}\n//         </div>\n//         {/* Save and Print Buttons */}\n//         <div className=\"mt-4 flex gap-4\">\n//           <button\n//             onClick={saveAsPNG}\n//             className=\"bg-blue-500 text-white px-4 py-2 rounded shadow\"\n//           >\n//             Save as PNG\n//           </button>\n//           <button\n//             onClick={printCanvas}\n//             className=\"bg-green-500 text-white px-4 py-2 rounded shadow\"\n//           >\n//             Print Canvas\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n// export default Canvas;\n/////////////////////////////////////////////\n// \"use client\";\n// import React, { useRef, useState } from \"react\";\n// import Draggable from \"react-draggable\";\n// import { useDrag, useDrop } from \"react-dnd\";\n// import { LibraryItems } from \"./CanvasSidebar/LibraryItems\";\n// import html2canvas from \"html2canvas\";\n// interface LibraryItem {\n//   id: string;\n//   name: string;\n//   svg: string;\n//   x: number;\n//   y: number;\n// }\n// const Canvas: React.FC = () => {\n//   const canvasRef = useRef<HTMLDivElement | null>(null);\n//   const [board, setBoard] = useState<LibraryItem[]>([]);\n//   // Function to handle dropping items onto the canvas\n//   const handleDrop = (item: LibraryItem, x: number, y: number) => {\n//     setBoard((prevBoard) => [\n//       ...prevBoard,\n//       { ...item, x, y }, // Add position to the item\n//     ]);\n//   };\n//   // React DnD drop functionality\n//   const [{ isOver }, drop] = useDrop(() => ({\n//     accept: \"libraryItem\",\n//     drop: (item: LibraryItem, monitor) => {\n//       const offset = monitor.getClientOffset();\n//       if (offset && canvasRef.current) {\n//         const rect = canvasRef.current.getBoundingClientRect();\n//         const x = offset.x - rect.left;\n//         const y = offset.y - rect.top;\n//         handleDrop(item, x, y);\n//       }\n//     },\n//     collect: (monitor) => ({\n//       isOver: !!monitor.isOver(),\n//     }),\n//   }));\n//   // React DnD drag functionality for library items\n//   const LibraryItemComponent: React.FC<{ item: LibraryItem }> = ({ item }) => {\n//     const [, drag] = useDrag(() => ({\n//       type: \"libraryItem\",\n//       item,\n//     }));\n//     return (\n//       <div\n//         ref={drag}\n//         className=\"cursor-pointer p-2 border rounded bg-white shadow text-center\"\n//       >\n//         <img src={item.svg} alt={item.name} className=\"w-12 h-12\" />\n//         <p className=\"text-sm mt-2\">{item.name}</p>\n//       </div>\n//     );\n//   };\n//   // Save canvas as PNG\n//   const saveAsPNG = () => {\n//     if (!canvasRef.current) return;\n//     html2canvas(canvasRef.current).then((canvas) => {\n//       const link = document.createElement(\"a\");\n//       link.download = \"canvas.png\";\n//       link.href = canvas.toDataURL(\"image/png\");\n//       link.click();\n//     });\n//   };\n//   // Print canvas\n//   const printCanvas = () => {\n//     if (!canvasRef.current) return;\n//     html2canvas(canvasRef.current).then((canvas) => {\n//       const newWindow = window.open();\n//       if (newWindow) {\n//         newWindow.document.body.innerHTML = `<img src=\"${canvas.toDataURL()}\" style=\"width:100%; height:auto;\">`;\n//         newWindow.print();\n//       }\n//     });\n//   };\n//   return (\n//     <div className=\"flex\">\n//       {/* Sidebar with Library Items */}\n//       <div className=\"w-1/4 p-4 bg-gray-100 border-r\">\n//         <h2 className=\"text-lg font-bold mb-4\">Library Items</h2>\n//         {LibraryItems.map((item) => (\n//           <LibraryItemComponent key={item.id} item={item} />\n//         ))}\n//       </div>\n//       {/* Canvas */}\n//       <div className=\"w-3/4 p-4\">\n//         <div\n//           ref={(node) => {\n//             drop(node);\n//             canvasRef.current = node;\n//           }}\n//           className={`relative bg-[#317873] w-full h-[750px] ${\n//             isOver ? \"border-4 border-blue-500\" : \"\"\n//           }`}\n//           style={{ position: \"relative\", overflow: \"hidden\" }}\n//         >\n//           {board.map((item, index) => (\n//             <Draggable\n//               key={`${item.id}-${index}`}\n//               bounds=\"parent\"\n//               defaultPosition={{ x: item.x, y: item.y }}\n//             >\n//               <div\n//                 style={{\n//                   width: \"50px\",\n//                   height: \"50px\",\n//                   backgroundImage: `url(${item.svg})`,\n//                   backgroundSize: \"contain\",\n//                   backgroundRepeat: \"no-repeat\",\n//                   position: \"absolute\",\n//                   cursor: \"move\",\n//                 }}\n//               ></div>\n//             </Draggable>\n//           ))}\n//         </div>\n//         {/* Save and Print Buttons */}\n//         <div className=\"mt-4 flex gap-4\">\n//           <button\n//             onClick={saveAsPNG}\n//             className=\"bg-blue-500 text-white px-4 py-2 rounded shadow\"\n//           >\n//             Save as PNG\n//           </button>\n//           <button\n//             onClick={printCanvas}\n//             className=\"bg-green-500 text-white px-4 py-2 rounded shadow\"\n//           >\n//             Print Canvas\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n// export default Canvas;\n/////\n// \"use client\";\n// import React, { useRef, useState } from \"react\";\n// import Draggable from \"react-draggable\";\n// import { useDrop } from \"react-dnd\";\n// import { LibraryItems, LibraryItemComponent, LibraryItem } from \"./CanvasSidebar/LibraryItems\";\n// import html2canvas from \"html2canvas\";\n// const Canvas: React.FC = () => {\n//   const canvasRef = useRef<HTMLDivElement | null>(null);\n//   const [board, setBoard] = useState<LibraryItem[]>([]);\n//   const handleDrop = (item: LibraryItem, x: number, y: number) => {\n//     setBoard((prevBoard) => [\n//       ...prevBoard,\n//       { ...item, x, y },\n//     ]);\n//   };\n//   const [{ isOver }, drop] = useDrop(() => ({\n//     accept: \"libraryItem\",\n//     drop: (item: LibraryItem, monitor) => {\n//       const offset = monitor.getClientOffset();\n//       if (offset && canvasRef.current) {\n//         const rect = canvasRef.current.getBoundingClientRect();\n//         const x = offset.x - rect.left;\n//         const y = offset.y - rect.top;\n//         handleDrop(item, x, y);\n//       }\n//     },\n//     collect: (monitor) => ({\n//       isOver: !!monitor.isOver(),\n//     }),\n//   }));\n//   const saveAsPNG = () => {\n//     if (!canvasRef.current) return;\n//     html2canvas(canvasRef.current).then((canvas) => {\n//       const link = document.createElement(\"a\");\n//       link.download = \"canvas.png\";\n//       link.href = canvas.toDataURL(\"image/png\");\n//       link.click();\n//     });\n//   };\n//   const printCanvas = () => {\n//     if (!canvasRef.current) return;\n//     html2canvas(canvasRef.current).then((canvas) => {\n//       const newWindow = window.open();\n//       if (newWindow) {\n//         newWindow.document.body.innerHTML = `<img src=\"${canvas.toDataURL()}\" style=\"width:100%; height:auto;\">`;\n//         newWindow.print();\n//       }\n//     });\n//   };\n//   return (\n//     <div className=\"flex\">\n//       {/* <div className=\"w-1/4 p-4 bg-gray-100 border-r\">\n//         <h2 className=\"text-lg font-bold mb-4\">Library Items</h2>\n//         {LibraryItems.map((item) => (\n//           <LibraryItemComponent key={item.id} item={item} />\n//         ))}\n//       </div> */}\n//       <div className=\"w-3/4 p-4\">\n//         <div\n//           ref={(node) => {\n//             drop(node);\n//             canvasRef.current = node;\n//           }}\n//           className={`relative bg-[#317873] w-full h-[750px] ${\n//             isOver ? \"border-4 border-blue-500\" : \"\"\n//           }`}\n//           style={{ position: \"relative\", overflow: \"hidden\" }}\n//         >\n//           {board.map((item, index) => (\n//             <Draggable\n//               key={`${item.id}-${index}`}\n//               bounds=\"parent\"\n//               defaultPosition={{ x: item.x, y: item.y }}\n//             >\n//               <div\n//                 style={{\n//                   width: \"50px\",\n//                   height: \"50px\",\n//                   backgroundImage: `url(${item.svg})`,\n//                   backgroundSize: \"contain\",\n//                   backgroundRepeat: \"no-repeat\",\n//                   position: \"absolute\",\n//                   cursor: \"move\",\n//                 }}\n//               ></div>\n//             </Draggable>\n//           ))}\n//         </div>\n//         <div className=\"mt-4 flex gap-4\">\n//           <button\n//             onClick={saveAsPNG}\n//             className=\"bg-blue-500 text-white px-4 py-2 rounded shadow\"\n//           >\n//             Save as PNG\n//           </button>\n//           <button\n//             onClick={printCanvas}\n//             className=\"bg-green-500 text-white px-4 py-2 rounded shadow\"\n//           >\n//             Print Canvas\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n// export default Canvas;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/(routes)/workspace/_components/Canvas.tsx\n"));

/***/ })

});