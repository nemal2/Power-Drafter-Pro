"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/convex";
exports.ids = ["vendor-chunks/convex"];
exports.modules = {

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/http_client.js":
/*!*************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/http_client.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexHttpClient: () => (/* binding */ ConvexHttpClient),\n/* harmony export */   STATUS_CODE_BAD_REQUEST: () => (/* binding */ STATUS_CODE_BAD_REQUEST),\n/* harmony export */   STATUS_CODE_OK: () => (/* binding */ STATUS_CODE_OK),\n/* harmony export */   STATUS_CODE_UDF_FAILED: () => (/* binding */ STATUS_CODE_UDF_FAILED),\n/* harmony export */   setFetch: () => (/* binding */ setFetch)\n/* harmony export */ });\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../server/api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logging.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/logging.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\nconst STATUS_CODE_OK = 200;\nconst STATUS_CODE_BAD_REQUEST = 400;\nconst STATUS_CODE_UDF_FAILED = 560;\nlet specifiedFetch = void 0;\nfunction setFetch(f) {\n    specifiedFetch = f;\n}\nclass ConvexHttpClient {\n    /**\n   * Create a new {@link ConvexHttpClient}.\n   *\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   * @param options - An object of options.\n   * - `skipConvexDeploymentUrlCheck` - Skip validating that the Convex deployment URL looks like\n   * `https://happy-animal-123.convex.cloud` or localhost. This can be useful if running a self-hosted\n   * Convex backend that uses a different URL.\n   * - `logger` - A logger. If not provided, logs to the console.\n   * You can construct your own logger to customize logging to log elsewhere\n   * or not log at all.\n   */ constructor(address, options){\n        __publicField(this, \"address\");\n        __publicField(this, \"auth\");\n        __publicField(this, \"adminAuth\");\n        __publicField(this, \"encodedTsPromise\");\n        __publicField(this, \"debug\");\n        __publicField(this, \"fetchOptions\");\n        __publicField(this, \"logger\");\n        if (typeof options === \"boolean\") {\n            throw new Error(\"skipConvexDeploymentUrlCheck as the second argument is no longer supported. Please pass an options object, `{ skipConvexDeploymentUrlCheck: true }`.\");\n        }\n        const opts = options ?? {};\n        if (opts.skipConvexDeploymentUrlCheck !== true) {\n            (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.validateDeploymentUrl)(address);\n        }\n        this.logger = opts.logger ?? (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.instantiateDefaultLogger)({\n            verbose: false\n        });\n        this.address = address;\n        this.debug = true;\n    }\n    /**\n   * Obtain the {@link ConvexHttpClient}'s URL to its backend.\n   * @deprecated Use url, which returns the url without /api at the end.\n   *\n   * @returns The URL to the Convex backend, including the client's API version.\n   */ backendUrl() {\n        return `${this.address}/api`;\n    }\n    /**\n   * Return the address for this client, useful for creating a new client.\n   *\n   * Not guaranteed to match the address with which this client was constructed:\n   * it may be canonicalized.\n   */ get url() {\n        return this.address;\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   *\n   * Should be called whenever the token changes (i.e. due to expiration and refresh).\n   *\n   * @param value - JWT-encoded OpenID Connect identity token.\n   */ setAuth(value) {\n        this.clearAuth();\n        this.auth = value;\n    }\n    /**\n   * @internal\n   */ setAdminAuth(token, actingAsIdentity) {\n        this.clearAuth();\n        if (actingAsIdentity !== void 0) {\n            const bytes = new TextEncoder().encode(JSON.stringify(actingAsIdentity));\n            const actingAsIdentityEncoded = btoa(String.fromCodePoint(...bytes));\n            this.adminAuth = `${token}:${actingAsIdentityEncoded}`;\n        } else {\n            this.adminAuth = token;\n        }\n    }\n    /**\n   * Clear the current authentication token if set.\n   */ clearAuth() {\n        this.auth = void 0;\n        this.adminAuth = void 0;\n    }\n    /**\n   * Sets whether the result log lines should be printed on the console or not.\n   *\n   * @internal\n   */ setDebug(debug) {\n        this.debug = debug;\n    }\n    /**\n   * Used to customize the fetch behavior in some runtimes.\n   *\n   * @internal\n   */ setFetchOptions(fetchOptions) {\n        this.fetchOptions = fetchOptions;\n    }\n    /**\n   * This API is experimental: it may change or disappear.\n   *\n   * Execute a Convex query function at the same timestamp as every other\n   * consistent query execution run by this HTTP client.\n   *\n   * This doesn't make sense for long-lived ConvexHttpClients as Convex\n   * backends can read a limited amount into the past: beyond 30 seconds\n   * in the past may not be available.\n   *\n   * Create a new client to use a consistent time.\n   *\n   * @param name - The name of the query.\n   * @param args - The arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the query's result.\n   *\n   * @deprecated This API is experimental: it may change or disappear.\n   */ async consistentQuery(query, ...args) {\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const timestampPromise = this.getTimestamp();\n        return await this.queryInner(query, queryArgs, {\n            timestampPromise\n        });\n    }\n    async getTimestamp() {\n        if (this.encodedTsPromise) {\n            return this.encodedTsPromise;\n        }\n        return this.encodedTsPromise = this.getTimestampInner();\n    }\n    async getTimestampInner() {\n        const localFetch = specifiedFetch || fetch;\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_2__.version}`\n        };\n        const response = await localFetch(`${this.address}/api/query_ts`, {\n            ...this.fetchOptions,\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok) {\n            throw new Error(await response.text());\n        }\n        const { ts } = await response.json();\n        return ts;\n    }\n    /**\n   * Execute a Convex query function.\n   *\n   * @param name - The name of the query.\n   * @param args - The arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the query's result.\n   */ async query(query, ...args) {\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        return await this.queryInner(query, queryArgs, {});\n    }\n    async queryInner(query, queryArgs, options) {\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(query);\n        const args = [\n            (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(queryArgs)\n        ];\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_2__.version}`\n        };\n        if (this.adminAuth) {\n            headers[\"Authorization\"] = `Convex ${this.adminAuth}`;\n        } else if (this.auth) {\n            headers[\"Authorization\"] = `Bearer ${this.auth}`;\n        }\n        const localFetch = specifiedFetch || fetch;\n        const timestamp = options.timestampPromise ? await options.timestampPromise : void 0;\n        const body = JSON.stringify({\n            path: name,\n            format: \"convex_encoded_json\",\n            args,\n            ...timestamp ? {\n                ts: timestamp\n            } : {}\n        });\n        const endpoint = timestamp ? `${this.address}/api/query_at_ts` : `${this.address}/api/query`;\n        const response = await localFetch(endpoint, {\n            ...this.fetchOptions,\n            body,\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            for (const line of respJSON.logLines ?? []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logForFunction)(this.logger, \"info\", \"query\", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case \"success\":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value);\n            case \"error\":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(`Invalid response: ${JSON.stringify(respJSON)}`);\n        }\n    }\n    /**\n   * Execute a Convex mutation function.\n   *\n   * @param name - The name of the mutation.\n   * @param args - The arguments object for the mutation. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the mutation's result.\n   */ async mutation(mutation, ...args) {\n        const mutationArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(mutation);\n        const body = JSON.stringify({\n            path: name,\n            format: \"convex_encoded_json\",\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(mutationArgs)\n            ]\n        });\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_2__.version}`\n        };\n        if (this.adminAuth) {\n            headers[\"Authorization\"] = `Convex ${this.adminAuth}`;\n        } else if (this.auth) {\n            headers[\"Authorization\"] = `Bearer ${this.auth}`;\n        }\n        const localFetch = specifiedFetch || fetch;\n        const response = await localFetch(`${this.address}/api/mutation`, {\n            ...this.fetchOptions,\n            body,\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            for (const line of respJSON.logLines ?? []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logForFunction)(this.logger, \"info\", \"mutation\", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case \"success\":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value);\n            case \"error\":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(`Invalid response: ${JSON.stringify(respJSON)}`);\n        }\n    }\n    /**\n   * Execute a Convex action function.\n   *\n   * @param name - The name of the action.\n   * @param args - The arguments object for the action. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the action's result.\n   */ async action(action, ...args) {\n        const actionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(action);\n        const body = JSON.stringify({\n            path: name,\n            format: \"convex_encoded_json\",\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(actionArgs)\n            ]\n        });\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_2__.version}`\n        };\n        if (this.adminAuth) {\n            headers[\"Authorization\"] = `Convex ${this.adminAuth}`;\n        } else if (this.auth) {\n            headers[\"Authorization\"] = `Bearer ${this.auth}`;\n        }\n        const localFetch = specifiedFetch || fetch;\n        const response = await localFetch(`${this.address}/api/action`, {\n            ...this.fetchOptions,\n            body,\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            for (const line of respJSON.logLines ?? []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logForFunction)(this.logger, \"info\", \"action\", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case \"success\":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value);\n            case \"error\":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(`Invalid response: ${JSON.stringify(respJSON)}`);\n        }\n    }\n    /**\n   * Execute a Convex function of an unknown type.\n   *\n   * @param name - The name of the function.\n   * @param args - The arguments object for the function. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the function's result.\n   *\n   * @internal\n   */ async function(anyFunction, componentPath, ...args) {\n        const functionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = typeof anyFunction === \"string\" ? anyFunction : (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(anyFunction);\n        const body = JSON.stringify({\n            componentPath,\n            path: name,\n            format: \"convex_encoded_json\",\n            args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(functionArgs)\n        });\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_2__.version}`\n        };\n        if (this.adminAuth) {\n            headers[\"Authorization\"] = `Convex ${this.adminAuth}`;\n        } else if (this.auth) {\n            headers[\"Authorization\"] = `Bearer ${this.auth}`;\n        }\n        const localFetch = specifiedFetch || fetch;\n        const response = await localFetch(`${this.address}/api/function`, {\n            ...this.fetchOptions,\n            body,\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            for (const line of respJSON.logLines ?? []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logForFunction)(this.logger, \"info\", \"any\", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case \"success\":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value);\n            case \"error\":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(`Invalid response: ${JSON.stringify(respJSON)}`);\n        }\n    }\n}\nfunction forwardErrorData(errorData, error) {\n    error.data = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(errorData);\n    return error;\n} //# sourceMappingURL=http_client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/http_client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseConvexClient: () => (/* reexport safe */ _sync_client_js__WEBPACK_IMPORTED_MODULE_0__.BaseConvexClient),\n/* harmony export */   ConvexClient: () => (/* reexport safe */ _simple_client_js__WEBPACK_IMPORTED_MODULE_1__.ConvexClient),\n/* harmony export */   ConvexHttpClient: () => (/* reexport safe */ _http_client_js__WEBPACK_IMPORTED_MODULE_2__.ConvexHttpClient)\n/* harmony export */ });\n/* harmony import */ var _sync_client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sync/client.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/client.js\");\n/* harmony import */ var _simple_client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./simple_client.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/simple_client.js\");\n/* harmony import */ var _http_client_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./http_client.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/http_client.js\");\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWE7QUFDdUM7QUFDRjtBQUNFLENBQ3BELGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYXNvcl9jbG9uZS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9pbmRleC5qcz81ZjJlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0IHsgQmFzZUNvbnZleENsaWVudCB9IGZyb20gXCIuL3N5bmMvY2xpZW50LmpzXCI7XG5leHBvcnQgeyBDb252ZXhDbGllbnQgfSBmcm9tIFwiLi9zaW1wbGVfY2xpZW50LmpzXCI7XG5leHBvcnQgeyBDb252ZXhIdHRwQ2xpZW50IH0gZnJvbSBcIi4vaHR0cF9jbGllbnQuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIkJhc2VDb252ZXhDbGllbnQiLCJDb252ZXhDbGllbnQiLCJDb252ZXhIdHRwQ2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/logging.js":
/*!*********************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/logging.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Logger: () => (/* binding */ Logger),\n/* harmony export */   createHybridErrorStacktrace: () => (/* binding */ createHybridErrorStacktrace),\n/* harmony export */   forwardData: () => (/* binding */ forwardData),\n/* harmony export */   instantiateDefaultLogger: () => (/* binding */ instantiateDefaultLogger),\n/* harmony export */   logFatalError: () => (/* binding */ logFatalError),\n/* harmony export */   logForFunction: () => (/* binding */ logForFunction)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nconst INFO_COLOR = \"color:rgb(0, 145, 255)\";\nfunction prefix_for_source(source) {\n    switch(source){\n        case \"query\":\n            return \"Q\";\n        case \"mutation\":\n            return \"M\";\n        case \"action\":\n            return \"A\";\n        case \"any\":\n            return \"?\";\n    }\n}\nclass Logger {\n    constructor(options){\n        __publicField(this, \"_onLogLineFuncs\");\n        __publicField(this, \"_verbose\");\n        this._onLogLineFuncs = {};\n        this._verbose = options.verbose;\n    }\n    addLogLineListener(func) {\n        let id = Math.random().toString(36).substring(2, 15);\n        for(let i = 0; i < 10; i++){\n            if (this._onLogLineFuncs[id] === void 0) {\n                break;\n            }\n            id = Math.random().toString(36).substring(2, 15);\n        }\n        this._onLogLineFuncs[id] = func;\n        return ()=>{\n            delete this._onLogLineFuncs[id];\n        };\n    }\n    logVerbose(...args) {\n        if (this._verbose) {\n            for (const func of Object.values(this._onLogLineFuncs)){\n                func(\"debug\", `${/* @__PURE__ */ new Date().toISOString()}`, ...args);\n            }\n        }\n    }\n    log(...args) {\n        for (const func of Object.values(this._onLogLineFuncs)){\n            func(\"info\", ...args);\n        }\n    }\n    warn(...args) {\n        for (const func of Object.values(this._onLogLineFuncs)){\n            func(\"warn\", ...args);\n        }\n    }\n    error(...args) {\n        for (const func of Object.values(this._onLogLineFuncs)){\n            func(\"error\", ...args);\n        }\n    }\n}\nfunction instantiateDefaultLogger(options) {\n    const logger = new Logger(options);\n    logger.addLogLineListener((level, ...args)=>{\n        switch(level){\n            case \"debug\":\n                console.debug(...args);\n                break;\n            case \"info\":\n                console.log(...args);\n                break;\n            case \"warn\":\n                console.warn(...args);\n                break;\n            case \"error\":\n                console.error(...args);\n                break;\n            default:\n                {\n                    const _typecheck = level;\n                    console.log(...args);\n                }\n        }\n    });\n    return logger;\n}\nfunction logForFunction(logger, type, source, udfPath, message) {\n    const prefix = prefix_for_source(source);\n    if (typeof message === \"object\") {\n        message = `ConvexError ${JSON.stringify(message.errorData, null, 2)}`;\n    }\n    if (type === \"info\") {\n        const match = message.match(/^\\[.*?\\] /);\n        if (match === null) {\n            logger.error(`[CONVEX ${prefix}(${udfPath})] Could not parse console.log`);\n            return;\n        }\n        const level = message.slice(1, match[0].length - 2);\n        const args = message.slice(match[0].length);\n        logger.log(`%c[CONVEX ${prefix}(${udfPath})] [${level}]`, INFO_COLOR, args);\n    } else {\n        logger.error(`[CONVEX ${prefix}(${udfPath})] ${message}`);\n    }\n}\nfunction logFatalError(logger, message) {\n    const errorMessage = `[CONVEX FATAL ERROR] ${message}`;\n    logger.error(errorMessage);\n    return new Error(errorMessage);\n}\nfunction createHybridErrorStacktrace(source, udfPath, result) {\n    const prefix = prefix_for_source(source);\n    return `[CONVEX ${prefix}(${udfPath})] ${result.errorMessage}\n  Called by client`;\n}\nfunction forwardData(result, error) {\n    error.data = result.errorData;\n    return error;\n} //# sourceMappingURL=logging.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/logging.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/long.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/long.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Long: () => (/* binding */ Long)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nclass Long {\n    constructor(low, high){\n        __publicField(this, \"low\");\n        __publicField(this, \"high\");\n        __publicField(this, \"__isUnsignedLong__\");\n        this.low = low | 0;\n        this.high = high | 0;\n        this.__isUnsignedLong__ = true;\n    }\n    static isLong(obj) {\n        return (obj && obj.__isUnsignedLong__) === true;\n    }\n    // prettier-ignore\n    static fromBytesLE(bytes) {\n        return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24);\n    }\n    // prettier-ignore\n    toBytesLE() {\n        const hi = this.high;\n        const lo = this.low;\n        return [\n            lo & 255,\n            lo >>> 8 & 255,\n            lo >>> 16 & 255,\n            lo >>> 24,\n            hi & 255,\n            hi >>> 8 & 255,\n            hi >>> 16 & 255,\n            hi >>> 24\n        ];\n    }\n    static fromNumber(value) {\n        if (isNaN(value)) return UZERO;\n        if (value < 0) return UZERO;\n        if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n        return new Long(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0);\n    }\n    toString() {\n        return (BigInt(this.high) * BigInt(TWO_PWR_32_DBL) + BigInt(this.low)).toString();\n    }\n    equals(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        if (this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n        return this.high === other.high && this.low === other.low;\n    }\n    notEquals(other) {\n        return !this.equals(other);\n    }\n    comp(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        if (this.equals(other)) return 0;\n        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n    }\n    lessThanOrEqual(other) {\n        return this.comp(/* validates */ other) <= 0;\n    }\n    static fromValue(val) {\n        if (typeof val === \"number\") return Long.fromNumber(val);\n        return new Long(val.low, val.high);\n    }\n}\nconst UZERO = new Long(0, 0);\nconst TWO_PWR_16_DBL = 1 << 16;\nconst TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\nconst TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\nconst MAX_UNSIGNED_VALUE = new Long(4294967295 | 0, 4294967295 | 0); //# sourceMappingURL=long.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvbG9uZy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWE7QUFDYixJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLGtCQUFrQixDQUFDQyxLQUFLQyxLQUFLQyxRQUFVRCxPQUFPRCxNQUFNSixVQUFVSSxLQUFLQyxLQUFLO1FBQUVFLFlBQVk7UUFBTUMsY0FBYztRQUFNQyxVQUFVO1FBQU1IO0lBQU0sS0FBS0YsR0FBRyxDQUFDQyxJQUFJLEdBQUdDO0FBQzFKLElBQUlJLGdCQUFnQixDQUFDTixLQUFLQyxLQUFLQyxRQUFVSCxnQkFBZ0JDLEtBQUssT0FBT0MsUUFBUSxXQUFXQSxNQUFNLEtBQUtBLEtBQUtDO0FBQ2pHLE1BQU1LO0lBQ1hDLFlBQVlDLEdBQUcsRUFBRUMsSUFBSSxDQUFFO1FBQ3JCSixjQUFjLElBQUksRUFBRTtRQUNwQkEsY0FBYyxJQUFJLEVBQUU7UUFDcEJBLGNBQWMsSUFBSSxFQUFFO1FBQ3BCLElBQUksQ0FBQ0csR0FBRyxHQUFHQSxNQUFNO1FBQ2pCLElBQUksQ0FBQ0MsSUFBSSxHQUFHQSxPQUFPO1FBQ25CLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUc7SUFDNUI7SUFDQSxPQUFPQyxPQUFPWixHQUFHLEVBQUU7UUFDakIsT0FBTyxDQUFDQSxPQUFPQSxJQUFJVyxrQkFBa0IsTUFBTTtJQUM3QztJQUNBLGtCQUFrQjtJQUNsQixPQUFPRSxZQUFZQyxLQUFLLEVBQUU7UUFDeEIsT0FBTyxJQUFJUCxLQUNUTyxLQUFLLENBQUMsRUFBRSxHQUFHQSxLQUFLLENBQUMsRUFBRSxJQUFJLElBQUlBLEtBQUssQ0FBQyxFQUFFLElBQUksS0FBS0EsS0FBSyxDQUFDLEVBQUUsSUFBSSxJQUN4REEsS0FBSyxDQUFDLEVBQUUsR0FBR0EsS0FBSyxDQUFDLEVBQUUsSUFBSSxJQUFJQSxLQUFLLENBQUMsRUFBRSxJQUFJLEtBQUtBLEtBQUssQ0FBQyxFQUFFLElBQUk7SUFFNUQ7SUFDQSxrQkFBa0I7SUFDbEJDLFlBQVk7UUFDVixNQUFNQyxLQUFLLElBQUksQ0FBQ04sSUFBSTtRQUNwQixNQUFNTyxLQUFLLElBQUksQ0FBQ1IsR0FBRztRQUNuQixPQUFPO1lBQ0xRLEtBQUs7WUFDTEEsT0FBTyxJQUFJO1lBQ1hBLE9BQU8sS0FBSztZQUNaQSxPQUFPO1lBQ1BELEtBQUs7WUFDTEEsT0FBTyxJQUFJO1lBQ1hBLE9BQU8sS0FBSztZQUNaQSxPQUFPO1NBQ1I7SUFDSDtJQUNBLE9BQU9FLFdBQVdoQixLQUFLLEVBQUU7UUFDdkIsSUFBSWlCLE1BQU1qQixRQUFRLE9BQU9rQjtRQUN6QixJQUFJbEIsUUFBUSxHQUFHLE9BQU9rQjtRQUN0QixJQUFJbEIsU0FBU21CLGdCQUFnQixPQUFPQztRQUNwQyxPQUFPLElBQUlmLEtBQUtMLFFBQVFxQixpQkFBaUIsR0FBR3JCLFFBQVFxQixpQkFBaUI7SUFDdkU7SUFDQUMsV0FBVztRQUNULE9BQU8sQ0FBQ0MsT0FBTyxJQUFJLENBQUNmLElBQUksSUFBSWUsT0FBT0Ysa0JBQWtCRSxPQUFPLElBQUksQ0FBQ2hCLEdBQUcsR0FBR2UsUUFBUTtJQUNqRjtJQUNBRSxPQUFPQyxLQUFLLEVBQUU7UUFDWixJQUFJLENBQUNwQixLQUFLSyxNQUFNLENBQUNlLFFBQVFBLFFBQVFwQixLQUFLcUIsU0FBUyxDQUFDRDtRQUNoRCxJQUFJLElBQUksQ0FBQ2pCLElBQUksS0FBSyxPQUFPLEtBQUtpQixNQUFNakIsSUFBSSxLQUFLLE9BQU8sR0FBRyxPQUFPO1FBQzlELE9BQU8sSUFBSSxDQUFDQSxJQUFJLEtBQUtpQixNQUFNakIsSUFBSSxJQUFJLElBQUksQ0FBQ0QsR0FBRyxLQUFLa0IsTUFBTWxCLEdBQUc7SUFDM0Q7SUFDQW9CLFVBQVVGLEtBQUssRUFBRTtRQUNmLE9BQU8sQ0FBQyxJQUFJLENBQUNELE1BQU0sQ0FBQ0M7SUFDdEI7SUFDQUcsS0FBS0gsS0FBSyxFQUFFO1FBQ1YsSUFBSSxDQUFDcEIsS0FBS0ssTUFBTSxDQUFDZSxRQUFRQSxRQUFRcEIsS0FBS3FCLFNBQVMsQ0FBQ0Q7UUFDaEQsSUFBSSxJQUFJLENBQUNELE1BQU0sQ0FBQ0MsUUFBUSxPQUFPO1FBQy9CLE9BQU9BLE1BQU1qQixJQUFJLEtBQUssSUFBSSxJQUFJLENBQUNBLElBQUksS0FBSyxLQUFLaUIsTUFBTWpCLElBQUksS0FBSyxJQUFJLENBQUNBLElBQUksSUFBSWlCLE1BQU1sQixHQUFHLEtBQUssSUFBSSxJQUFJLENBQUNBLEdBQUcsS0FBSyxJQUFJLENBQUMsSUFBSTtJQUNuSDtJQUNBc0IsZ0JBQWdCSixLQUFLLEVBQUU7UUFDckIsT0FBTyxJQUFJLENBQUNHLElBQUksQ0FDZCxhQUFhLEdBQ2JILFVBQ0c7SUFDUDtJQUNBLE9BQU9DLFVBQVVJLEdBQUcsRUFBRTtRQUNwQixJQUFJLE9BQU9BLFFBQVEsVUFBVSxPQUFPekIsS0FBS1csVUFBVSxDQUFDYztRQUNwRCxPQUFPLElBQUl6QixLQUFLeUIsSUFBSXZCLEdBQUcsRUFBRXVCLElBQUl0QixJQUFJO0lBQ25DO0FBQ0Y7QUFDQSxNQUFNVSxRQUFRLElBQUliLEtBQUssR0FBRztBQUMxQixNQUFNMEIsaUJBQWlCLEtBQUs7QUFDNUIsTUFBTVYsaUJBQWlCVSxpQkFBaUJBO0FBQ3hDLE1BQU1aLGlCQUFpQkUsaUJBQWlCQTtBQUN4QyxNQUFNRCxxQkFBcUIsSUFBSWYsS0FBSyxhQUFhLEdBQUcsYUFBYSxJQUNqRSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmFzb3JfY2xvbmUvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvbG9uZy5qcz8yYjM0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4gX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbmV4cG9ydCBjbGFzcyBMb25nIHtcbiAgY29uc3RydWN0b3IobG93LCBoaWdoKSB7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImxvd1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiaGlnaFwiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX19pc1Vuc2lnbmVkTG9uZ19fXCIpO1xuICAgIHRoaXMubG93ID0gbG93IHwgMDtcbiAgICB0aGlzLmhpZ2ggPSBoaWdoIHwgMDtcbiAgICB0aGlzLl9faXNVbnNpZ25lZExvbmdfXyA9IHRydWU7XG4gIH1cbiAgc3RhdGljIGlzTG9uZyhvYmopIHtcbiAgICByZXR1cm4gKG9iaiAmJiBvYmouX19pc1Vuc2lnbmVkTG9uZ19fKSA9PT0gdHJ1ZTtcbiAgfVxuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgc3RhdGljIGZyb21CeXRlc0xFKGJ5dGVzKSB7XG4gICAgcmV0dXJuIG5ldyBMb25nKFxuICAgICAgYnl0ZXNbMF0gfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1szXSA8PCAyNCxcbiAgICAgIGJ5dGVzWzRdIHwgYnl0ZXNbNV0gPDwgOCB8IGJ5dGVzWzZdIDw8IDE2IHwgYnl0ZXNbN10gPDwgMjRcbiAgICApO1xuICB9XG4gIC8vIHByZXR0aWVyLWlnbm9yZVxuICB0b0J5dGVzTEUoKSB7XG4gICAgY29uc3QgaGkgPSB0aGlzLmhpZ2g7XG4gICAgY29uc3QgbG8gPSB0aGlzLmxvdztcbiAgICByZXR1cm4gW1xuICAgICAgbG8gJiAyNTUsXG4gICAgICBsbyA+Pj4gOCAmIDI1NSxcbiAgICAgIGxvID4+PiAxNiAmIDI1NSxcbiAgICAgIGxvID4+PiAyNCxcbiAgICAgIGhpICYgMjU1LFxuICAgICAgaGkgPj4+IDggJiAyNTUsXG4gICAgICBoaSA+Pj4gMTYgJiAyNTUsXG4gICAgICBoaSA+Pj4gMjRcbiAgICBdO1xuICB9XG4gIHN0YXRpYyBmcm9tTnVtYmVyKHZhbHVlKSB7XG4gICAgaWYgKGlzTmFOKHZhbHVlKSkgcmV0dXJuIFVaRVJPO1xuICAgIGlmICh2YWx1ZSA8IDApIHJldHVybiBVWkVSTztcbiAgICBpZiAodmFsdWUgPj0gVFdPX1BXUl82NF9EQkwpIHJldHVybiBNQVhfVU5TSUdORURfVkFMVUU7XG4gICAgcmV0dXJuIG5ldyBMb25nKHZhbHVlICUgVFdPX1BXUl8zMl9EQkwgfCAwLCB2YWx1ZSAvIFRXT19QV1JfMzJfREJMIHwgMCk7XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIChCaWdJbnQodGhpcy5oaWdoKSAqIEJpZ0ludChUV09fUFdSXzMyX0RCTCkgKyBCaWdJbnQodGhpcy5sb3cpKS50b1N0cmluZygpO1xuICB9XG4gIGVxdWFscyhvdGhlcikge1xuICAgIGlmICghTG9uZy5pc0xvbmcob3RoZXIpKSBvdGhlciA9IExvbmcuZnJvbVZhbHVlKG90aGVyKTtcbiAgICBpZiAodGhpcy5oaWdoID4+PiAzMSA9PT0gMSAmJiBvdGhlci5oaWdoID4+PiAzMSA9PT0gMSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLmhpZ2ggPT09IG90aGVyLmhpZ2ggJiYgdGhpcy5sb3cgPT09IG90aGVyLmxvdztcbiAgfVxuICBub3RFcXVhbHMob3RoZXIpIHtcbiAgICByZXR1cm4gIXRoaXMuZXF1YWxzKG90aGVyKTtcbiAgfVxuICBjb21wKG90aGVyKSB7XG4gICAgaWYgKCFMb25nLmlzTG9uZyhvdGhlcikpIG90aGVyID0gTG9uZy5mcm9tVmFsdWUob3RoZXIpO1xuICAgIGlmICh0aGlzLmVxdWFscyhvdGhlcikpIHJldHVybiAwO1xuICAgIHJldHVybiBvdGhlci5oaWdoID4+PiAwID4gdGhpcy5oaWdoID4+PiAwIHx8IG90aGVyLmhpZ2ggPT09IHRoaXMuaGlnaCAmJiBvdGhlci5sb3cgPj4+IDAgPiB0aGlzLmxvdyA+Pj4gMCA/IC0xIDogMTtcbiAgfVxuICBsZXNzVGhhbk9yRXF1YWwob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wKFxuICAgICAgLyogdmFsaWRhdGVzICovXG4gICAgICBvdGhlclxuICAgICkgPD0gMDtcbiAgfVxuICBzdGF0aWMgZnJvbVZhbHVlKHZhbCkge1xuICAgIGlmICh0eXBlb2YgdmFsID09PSBcIm51bWJlclwiKSByZXR1cm4gTG9uZy5mcm9tTnVtYmVyKHZhbCk7XG4gICAgcmV0dXJuIG5ldyBMb25nKHZhbC5sb3csIHZhbC5oaWdoKTtcbiAgfVxufVxuY29uc3QgVVpFUk8gPSBuZXcgTG9uZygwLCAwKTtcbmNvbnN0IFRXT19QV1JfMTZfREJMID0gMSA8PCAxNjtcbmNvbnN0IFRXT19QV1JfMzJfREJMID0gVFdPX1BXUl8xNl9EQkwgKiBUV09fUFdSXzE2X0RCTDtcbmNvbnN0IFRXT19QV1JfNjRfREJMID0gVFdPX1BXUl8zMl9EQkwgKiBUV09fUFdSXzMyX0RCTDtcbmNvbnN0IE1BWF9VTlNJR05FRF9WQUxVRSA9IG5ldyBMb25nKDQyOTQ5NjcyOTUgfCAwLCA0Mjk0OTY3Mjk1IHwgMCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb25nLmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19kZWZOb3JtYWxQcm9wIiwib2JqIiwia2V5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfX3B1YmxpY0ZpZWxkIiwiTG9uZyIsImNvbnN0cnVjdG9yIiwibG93IiwiaGlnaCIsIl9faXNVbnNpZ25lZExvbmdfXyIsImlzTG9uZyIsImZyb21CeXRlc0xFIiwiYnl0ZXMiLCJ0b0J5dGVzTEUiLCJoaSIsImxvIiwiZnJvbU51bWJlciIsImlzTmFOIiwiVVpFUk8iLCJUV09fUFdSXzY0X0RCTCIsIk1BWF9VTlNJR05FRF9WQUxVRSIsIlRXT19QV1JfMzJfREJMIiwidG9TdHJpbmciLCJCaWdJbnQiLCJlcXVhbHMiLCJvdGhlciIsImZyb21WYWx1ZSIsIm5vdEVxdWFscyIsImNvbXAiLCJsZXNzVGhhbk9yRXF1YWwiLCJ2YWwiLCJUV09fUFdSXzE2X0RCTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/long.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/simple_client.js":
/*!***************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/simple_client.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexClient: () => (/* binding */ ConvexClient),\n/* harmony export */   setDefaultWebSocketConstructor: () => (/* binding */ setDefaultWebSocketConstructor)\n/* harmony export */ });\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/index.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../server/api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\nlet defaultWebSocketConstructor;\nfunction setDefaultWebSocketConstructor(ws) {\n    defaultWebSocketConstructor = ws;\n}\nclass ConvexClient {\n    /**\n   * Construct a client and immediately initiate a WebSocket connection to the passed address.\n   *\n   * @public\n   */ constructor(address, options = {}){\n        __publicField(this, \"listeners\");\n        __publicField(this, \"_client\");\n        // A synthetic server event to run callbacks the first time\n        __publicField(this, \"callNewListenersWithCurrentValuesTimer\");\n        __publicField(this, \"_closed\");\n        __publicField(this, \"disabled\");\n        if (options.skipConvexDeploymentUrlCheck !== true) {\n            (0,_common_index_js__WEBPACK_IMPORTED_MODULE_0__.validateDeploymentUrl)(address);\n        }\n        const { disabled, ...baseOptions } = options;\n        this._closed = false;\n        this.disabled = !!disabled;\n        if (defaultWebSocketConstructor && !(\"webSocketConstructor\" in baseOptions) && typeof WebSocket === \"undefined\") {\n            baseOptions.webSocketConstructor = defaultWebSocketConstructor;\n        }\n        if ( true && !(\"unsavedChangesWarning\" in baseOptions)) {\n            baseOptions.unsavedChangesWarning = false;\n        }\n        if (!this.disabled) {\n            this._client = new _index_js__WEBPACK_IMPORTED_MODULE_1__.BaseConvexClient(address, (updatedQueries)=>this._transition(updatedQueries), baseOptions);\n        }\n        this.listeners = /* @__PURE__ */ new Set();\n    }\n    /**\n   * Once closed no registered callbacks will fire again.\n   */ get closed() {\n        return this._closed;\n    }\n    get client() {\n        if (this._client) return this._client;\n        throw new Error(\"ConvexClient is disabled\");\n    }\n    /**\n   * Call a callback whenever a new result for a query is received. The callback\n   * will run soon after being registered if a result for the query is already\n   * in memory.\n   *\n   * The return value is an {@link Unsubscribe} object which is both a function\n   * an an object with properties. Both of the patterns below work with this object:\n   *\n   *```ts\n   * // call the return value as a function\n   * const unsubscribe = client.onUpdate(api.messages.list, {}, (messages) => {\n   *   console.log(messages);\n   * });\n   * unsubscribe();\n   *\n   * // unpack the return value into its properties\n   * const {\n   *   getCurrentValue,\n   *   unsubscribe,\n   * } = client.onUpdate(api.messages.list, {}, (messages) => {\n   *   console.log(messages);\n   * });\n   *```\n   *\n   * @param query - A {@link server.FunctionReference} for the public query to run.\n   * @param args - The arguments to run the query with.\n   * @param callback - Function to call when the query result updates.\n   * @param onError - Function to call when the query result updates with an error.\n   * If not provided, errors will be thrown instead of calling the callback.\n   *\n   * @return an {@link Unsubscribe} function to stop calling the onUpdate function.\n   */ onUpdate(query, args, callback, onError) {\n        if (this.disabled) {\n            const disabledUnsubscribe = ()=>{};\n            const unsubscribeProps2 = {\n                unsubscribe: disabledUnsubscribe,\n                getCurrentValue: ()=>void 0,\n                getQueryLogs: ()=>void 0\n            };\n            Object.assign(disabledUnsubscribe, unsubscribeProps2);\n            return disabledUnsubscribe;\n        }\n        const { queryToken, unsubscribe } = this.client.subscribe((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(query), args);\n        const queryInfo = {\n            queryToken,\n            callback,\n            onError,\n            unsubscribe,\n            hasEverRun: false,\n            query,\n            args\n        };\n        this.listeners.add(queryInfo);\n        if (this.queryResultReady(queryToken) && this.callNewListenersWithCurrentValuesTimer === void 0) {\n            this.callNewListenersWithCurrentValuesTimer = setTimeout(()=>this.callNewListenersWithCurrentValues(), 0);\n        }\n        const unsubscribeProps = {\n            unsubscribe: ()=>{\n                if (this.closed) {\n                    return;\n                }\n                this.listeners.delete(queryInfo);\n                unsubscribe();\n            },\n            getCurrentValue: ()=>this.client.localQueryResultByToken(queryToken),\n            getQueryLogs: ()=>this.client.localQueryLogs(queryToken)\n        };\n        const ret = unsubscribeProps.unsubscribe;\n        Object.assign(ret, unsubscribeProps);\n        return ret;\n    }\n    // Run all callbacks that have never been run before if they have a query\n    // result available now.\n    callNewListenersWithCurrentValues() {\n        this.callNewListenersWithCurrentValuesTimer = void 0;\n        this._transition([], true);\n    }\n    queryResultReady(queryToken) {\n        return this.client.hasLocalQueryResultByToken(queryToken);\n    }\n    async close() {\n        if (this.disabled) return;\n        this.listeners.clear();\n        this._closed = true;\n        return this.client.close();\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   * `fetchToken` will be called automatically again if a token expires.\n   * `fetchToken` should return `null` if the token cannot be retrieved, for example\n   * when the user's rights were permanently revoked.\n   * @param fetchToken - an async function returning the JWT-encoded OpenID Connect Identity Token\n   * @param onChange - a callback that will be called when the authentication status changes\n   */ setAuth(fetchToken, onChange) {\n        this.client.setAuth(fetchToken, onChange ?? (()=>{}));\n    }\n    /**\n   * @internal\n   */ setAdminAuth(token, identity) {\n        if (this.closed) {\n            throw new Error(\"ConvexClient has already been closed.\");\n        }\n        if (this.disabled) return;\n        this.client.setAdminAuth(token, identity);\n    }\n    /**\n   * @internal\n   */ _transition(updatedQueries, callNewListeners = false) {\n        for (const queryInfo of this.listeners){\n            const { callback, queryToken, onError, hasEverRun } = queryInfo;\n            if (updatedQueries.includes(queryToken) || callNewListeners && !hasEverRun && this.client.hasLocalQueryResultByToken(queryToken)) {\n                queryInfo.hasEverRun = true;\n                let newValue;\n                try {\n                    newValue = this.client.localQueryResultByToken(queryToken);\n                } catch (error) {\n                    if (!(error instanceof Error)) throw error;\n                    if (onError) {\n                        onError(error, \"Second argument to onUpdate onError is reserved for later use\");\n                    } else {\n                        void Promise.reject(error);\n                    }\n                    continue;\n                }\n                callback(newValue, \"Second argument to onUpdate callback is reserved for later use\");\n            }\n        }\n    }\n    /**\n   * Execute a mutation function.\n   *\n   * @param mutation - A {@link server.FunctionReference} for the public mutation\n   * to run.\n   * @param args - An arguments object for the mutation.\n   * @param options - A {@link MutationOptions} options object for the mutation.\n   * @returns A promise of the mutation's result.\n   */ async mutation(mutation, args) {\n        if (this.disabled) throw new Error(\"ConvexClient is disabled\");\n        return await this.client.mutation((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(mutation), args);\n    }\n    /**\n   * Execute an action function.\n   *\n   * @param action - A {@link server.FunctionReference} for the public action\n   * to run.\n   * @param args - An arguments object for the action.\n   * @returns A promise of the action's result.\n   */ async action(action, args) {\n        if (this.disabled) throw new Error(\"ConvexClient is disabled\");\n        return await this.client.action((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(action), args);\n    }\n    /**\n   * Fetch a query result once.\n   *\n   * @param query - A {@link server.FunctionReference} for the public query\n   * to run.\n   * @param args - An arguments object for the query.\n   * @returns A promise of the query's result.\n   */ async query(query, args) {\n        if (this.disabled) throw new Error(\"ConvexClient is disabled\");\n        const value = this.client.localQueryResult((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(query), args);\n        if (value !== void 0) return Promise.resolve(value);\n        return new Promise((resolve, reject)=>{\n            const { unsubscribe } = this.onUpdate(query, args, (value2)=>{\n                unsubscribe();\n                resolve(value2);\n            }, (e)=>{\n                unsubscribe();\n                reject(e);\n            });\n        });\n    }\n} //# sourceMappingURL=simple_client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/simple_client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/authentication_manager.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/authentication_manager.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticationManager: () => (/* binding */ AuthenticationManager)\n/* harmony export */ });\n/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jwt-decode */ \"(ssr)/./node_modules/jwt-decode/build/jwt-decode.esm.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\nconst MAXIMUM_REFRESH_DELAY = 20 * 24 * 60 * 60 * 1e3;\nclass AuthenticationManager {\n    constructor(syncState, callbacks, config){\n        __publicField(this, \"authState\", {\n            state: \"noAuth\"\n        });\n        // Used to detect races involving `setConfig` calls\n        // while a token is being fetched.\n        __publicField(this, \"configVersion\", 0);\n        // Shared by the BaseClient so that the auth manager can easily inspect it\n        __publicField(this, \"syncState\");\n        // Passed down by BaseClient, sends a message to the server\n        __publicField(this, \"authenticate\");\n        __publicField(this, \"stopSocket\");\n        __publicField(this, \"restartSocket\");\n        __publicField(this, \"pauseSocket\");\n        __publicField(this, \"resumeSocket\");\n        // Passed down by BaseClient, sends a message to the server\n        __publicField(this, \"clearAuth\");\n        __publicField(this, \"logger\");\n        __publicField(this, \"refreshTokenLeewaySeconds\");\n        this.syncState = syncState;\n        this.authenticate = callbacks.authenticate;\n        this.stopSocket = callbacks.stopSocket;\n        this.restartSocket = callbacks.restartSocket;\n        this.pauseSocket = callbacks.pauseSocket;\n        this.resumeSocket = callbacks.resumeSocket;\n        this.clearAuth = callbacks.clearAuth;\n        this.logger = config.logger;\n        this.refreshTokenLeewaySeconds = config.refreshTokenLeewaySeconds;\n    }\n    async setConfig(fetchToken, onChange) {\n        this.resetAuthState();\n        this._logVerbose(\"pausing WS for auth token fetch\");\n        this.pauseSocket();\n        const token = await this.fetchTokenAndGuardAgainstRace(fetchToken, {\n            forceRefreshToken: false\n        });\n        if (token.isFromOutdatedConfig) {\n            return;\n        }\n        if (token.value) {\n            this.setAuthState({\n                state: \"waitingForServerConfirmationOfCachedToken\",\n                config: {\n                    fetchToken,\n                    onAuthChange: onChange\n                },\n                hasRetried: false\n            });\n            this.authenticate(token.value);\n            this._logVerbose(\"resuming WS after auth token fetch\");\n            this.resumeSocket();\n        } else {\n            this.setAuthState({\n                state: \"initialRefetch\",\n                config: {\n                    fetchToken,\n                    onAuthChange: onChange\n                }\n            });\n            await this.refetchToken();\n        }\n    }\n    onTransition(serverMessage) {\n        if (!this.syncState.isCurrentOrNewerAuthVersion(serverMessage.endVersion.identity)) {\n            return;\n        }\n        if (serverMessage.endVersion.identity <= serverMessage.startVersion.identity) {\n            return;\n        }\n        if (this.authState.state === \"waitingForServerConfirmationOfCachedToken\") {\n            this._logVerbose(\"server confirmed auth token is valid\");\n            void this.refetchToken();\n            this.authState.config.onAuthChange(true);\n            return;\n        }\n        if (this.authState.state === \"waitingForServerConfirmationOfFreshToken\") {\n            this._logVerbose(\"server confirmed new auth token is valid\");\n            this.scheduleTokenRefetch(this.authState.token);\n            if (!this.authState.hadAuth) {\n                this.authState.config.onAuthChange(true);\n            }\n        }\n    }\n    onAuthError(serverMessage) {\n        const { baseVersion } = serverMessage;\n        if (baseVersion !== null && baseVersion !== void 0) {\n            if (!this.syncState.isCurrentOrNewerAuthVersion(baseVersion + 1)) {\n                this._logVerbose(\"ignoring auth error for previous auth attempt\");\n                return;\n            }\n            void this.tryToReauthenticate(serverMessage);\n            return;\n        }\n        void this.tryToReauthenticate(serverMessage);\n    }\n    // This is similar to `refetchToken` defined below, in fact we\n    // don't represent them as different states, but it is different\n    // in that we pause the WebSocket so that mutations\n    // don't retry with bad auth.\n    async tryToReauthenticate(serverMessage) {\n        if (// No way to fetch another token, kaboom\n        this.authState.state === \"noAuth\" || // We failed on a fresh token, trying another one won't help\n        this.authState.state === \"waitingForServerConfirmationOfFreshToken\") {\n            this.logger.error(`Failed to authenticate: \"${serverMessage.error}\", check your server auth config`);\n            if (this.syncState.hasAuth()) {\n                this.syncState.clearAuth();\n            }\n            if (this.authState.state !== \"noAuth\") {\n                this.setAndReportAuthFailed(this.authState.config.onAuthChange);\n            }\n            return;\n        }\n        this._logVerbose(\"attempting to reauthenticate\");\n        await this.stopSocket();\n        const token = await this.fetchTokenAndGuardAgainstRace(this.authState.config.fetchToken, {\n            forceRefreshToken: true\n        });\n        if (token.isFromOutdatedConfig) {\n            return;\n        }\n        if (token.value && this.syncState.isNewAuth(token.value)) {\n            this.authenticate(token.value);\n            this.setAuthState({\n                state: \"waitingForServerConfirmationOfFreshToken\",\n                config: this.authState.config,\n                token: token.value,\n                hadAuth: this.authState.state === \"notRefetching\" || this.authState.state === \"waitingForScheduledRefetch\"\n            });\n        } else {\n            this._logVerbose(\"reauthentication failed, could not fetch a new token\");\n            if (this.syncState.hasAuth()) {\n                this.syncState.clearAuth();\n            }\n            this.setAndReportAuthFailed(this.authState.config.onAuthChange);\n        }\n        this.restartSocket();\n    }\n    // Force refetch the token and schedule another refetch\n    // before the token expires - an active client should never\n    // need to reauthenticate.\n    async refetchToken() {\n        if (this.authState.state === \"noAuth\") {\n            return;\n        }\n        this._logVerbose(\"refetching auth token\");\n        const token = await this.fetchTokenAndGuardAgainstRace(this.authState.config.fetchToken, {\n            forceRefreshToken: true\n        });\n        if (token.isFromOutdatedConfig) {\n            return;\n        }\n        if (token.value) {\n            if (this.syncState.isNewAuth(token.value)) {\n                this.setAuthState({\n                    state: \"waitingForServerConfirmationOfFreshToken\",\n                    hadAuth: this.syncState.hasAuth(),\n                    token: token.value,\n                    config: this.authState.config\n                });\n                this.authenticate(token.value);\n            } else {\n                this.setAuthState({\n                    state: \"notRefetching\",\n                    config: this.authState.config\n                });\n            }\n        } else {\n            this._logVerbose(\"refetching token failed\");\n            if (this.syncState.hasAuth()) {\n                this.clearAuth();\n            }\n            this.setAndReportAuthFailed(this.authState.config.onAuthChange);\n        }\n        this._logVerbose(\"resuming WS after auth token fetch (if currently paused)\");\n        this.resumeSocket();\n    }\n    scheduleTokenRefetch(token) {\n        if (this.authState.state === \"noAuth\") {\n            return;\n        }\n        const decodedToken = this.decodeToken(token);\n        if (!decodedToken) {\n            this.logger.error(\"Auth token is not a valid JWT, cannot refetch the token\");\n            return;\n        }\n        const { iat, exp } = decodedToken;\n        if (!iat || !exp) {\n            this.logger.error(\"Auth token does not have required fields, cannot refetch the token\");\n            return;\n        }\n        const tokenValiditySeconds = exp - iat;\n        if (tokenValiditySeconds <= 2) {\n            this.logger.error(\"Auth token does not live long enough, cannot refetch the token\");\n            return;\n        }\n        let delay = Math.min(MAXIMUM_REFRESH_DELAY, (tokenValiditySeconds - this.refreshTokenLeewaySeconds) * 1e3);\n        if (delay <= 0) {\n            this.logger.warn(`Refetching auth token immediately, configured leeway ${this.refreshTokenLeewaySeconds}s is larger than the token's lifetime ${tokenValiditySeconds}s`);\n            delay = 0;\n        }\n        const refetchTokenTimeoutId = setTimeout(()=>{\n            void this.refetchToken();\n        }, delay);\n        this.setAuthState({\n            state: \"waitingForScheduledRefetch\",\n            refetchTokenTimeoutId,\n            config: this.authState.config\n        });\n        this._logVerbose(`scheduled preemptive auth token refetching in ${delay}ms`);\n    }\n    // Protects against simultaneous calls to `setConfig`\n    // while we're fetching a token\n    async fetchTokenAndGuardAgainstRace(fetchToken, fetchArgs) {\n        const originalConfigVersion = ++this.configVersion;\n        const token = await fetchToken(fetchArgs);\n        if (this.configVersion !== originalConfigVersion) {\n            return {\n                isFromOutdatedConfig: true\n            };\n        }\n        return {\n            isFromOutdatedConfig: false,\n            value: token\n        };\n    }\n    stop() {\n        this.resetAuthState();\n        this.configVersion++;\n    }\n    setAndReportAuthFailed(onAuthChange) {\n        onAuthChange(false);\n        this.resetAuthState();\n    }\n    resetAuthState() {\n        this.setAuthState({\n            state: \"noAuth\"\n        });\n    }\n    setAuthState(newAuth) {\n        if (this.authState.state === \"waitingForScheduledRefetch\") {\n            clearTimeout(this.authState.refetchTokenTimeoutId);\n            this.syncState.markAuthCompletion();\n        }\n        this.authState = newAuth;\n    }\n    decodeToken(token) {\n        try {\n            return (0,jwt_decode__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(token);\n        } catch (e) {\n            this._logVerbose(`Error decoding token: ${e instanceof Error ? e.message : \"Unknown error\"}`);\n            return null;\n        }\n    }\n    _logVerbose(message) {\n        this.logger.logVerbose(`${message} [v${this.configVersion}]`);\n    }\n} //# sourceMappingURL=authentication_manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/authentication_manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/client.js":
/*!*************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/client.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseConvexClient: () => (/* binding */ BaseConvexClient)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logging.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/logging.js\");\n/* harmony import */ var _local_state_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./local_state.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/local_state.js\");\n/* harmony import */ var _request_manager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./request_manager.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/request_manager.js\");\n/* harmony import */ var _optimistic_updates_impl_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./optimistic_updates_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js\");\n/* harmony import */ var _remote_query_set_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./remote_query_set.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/remote_query_set.js\");\n/* harmony import */ var _udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./udf_path_utils.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js\");\n/* harmony import */ var _web_socket_manager_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./web_socket_manager.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/web_socket_manager.js\");\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./session.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/session.js\");\n/* harmony import */ var _authentication_manager_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./authentication_manager.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/authentication_manager.js\");\n/* harmony import */ var _metrics_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./metrics.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/metrics.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _values_errors_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../values/errors.js */ \"(ssr)/./node_modules/convex/dist/esm/values/errors.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass BaseConvexClient {\n    /**\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   * @param onTransition - A callback receiving an array of query tokens\n   * corresponding to query results that have changed -- additional handlers\n   * can be added via `addOnTransitionHandler`.\n   * @param options - See {@link BaseConvexClientOptions} for a full description.\n   */ constructor(address, onTransition, options){\n        __publicField(this, \"address\");\n        __publicField(this, \"state\");\n        __publicField(this, \"requestManager\");\n        __publicField(this, \"webSocketManager\");\n        __publicField(this, \"authenticationManager\");\n        __publicField(this, \"remoteQuerySet\");\n        __publicField(this, \"optimisticQueryResults\");\n        __publicField(this, \"_transitionHandlerCounter\", 0);\n        __publicField(this, \"_nextRequestId\");\n        __publicField(this, \"_onTransitionFns\", /* @__PURE__ */ new Map());\n        __publicField(this, \"_sessionId\");\n        __publicField(this, \"firstMessageReceived\", false);\n        __publicField(this, \"debug\");\n        __publicField(this, \"logger\");\n        __publicField(this, \"maxObservedTimestamp\");\n        // Instance property so that `mark()` doesn't need to be called as a method.\n        __publicField(this, \"mark\", (name)=>{\n            if (this.debug) {\n                (0,_metrics_js__WEBPACK_IMPORTED_MODULE_11__.mark)(name, this.sessionId);\n            }\n        });\n        if (typeof address === \"object\") {\n            throw new Error(\"Passing a ClientConfig object is no longer supported. Pass the URL of the Convex deployment as a string directly.\");\n        }\n        if (options?.skipConvexDeploymentUrlCheck !== true) {\n            (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.validateDeploymentUrl)(address);\n        }\n        options = {\n            ...options\n        };\n        const authRefreshTokenLeewaySeconds = options.authRefreshTokenLeewaySeconds ?? 2;\n        let webSocketConstructor = options.webSocketConstructor;\n        if (!webSocketConstructor && typeof WebSocket === \"undefined\") {\n            throw new Error(\"No WebSocket global variable defined! To use Convex in an environment without WebSocket try the HTTP client: https://docs.convex.dev/api/classes/browser.ConvexHttpClient\");\n        }\n        webSocketConstructor = webSocketConstructor || WebSocket;\n        this.debug = options.reportDebugInfoToConvex ?? false;\n        this.address = address;\n        this.logger = options.logger ?? (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.instantiateDefaultLogger)({\n            verbose: options.verbose ?? false\n        });\n        const i = address.search(\"://\");\n        if (i === -1) {\n            throw new Error(\"Provided address was not an absolute URL.\");\n        }\n        const origin = address.substring(i + 3);\n        const protocol = address.substring(0, i);\n        let wsProtocol;\n        if (protocol === \"http\") {\n            wsProtocol = \"ws\";\n        } else if (protocol === \"https\") {\n            wsProtocol = \"wss\";\n        } else {\n            throw new Error(`Unknown parent protocol ${protocol}`);\n        }\n        const wsUri = `${wsProtocol}://${origin}/api/${_index_js__WEBPACK_IMPORTED_MODULE_0__.version}/sync`;\n        this.state = new _local_state_js__WEBPACK_IMPORTED_MODULE_3__.LocalSyncState();\n        this.remoteQuerySet = new _remote_query_set_js__WEBPACK_IMPORTED_MODULE_6__.RemoteQuerySet((queryId)=>this.state.queryPath(queryId), this.logger);\n        this.requestManager = new _request_manager_js__WEBPACK_IMPORTED_MODULE_4__.RequestManager(this.logger);\n        this.authenticationManager = new _authentication_manager_js__WEBPACK_IMPORTED_MODULE_10__.AuthenticationManager(this.state, {\n            authenticate: (token)=>{\n                const message = this.state.setAuth(token);\n                this.webSocketManager.sendMessage(message);\n            },\n            stopSocket: ()=>this.webSocketManager.stop(),\n            restartSocket: ()=>this.webSocketManager.restart(),\n            pauseSocket: ()=>{\n                this.webSocketManager.pause();\n                this.state.pause();\n            },\n            resumeSocket: ()=>this.webSocketManager.resume(),\n            clearAuth: ()=>{\n                this.clearAuth();\n            }\n        }, {\n            logger: this.logger,\n            refreshTokenLeewaySeconds: authRefreshTokenLeewaySeconds\n        });\n        this.optimisticQueryResults = new _optimistic_updates_impl_js__WEBPACK_IMPORTED_MODULE_5__.OptimisticQueryResults();\n        this.addOnTransitionHandler((transition)=>{\n            onTransition(transition.queries.map((q)=>q.token));\n        });\n        this._nextRequestId = 0;\n        this._sessionId = (0,_session_js__WEBPACK_IMPORTED_MODULE_9__.newSessionId)();\n        const { unsavedChangesWarning } = options;\n        if (true) {\n            if (unsavedChangesWarning === true) {\n                throw new Error(\"unsavedChangesWarning requested, but window.addEventListener not found! Remove {unsavedChangesWarning: true} from Convex client options.\");\n            }\n        } else {}\n        this.webSocketManager = new _web_socket_manager_js__WEBPACK_IMPORTED_MODULE_8__.WebSocketManager(wsUri, {\n            onOpen: (reconnectMetadata)=>{\n                this.mark(\"convexWebSocketOpen\");\n                this.webSocketManager.sendMessage({\n                    ...reconnectMetadata,\n                    type: \"Connect\",\n                    sessionId: this._sessionId,\n                    maxObservedTimestamp: this.maxObservedTimestamp\n                });\n                const oldRemoteQueryResults = new Set(this.remoteQuerySet.remoteQueryResults().keys());\n                this.remoteQuerySet = new _remote_query_set_js__WEBPACK_IMPORTED_MODULE_6__.RemoteQuerySet((queryId)=>this.state.queryPath(queryId), this.logger);\n                const [querySetModification, authModification] = this.state.restart(oldRemoteQueryResults);\n                if (authModification) {\n                    this.webSocketManager.sendMessage(authModification);\n                }\n                this.webSocketManager.sendMessage(querySetModification);\n                for (const message of this.requestManager.restart()){\n                    this.webSocketManager.sendMessage(message);\n                }\n            },\n            onResume: ()=>{\n                const [querySetModification, authModification] = this.state.resume();\n                if (authModification) {\n                    this.webSocketManager.sendMessage(authModification);\n                }\n                if (querySetModification) {\n                    this.webSocketManager.sendMessage(querySetModification);\n                }\n                for (const message of this.requestManager.resume()){\n                    this.webSocketManager.sendMessage(message);\n                }\n            },\n            onMessage: (serverMessage)=>{\n                if (!this.firstMessageReceived) {\n                    this.firstMessageReceived = true;\n                    this.mark(\"convexFirstMessageReceived\");\n                    this.reportMarks();\n                }\n                switch(serverMessage.type){\n                    case \"Transition\":\n                        {\n                            this.observedTimestamp(serverMessage.endVersion.ts);\n                            this.authenticationManager.onTransition(serverMessage);\n                            this.remoteQuerySet.transition(serverMessage);\n                            this.state.transition(serverMessage);\n                            const completedRequests = this.requestManager.removeCompleted(this.remoteQuerySet.timestamp());\n                            this.notifyOnQueryResultChanges(completedRequests);\n                            break;\n                        }\n                    case \"MutationResponse\":\n                        {\n                            if (serverMessage.success) {\n                                this.observedTimestamp(serverMessage.ts);\n                            }\n                            const completedMutationInfo = this.requestManager.onResponse(serverMessage);\n                            if (completedMutationInfo !== null) {\n                                this.notifyOnQueryResultChanges(/* @__PURE__ */ new Map([\n                                    [\n                                        completedMutationInfo.requestId,\n                                        completedMutationInfo.result\n                                    ]\n                                ]));\n                            }\n                            break;\n                        }\n                    case \"ActionResponse\":\n                        {\n                            this.requestManager.onResponse(serverMessage);\n                            break;\n                        }\n                    case \"AuthError\":\n                        {\n                            this.authenticationManager.onAuthError(serverMessage);\n                            break;\n                        }\n                    case \"FatalError\":\n                        {\n                            const error = (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.logFatalError)(this.logger, serverMessage.error);\n                            void this.webSocketManager.terminate();\n                            throw error;\n                        }\n                    case \"Ping\":\n                        break;\n                    default:\n                        {\n                            const _typeCheck = serverMessage;\n                        }\n                }\n                return {\n                    hasSyncedPastLastReconnect: this.hasSyncedPastLastReconnect()\n                };\n            }\n        }, webSocketConstructor, this.logger);\n        this.mark(\"convexClientConstructed\");\n    }\n    /**\n   * Return true if there is outstanding work from prior to the time of the most recent restart.\n   * This indicates that the client has not proven itself to have gotten past the issue that\n   * potentially led to the restart. Use this to influence when to reset backoff after a failure.\n   */ hasSyncedPastLastReconnect() {\n        const hasSyncedPastLastReconnect = this.requestManager.hasSyncedPastLastReconnect() || this.state.hasSyncedPastLastReconnect();\n        return hasSyncedPastLastReconnect;\n    }\n    observedTimestamp(observedTs) {\n        if (this.maxObservedTimestamp === void 0 || this.maxObservedTimestamp.lessThanOrEqual(observedTs)) {\n            this.maxObservedTimestamp = observedTs;\n        }\n    }\n    getMaxObservedTimestamp() {\n        return this.maxObservedTimestamp;\n    }\n    /**\n   * Compute the current query results based on the remoteQuerySet and the\n   * current optimistic updates and call `onTransition` for all the changed\n   * queries.\n   *\n   * @param completedMutations - A set of mutation IDs whose optimistic updates\n   * are no longer needed.\n   */ notifyOnQueryResultChanges(completedRequests) {\n        const remoteQueryResults = this.remoteQuerySet.remoteQueryResults();\n        const queryTokenToValue = /* @__PURE__ */ new Map();\n        for (const [queryId, result] of remoteQueryResults){\n            const queryToken = this.state.queryToken(queryId);\n            if (queryToken !== null) {\n                const query = {\n                    result,\n                    udfPath: this.state.queryPath(queryId),\n                    args: this.state.queryArgs(queryId)\n                };\n                queryTokenToValue.set(queryToken, query);\n            }\n        }\n        const changedQueryTokens = this.optimisticQueryResults.ingestQueryResultsFromServer(queryTokenToValue, new Set(completedRequests.keys()));\n        this.handleTransition({\n            queries: changedQueryTokens.map((token)=>({\n                    token,\n                    modification: {\n                        kind: \"Updated\",\n                        result: queryTokenToValue.get(token).result\n                    }\n                })),\n            reflectedMutations: Array.from(completedRequests).map(([requestId, result])=>({\n                    requestId,\n                    result\n                })),\n            timestamp: this.remoteQuerySet.timestamp()\n        });\n    }\n    handleTransition(transition) {\n        for (const fn of this._onTransitionFns.values()){\n            fn(transition);\n        }\n    }\n    /**\n   * Add a handler that will be called on a transition.\n   *\n   * Any external side effects (e.g. setting React state) should be handled here.\n   *\n   * @param fn\n   *\n   * @returns\n   */ addOnTransitionHandler(fn) {\n        const id = this._transitionHandlerCounter++;\n        this._onTransitionFns.set(id, fn);\n        return ()=>this._onTransitionFns.delete(id);\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   * `fetchToken` will be called automatically again if a token expires.\n   * `fetchToken` should return `null` if the token cannot be retrieved, for example\n   * when the user's rights were permanently revoked.\n   * @param fetchToken - an async function returning the JWT-encoded OpenID Connect Identity Token\n   * @param onChange - a callback that will be called when the authentication status changes\n   */ setAuth(fetchToken, onChange) {\n        void this.authenticationManager.setConfig(fetchToken, onChange);\n    }\n    hasAuth() {\n        return this.state.hasAuth();\n    }\n    /** @internal */ setAdminAuth(value, fakeUserIdentity) {\n        const message = this.state.setAdminAuth(value, fakeUserIdentity);\n        this.webSocketManager.sendMessage(message);\n    }\n    clearAuth() {\n        const message = this.state.clearAuth();\n        this.webSocketManager.sendMessage(message);\n    }\n    /**\n     * Subscribe to a query function.\n     *\n     * Whenever this query's result changes, the `onTransition` callback\n     * passed into the constructor will be called.\n     *\n     * @param name - The name of the query.\n     * @param args - An arguments object for the query. If this is omitted, the\n     * arguments will be `{}`.\n     * @param options - A {@link SubscribeOptions} options object for this query.\n  \n     * @returns An object containing a {@link QueryToken} corresponding to this\n     * query and an `unsubscribe` callback.\n     */ subscribe(name, args, options) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const { modification, queryToken, unsubscribe } = this.state.subscribe(name, argsObject, options?.journal, options?.componentPath);\n        if (modification !== null) {\n            this.webSocketManager.sendMessage(modification);\n        }\n        return {\n            queryToken,\n            unsubscribe: ()=>{\n                const modification2 = unsubscribe();\n                if (modification2) {\n                    this.webSocketManager.sendMessage(modification2);\n                }\n            }\n        };\n    }\n    /**\n   * A query result based only on the current, local state.\n   *\n   * The only way this will return a value is if we're already subscribed to the\n   * query or its value has been set optimistically.\n   */ localQueryResult(udfPath, args) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__.serializePathAndArgs)(udfPath, argsObject);\n        return this.optimisticQueryResults.queryResult(queryToken);\n    }\n    /**\n   * Get query result by query token based on current, local state\n   *\n   * The only way this will return a value is if we're already subscribed to the\n   * query or its value has been set optimistically.\n   *\n   * @internal\n   */ localQueryResultByToken(queryToken) {\n        return this.optimisticQueryResults.queryResult(queryToken);\n    }\n    /**\n   * Whether local query result is available for a toke.\n   *\n   * This method does not throw if the result is an error.\n   *\n   * @internal\n   */ hasLocalQueryResultByToken(queryToken) {\n        return this.optimisticQueryResults.hasQueryResult(queryToken);\n    }\n    /**\n   * @internal\n   */ localQueryLogs(udfPath, args) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__.serializePathAndArgs)(udfPath, argsObject);\n        return this.optimisticQueryResults.queryLogs(queryToken);\n    }\n    /**\n   * Retrieve the current {@link QueryJournal} for this query function.\n   *\n   * If we have not yet received a result for this query, this will be `undefined`.\n   *\n   * @param name - The name of the query.\n   * @param args - The arguments object for this query.\n   * @returns The query's {@link QueryJournal} or `undefined`.\n   */ queryJournal(name, args) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__.serializePathAndArgs)(name, argsObject);\n        return this.state.queryJournal(queryToken);\n    }\n    /**\n   * Get the current {@link ConnectionState} between the client and the Convex\n   * backend.\n   *\n   * @returns The {@link ConnectionState} with the Convex backend.\n   */ connectionState() {\n        return {\n            hasInflightRequests: this.requestManager.hasInflightRequests(),\n            isWebSocketConnected: this.webSocketManager.socketState() === \"ready\",\n            timeOfOldestInflightRequest: this.requestManager.timeOfOldestInflightRequest()\n        };\n    }\n    /**\n     * Execute a mutation function.\n     *\n     * @param name - The name of the mutation.\n     * @param args - An arguments object for the mutation. If this is omitted,\n     * the arguments will be `{}`.\n     * @param options - A {@link MutationOptions} options object for this mutation.\n  \n     * @returns - A promise of the mutation's result.\n     */ async mutation(name, args, options) {\n        const result = await this.mutationInternal(name, args, options);\n        if (!result.success) {\n            if (result.errorData !== void 0) {\n                throw (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.forwardData)(result, new _values_errors_js__WEBPACK_IMPORTED_MODULE_13__.ConvexError((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"mutation\", name, result)));\n            }\n            throw new Error((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"mutation\", name, result));\n        }\n        return result.value;\n    }\n    /**\n   * @internal\n   */ async mutationInternal(udfPath, args, options, componentPath) {\n        const { mutationPromise } = this.enqueueMutation(udfPath, args, options, componentPath);\n        return mutationPromise;\n    }\n    /**\n   * @internal\n   */ enqueueMutation(udfPath, args, options, componentPath) {\n        const mutationArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        this.tryReportLongDisconnect();\n        const requestId = this.nextRequestId;\n        this._nextRequestId++;\n        if (options !== void 0) {\n            const optimisticUpdate = options.optimisticUpdate;\n            if (optimisticUpdate !== void 0) {\n                const wrappedUpdate = (localQueryStore)=>{\n                    optimisticUpdate(localQueryStore, mutationArgs);\n                };\n                const changedQueryTokens = this.optimisticQueryResults.applyOptimisticUpdate(wrappedUpdate, requestId);\n                const changedQueries = changedQueryTokens.map((token)=>{\n                    const localResult = this.localQueryResultByToken(token);\n                    return {\n                        token,\n                        modification: {\n                            kind: \"Updated\",\n                            result: localResult === void 0 ? void 0 : {\n                                success: true,\n                                value: localResult,\n                                logLines: []\n                            }\n                        }\n                    };\n                });\n                this.handleTransition({\n                    queries: changedQueries,\n                    reflectedMutations: [],\n                    timestamp: this.remoteQuerySet.timestamp()\n                });\n            }\n        }\n        const message = {\n            type: \"Mutation\",\n            requestId,\n            udfPath,\n            componentPath,\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(mutationArgs)\n            ]\n        };\n        const mightBeSent = this.webSocketManager.sendMessage(message);\n        const mutationPromise = this.requestManager.request(message, mightBeSent);\n        return {\n            requestId,\n            mutationPromise\n        };\n    }\n    /**\n   * Execute an action function.\n   *\n   * @param name - The name of the action.\n   * @param args - An arguments object for the action. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the action's result.\n   */ async action(name, args) {\n        const result = await this.actionInternal(name, args);\n        if (!result.success) {\n            if (result.errorData !== void 0) {\n                throw (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.forwardData)(result, new _values_errors_js__WEBPACK_IMPORTED_MODULE_13__.ConvexError((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"action\", name, result)));\n            }\n            throw new Error((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"action\", name, result));\n        }\n        return result.value;\n    }\n    /**\n   * @internal\n   */ async actionInternal(udfPath, args, componentPath) {\n        const actionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const requestId = this.nextRequestId;\n        this._nextRequestId++;\n        this.tryReportLongDisconnect();\n        const message = {\n            type: \"Action\",\n            requestId,\n            udfPath,\n            componentPath,\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(actionArgs)\n            ]\n        };\n        const mightBeSent = this.webSocketManager.sendMessage(message);\n        return this.requestManager.request(message, mightBeSent);\n    }\n    /**\n   * Close any network handles associated with this client and stop all subscriptions.\n   *\n   * Call this method when you're done with an {@link BaseConvexClient} to\n   * dispose of its sockets and resources.\n   *\n   * @returns A `Promise` fulfilled when the connection has been completely closed.\n   */ async close() {\n        this.authenticationManager.stop();\n        return this.webSocketManager.terminate();\n    }\n    /**\n   * Return the address for this client, useful for creating a new client.\n   *\n   * Not guaranteed to match the address with which this client was constructed:\n   * it may be canonicalized.\n   */ get url() {\n        return this.address;\n    }\n    /**\n   * @internal\n   */ get nextRequestId() {\n        return this._nextRequestId;\n    }\n    /**\n   * @internal\n   */ get sessionId() {\n        return this._sessionId;\n    }\n    /**\n   * Reports performance marks to the server. This should only be called when\n   * we have a functional websocket.\n   */ reportMarks() {\n        if (this.debug) {\n            const report = (0,_metrics_js__WEBPACK_IMPORTED_MODULE_11__.getMarksReport)(this.sessionId);\n            this.webSocketManager.sendMessage({\n                type: \"Event\",\n                eventType: \"ClientConnect\",\n                event: report\n            });\n        }\n    }\n    tryReportLongDisconnect() {\n        if (!this.debug) {\n            return;\n        }\n        const timeOfOldestRequest = this.connectionState().timeOfOldestInflightRequest;\n        if (timeOfOldestRequest === null || Date.now() - timeOfOldestRequest.getTime() <= 60 * 1e3) {\n            return;\n        }\n        const endpoint = `${this.address}/api/debug_event`;\n        fetch(endpoint, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Convex-Client\": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_0__.version}`\n            },\n            body: JSON.stringify({\n                event: \"LongWebsocketDisconnect\"\n            })\n        }).then((response)=>{\n            if (!response.ok) {\n                this.logger.warn(\"Analytics request failed with response:\", response.body);\n            }\n        }).catch((error)=>{\n            this.logger.warn(\"Analytics response failed with error:\", error);\n        });\n    }\n} //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/local_state.js":
/*!******************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/local_state.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalSyncState: () => (/* binding */ LocalSyncState)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./udf_path_utils.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\nclass LocalSyncState {\n    constructor(){\n        __publicField(this, \"nextQueryId\");\n        __publicField(this, \"querySetVersion\");\n        __publicField(this, \"querySet\");\n        __publicField(this, \"queryIdToToken\");\n        __publicField(this, \"identityVersion\");\n        __publicField(this, \"auth\");\n        __publicField(this, \"outstandingQueriesOlderThanRestart\");\n        __publicField(this, \"outstandingAuthOlderThanRestart\");\n        __publicField(this, \"paused\");\n        __publicField(this, \"pendingQuerySetModifications\");\n        this.nextQueryId = 0;\n        this.querySetVersion = 0;\n        this.identityVersion = 0;\n        this.querySet = /* @__PURE__ */ new Map();\n        this.queryIdToToken = /* @__PURE__ */ new Map();\n        this.outstandingQueriesOlderThanRestart = /* @__PURE__ */ new Set();\n        this.outstandingAuthOlderThanRestart = false;\n        this.paused = false;\n        this.pendingQuerySetModifications = /* @__PURE__ */ new Map();\n    }\n    hasSyncedPastLastReconnect() {\n        return this.outstandingQueriesOlderThanRestart.size === 0 && !this.outstandingAuthOlderThanRestart;\n    }\n    markAuthCompletion() {\n        this.outstandingAuthOlderThanRestart = false;\n    }\n    subscribe(udfPath, args, journal, componentPath) {\n        const canonicalizedUdfPath = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.canonicalizeUdfPath)(udfPath);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.serializePathAndArgs)(canonicalizedUdfPath, args);\n        const existingEntry = this.querySet.get(queryToken);\n        if (existingEntry !== void 0) {\n            existingEntry.numSubscribers += 1;\n            return {\n                queryToken,\n                modification: null,\n                unsubscribe: ()=>this.removeSubscriber(queryToken)\n            };\n        } else {\n            const queryId = this.nextQueryId++;\n            const query = {\n                id: queryId,\n                canonicalizedUdfPath,\n                args,\n                numSubscribers: 1,\n                journal,\n                componentPath\n            };\n            this.querySet.set(queryToken, query);\n            this.queryIdToToken.set(queryId, queryToken);\n            const baseVersion = this.querySetVersion;\n            const newVersion = this.querySetVersion + 1;\n            const add = {\n                type: \"Add\",\n                queryId,\n                udfPath: canonicalizedUdfPath,\n                args: [\n                    (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(args)\n                ],\n                journal,\n                componentPath\n            };\n            if (this.paused) {\n                this.pendingQuerySetModifications.set(queryId, add);\n            } else {\n                this.querySetVersion = newVersion;\n            }\n            const modification = {\n                type: \"ModifyQuerySet\",\n                baseVersion,\n                newVersion,\n                modifications: [\n                    add\n                ]\n            };\n            return {\n                queryToken,\n                modification,\n                unsubscribe: ()=>this.removeSubscriber(queryToken)\n            };\n        }\n    }\n    transition(transition) {\n        for (const modification of transition.modifications){\n            switch(modification.type){\n                case \"QueryUpdated\":\n                case \"QueryFailed\":\n                    {\n                        this.outstandingQueriesOlderThanRestart.delete(modification.queryId);\n                        const journal = modification.journal;\n                        if (journal !== void 0) {\n                            const queryToken = this.queryIdToToken.get(modification.queryId);\n                            if (queryToken !== void 0) {\n                                this.querySet.get(queryToken).journal = journal;\n                            }\n                        }\n                        break;\n                    }\n                case \"QueryRemoved\":\n                    {\n                        this.outstandingQueriesOlderThanRestart.delete(modification.queryId);\n                        break;\n                    }\n                default:\n                    {\n                        const _ = modification;\n                        throw new Error(`Invalid modification ${modification.type}`);\n                    }\n            }\n        }\n    }\n    queryId(udfPath, args) {\n        const canonicalizedUdfPath = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.canonicalizeUdfPath)(udfPath);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.serializePathAndArgs)(canonicalizedUdfPath, args);\n        const existingEntry = this.querySet.get(queryToken);\n        if (existingEntry !== void 0) {\n            return existingEntry.id;\n        }\n        return null;\n    }\n    isCurrentOrNewerAuthVersion(version) {\n        return version >= this.identityVersion;\n    }\n    setAuth(value) {\n        this.auth = {\n            tokenType: \"User\",\n            value\n        };\n        const baseVersion = this.identityVersion;\n        if (!this.paused) {\n            this.identityVersion = baseVersion + 1;\n        }\n        return {\n            type: \"Authenticate\",\n            baseVersion,\n            ...this.auth\n        };\n    }\n    setAdminAuth(value, actingAs) {\n        const auth = {\n            tokenType: \"Admin\",\n            value,\n            impersonating: actingAs\n        };\n        this.auth = auth;\n        const baseVersion = this.identityVersion;\n        if (!this.paused) {\n            this.identityVersion = baseVersion + 1;\n        }\n        return {\n            type: \"Authenticate\",\n            baseVersion,\n            ...auth\n        };\n    }\n    clearAuth() {\n        this.auth = void 0;\n        this.markAuthCompletion();\n        const baseVersion = this.identityVersion;\n        if (!this.paused) {\n            this.identityVersion = baseVersion + 1;\n        }\n        return {\n            type: \"Authenticate\",\n            tokenType: \"None\",\n            baseVersion\n        };\n    }\n    hasAuth() {\n        return !!this.auth;\n    }\n    isNewAuth(value) {\n        return this.auth?.value !== value;\n    }\n    queryPath(queryId) {\n        const pathAndArgs = this.queryIdToToken.get(queryId);\n        if (pathAndArgs) {\n            return this.querySet.get(pathAndArgs).canonicalizedUdfPath;\n        }\n        return null;\n    }\n    queryArgs(queryId) {\n        const pathAndArgs = this.queryIdToToken.get(queryId);\n        if (pathAndArgs) {\n            return this.querySet.get(pathAndArgs).args;\n        }\n        return null;\n    }\n    queryToken(queryId) {\n        return this.queryIdToToken.get(queryId) ?? null;\n    }\n    queryJournal(queryToken) {\n        return this.querySet.get(queryToken)?.journal;\n    }\n    restart(oldRemoteQueryResults) {\n        this.unpause();\n        this.outstandingQueriesOlderThanRestart.clear();\n        const modifications = [];\n        for (const localQuery of this.querySet.values()){\n            const add = {\n                type: \"Add\",\n                queryId: localQuery.id,\n                udfPath: localQuery.canonicalizedUdfPath,\n                args: [\n                    (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(localQuery.args)\n                ],\n                journal: localQuery.journal,\n                componentPath: localQuery.componentPath\n            };\n            modifications.push(add);\n            if (!oldRemoteQueryResults.has(localQuery.id)) {\n                this.outstandingQueriesOlderThanRestart.add(localQuery.id);\n            }\n        }\n        this.querySetVersion = 1;\n        const querySet = {\n            type: \"ModifyQuerySet\",\n            baseVersion: 0,\n            newVersion: 1,\n            modifications\n        };\n        if (!this.auth) {\n            this.identityVersion = 0;\n            return [\n                querySet,\n                void 0\n            ];\n        }\n        this.outstandingAuthOlderThanRestart = true;\n        const authenticate = {\n            type: \"Authenticate\",\n            baseVersion: 0,\n            ...this.auth\n        };\n        this.identityVersion = 1;\n        return [\n            querySet,\n            authenticate\n        ];\n    }\n    pause() {\n        this.paused = true;\n    }\n    resume() {\n        const querySet = this.pendingQuerySetModifications.size > 0 ? {\n            type: \"ModifyQuerySet\",\n            baseVersion: this.querySetVersion,\n            newVersion: ++this.querySetVersion,\n            modifications: Array.from(this.pendingQuerySetModifications.values())\n        } : void 0;\n        const authenticate = this.auth !== void 0 ? {\n            type: \"Authenticate\",\n            baseVersion: this.identityVersion++,\n            ...this.auth\n        } : void 0;\n        this.unpause();\n        return [\n            querySet,\n            authenticate\n        ];\n    }\n    unpause() {\n        this.paused = false;\n        this.pendingQuerySetModifications.clear();\n    }\n    removeSubscriber(queryToken) {\n        const localQuery = this.querySet.get(queryToken);\n        if (localQuery.numSubscribers > 1) {\n            localQuery.numSubscribers -= 1;\n            return null;\n        } else {\n            this.querySet.delete(queryToken);\n            this.queryIdToToken.delete(localQuery.id);\n            this.outstandingQueriesOlderThanRestart.delete(localQuery.id);\n            const baseVersion = this.querySetVersion;\n            const newVersion = this.querySetVersion + 1;\n            const remove = {\n                type: \"Remove\",\n                queryId: localQuery.id\n            };\n            if (this.paused) {\n                if (this.pendingQuerySetModifications.has(localQuery.id)) {\n                    this.pendingQuerySetModifications.delete(localQuery.id);\n                } else {\n                    this.pendingQuerySetModifications.set(localQuery.id, remove);\n                }\n            } else {\n                this.querySetVersion = newVersion;\n            }\n            return {\n                type: \"ModifyQuerySet\",\n                baseVersion,\n                newVersion,\n                modifications: [\n                    remove\n                ]\n            };\n        }\n    }\n} //# sourceMappingURL=local_state.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/local_state.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/metrics.js":
/*!**************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/metrics.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMarksReport: () => (/* binding */ getMarksReport),\n/* harmony export */   mark: () => (/* binding */ mark)\n/* harmony export */ });\n\nconst markNames = [\n    \"convexClientConstructed\",\n    \"convexWebSocketOpen\",\n    \"convexFirstMessageReceived\"\n];\nfunction mark(name, sessionId) {\n    const detail = {\n        sessionId\n    };\n    if (typeof performance === \"undefined\" || !performance.mark) return;\n    performance.mark(name, {\n        detail\n    });\n}\nfunction performanceMarkToJson(mark2) {\n    let name = mark2.name.slice(\"convex\".length);\n    name = name.charAt(0).toLowerCase() + name.slice(1);\n    return {\n        name,\n        startTime: mark2.startTime\n    };\n}\nfunction getMarksReport(sessionId) {\n    if (typeof performance === \"undefined\" || !performance.getEntriesByName) {\n        return [];\n    }\n    const allMarks = [];\n    for (const name of markNames){\n        const marks = performance.getEntriesByName(name).filter((entry)=>entry.entryType === \"mark\").filter((mark2)=>mark2.detail.sessionId === sessionId);\n        allMarks.push(...marks);\n    }\n    return allMarks.map(performanceMarkToJson);\n} //# sourceMappingURL=metrics.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvc3luYy9tZXRyaWNzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWE7QUFDYixNQUFNQSxZQUFZO0lBQ2hCO0lBQ0E7SUFDQTtDQUNEO0FBQ00sU0FBU0MsS0FBS0MsSUFBSSxFQUFFQyxTQUFTO0lBQ2xDLE1BQU1DLFNBQVM7UUFBRUQ7SUFBVTtJQUMzQixJQUFJLE9BQU9FLGdCQUFnQixlQUFlLENBQUNBLFlBQVlKLElBQUksRUFBRTtJQUM3REksWUFBWUosSUFBSSxDQUFDQyxNQUFNO1FBQUVFO0lBQU87QUFDbEM7QUFDQSxTQUFTRSxzQkFBc0JDLEtBQUs7SUFDbEMsSUFBSUwsT0FBT0ssTUFBTUwsSUFBSSxDQUFDTSxLQUFLLENBQUMsU0FBU0MsTUFBTTtJQUMzQ1AsT0FBT0EsS0FBS1EsTUFBTSxDQUFDLEdBQUdDLFdBQVcsS0FBS1QsS0FBS00sS0FBSyxDQUFDO0lBQ2pELE9BQU87UUFDTE47UUFDQVUsV0FBV0wsTUFBTUssU0FBUztJQUM1QjtBQUNGO0FBQ08sU0FBU0MsZUFBZVYsU0FBUztJQUN0QyxJQUFJLE9BQU9FLGdCQUFnQixlQUFlLENBQUNBLFlBQVlTLGdCQUFnQixFQUFFO1FBQ3ZFLE9BQU8sRUFBRTtJQUNYO0lBQ0EsTUFBTUMsV0FBVyxFQUFFO0lBQ25CLEtBQUssTUFBTWIsUUFBUUYsVUFBVztRQUM1QixNQUFNZ0IsUUFBUVgsWUFBWVMsZ0JBQWdCLENBQUNaLE1BQU1lLE1BQU0sQ0FBQyxDQUFDQyxRQUFVQSxNQUFNQyxTQUFTLEtBQUssUUFBUUYsTUFBTSxDQUFDLENBQUNWLFFBQVVBLE1BQU1ILE1BQU0sQ0FBQ0QsU0FBUyxLQUFLQTtRQUM1SVksU0FBU0ssSUFBSSxJQUFJSjtJQUNuQjtJQUNBLE9BQU9ELFNBQVNNLEdBQUcsQ0FBQ2Y7QUFDdEIsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmFzb3JfY2xvbmUvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvc3luYy9tZXRyaWNzLmpzPzNmNTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBtYXJrTmFtZXMgPSBbXG4gIFwiY29udmV4Q2xpZW50Q29uc3RydWN0ZWRcIixcbiAgXCJjb252ZXhXZWJTb2NrZXRPcGVuXCIsXG4gIFwiY29udmV4Rmlyc3RNZXNzYWdlUmVjZWl2ZWRcIlxuXTtcbmV4cG9ydCBmdW5jdGlvbiBtYXJrKG5hbWUsIHNlc3Npb25JZCkge1xuICBjb25zdCBkZXRhaWwgPSB7IHNlc3Npb25JZCB9O1xuICBpZiAodHlwZW9mIHBlcmZvcm1hbmNlID09PSBcInVuZGVmaW5lZFwiIHx8ICFwZXJmb3JtYW5jZS5tYXJrKSByZXR1cm47XG4gIHBlcmZvcm1hbmNlLm1hcmsobmFtZSwgeyBkZXRhaWwgfSk7XG59XG5mdW5jdGlvbiBwZXJmb3JtYW5jZU1hcmtUb0pzb24obWFyazIpIHtcbiAgbGV0IG5hbWUgPSBtYXJrMi5uYW1lLnNsaWNlKFwiY29udmV4XCIubGVuZ3RoKTtcbiAgbmFtZSA9IG5hbWUuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpO1xuICByZXR1cm4ge1xuICAgIG5hbWUsXG4gICAgc3RhcnRUaW1lOiBtYXJrMi5zdGFydFRpbWVcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYXJrc1JlcG9ydChzZXNzaW9uSWQpIHtcbiAgaWYgKHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhcGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5TmFtZSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBhbGxNYXJrcyA9IFtdO1xuICBmb3IgKGNvbnN0IG5hbWUgb2YgbWFya05hbWVzKSB7XG4gICAgY29uc3QgbWFya3MgPSBwZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlOYW1lKG5hbWUpLmZpbHRlcigoZW50cnkpID0+IGVudHJ5LmVudHJ5VHlwZSA9PT0gXCJtYXJrXCIpLmZpbHRlcigobWFyazIpID0+IG1hcmsyLmRldGFpbC5zZXNzaW9uSWQgPT09IHNlc3Npb25JZCk7XG4gICAgYWxsTWFya3MucHVzaCguLi5tYXJrcyk7XG4gIH1cbiAgcmV0dXJuIGFsbE1hcmtzLm1hcChwZXJmb3JtYW5jZU1hcmtUb0pzb24pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWV0cmljcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJtYXJrTmFtZXMiLCJtYXJrIiwibmFtZSIsInNlc3Npb25JZCIsImRldGFpbCIsInBlcmZvcm1hbmNlIiwicGVyZm9ybWFuY2VNYXJrVG9Kc29uIiwibWFyazIiLCJzbGljZSIsImxlbmd0aCIsImNoYXJBdCIsInRvTG93ZXJDYXNlIiwic3RhcnRUaW1lIiwiZ2V0TWFya3NSZXBvcnQiLCJnZXRFbnRyaWVzQnlOYW1lIiwiYWxsTWFya3MiLCJtYXJrcyIsImZpbHRlciIsImVudHJ5IiwiZW50cnlUeXBlIiwicHVzaCIsIm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/metrics.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js":
/*!******************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OptimisticQueryResults: () => (/* binding */ OptimisticQueryResults)\n/* harmony export */ });\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../server/api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logging.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/logging.js\");\n/* harmony import */ var _udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./udf_path_utils.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js\");\n/* harmony import */ var _values_errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../values/errors.js */ \"(ssr)/./node_modules/convex/dist/esm/values/errors.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\nclass OptimisticLocalStoreImpl {\n    constructor(queryResults){\n        // A references of the query results in OptimisticQueryResults\n        __publicField(this, \"queryResults\");\n        // All of the queries modified by this class\n        __publicField(this, \"modifiedQueries\");\n        this.queryResults = queryResults;\n        this.modifiedQueries = [];\n    }\n    getQuery(query, ...args) {\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(query);\n        const queryResult = this.queryResults.get((0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__.serializePathAndArgs)(name, queryArgs));\n        if (queryResult === void 0) {\n            return void 0;\n        }\n        return OptimisticLocalStoreImpl.queryValue(queryResult.result);\n    }\n    getAllQueries(query) {\n        const queriesWithName = [];\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(query);\n        for (const queryResult of this.queryResults.values()){\n            if (queryResult.udfPath === (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__.canonicalizeUdfPath)(name)) {\n                queriesWithName.push({\n                    args: queryResult.args,\n                    value: OptimisticLocalStoreImpl.queryValue(queryResult.result)\n                });\n            }\n        }\n        return queriesWithName;\n    }\n    setQuery(queryReference, args, value) {\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(queryReference);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__.serializePathAndArgs)(name, queryArgs);\n        let result;\n        if (value === void 0) {\n            result = void 0;\n        } else {\n            result = {\n                success: true,\n                value,\n                // It's an optimistic update, so there are no function logs to show.\n                logLines: []\n            };\n        }\n        const query = {\n            udfPath: name,\n            args: queryArgs,\n            result\n        };\n        this.queryResults.set(queryToken, query);\n        this.modifiedQueries.push(queryToken);\n    }\n    static queryValue(result) {\n        if (result === void 0) {\n            return void 0;\n        } else if (result.success) {\n            return result.value;\n        } else {\n            return void 0;\n        }\n    }\n}\nclass OptimisticQueryResults {\n    constructor(){\n        __publicField(this, \"queryResults\");\n        __publicField(this, \"optimisticUpdates\");\n        this.queryResults = /* @__PURE__ */ new Map();\n        this.optimisticUpdates = [];\n    }\n    ingestQueryResultsFromServer(serverQueryResults, optimisticUpdatesToDrop) {\n        this.optimisticUpdates = this.optimisticUpdates.filter((updateAndId)=>{\n            return !optimisticUpdatesToDrop.has(updateAndId.mutationId);\n        });\n        const oldQueryResults = this.queryResults;\n        this.queryResults = new Map(serverQueryResults);\n        const localStore = new OptimisticLocalStoreImpl(this.queryResults);\n        for (const updateAndId of this.optimisticUpdates){\n            updateAndId.update(localStore);\n        }\n        const changedQueries = [];\n        for (const [queryToken, query] of this.queryResults){\n            const oldQuery = oldQueryResults.get(queryToken);\n            if (oldQuery === void 0 || oldQuery.result !== query.result) {\n                changedQueries.push(queryToken);\n            }\n        }\n        return changedQueries;\n    }\n    applyOptimisticUpdate(update, mutationId) {\n        this.optimisticUpdates.push({\n            update,\n            mutationId\n        });\n        const localStore = new OptimisticLocalStoreImpl(this.queryResults);\n        update(localStore);\n        return localStore.modifiedQueries;\n    }\n    queryResult(queryToken) {\n        const query = this.queryResults.get(queryToken);\n        if (query === void 0) {\n            return void 0;\n        }\n        const result = query.result;\n        if (result === void 0) {\n            return void 0;\n        } else if (result.success) {\n            return result.value;\n        } else {\n            if (result.errorData !== void 0) {\n                throw (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.forwardData)(result, new _values_errors_js__WEBPACK_IMPORTED_MODULE_4__.ConvexError((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"query\", query.udfPath, result)));\n            }\n            throw new Error((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"query\", query.udfPath, result));\n        }\n    }\n    hasQueryResult(queryToken) {\n        return this.queryResults.get(queryToken) !== void 0;\n    }\n    /**\n   * @internal\n   */ queryLogs(queryToken) {\n        const query = this.queryResults.get(queryToken);\n        return query?.result?.logLines;\n    }\n} //# sourceMappingURL=optimistic_updates_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/protocol.js":
/*!***************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/protocol.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeClientMessage: () => (/* binding */ encodeClientMessage),\n/* harmony export */   longToU64: () => (/* binding */ longToU64),\n/* harmony export */   parseServerMessage: () => (/* binding */ parseServerMessage),\n/* harmony export */   u64ToLong: () => (/* binding */ u64ToLong)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _long_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../long.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/long.js\");\n\n\n\nfunction u64ToLong(encoded) {\n    const integerBytes = _values_index_js__WEBPACK_IMPORTED_MODULE_0__.Base64.toByteArray(encoded);\n    return _long_js__WEBPACK_IMPORTED_MODULE_1__.Long.fromBytesLE(Array.from(integerBytes));\n}\nfunction longToU64(raw) {\n    const integerBytes = new Uint8Array(raw.toBytesLE());\n    return _values_index_js__WEBPACK_IMPORTED_MODULE_0__.Base64.fromByteArray(integerBytes);\n}\nfunction parseServerMessage(encoded) {\n    switch(encoded.type){\n        case \"FatalError\":\n        case \"AuthError\":\n        case \"ActionResponse\":\n        case \"Ping\":\n            {\n                return {\n                    ...encoded\n                };\n            }\n        case \"MutationResponse\":\n            {\n                if (encoded.success) {\n                    return {\n                        ...encoded,\n                        ts: u64ToLong(encoded.ts)\n                    };\n                } else {\n                    return {\n                        ...encoded\n                    };\n                }\n            }\n        case \"Transition\":\n            {\n                return {\n                    ...encoded,\n                    startVersion: {\n                        ...encoded.startVersion,\n                        ts: u64ToLong(encoded.startVersion.ts)\n                    },\n                    endVersion: {\n                        ...encoded.endVersion,\n                        ts: u64ToLong(encoded.endVersion.ts)\n                    }\n                };\n            }\n        default:\n            {\n                const _exhaustivenessCheck = encoded;\n            }\n    }\n    return void 0;\n}\nfunction encodeClientMessage(message) {\n    switch(message.type){\n        case \"Authenticate\":\n        case \"ModifyQuerySet\":\n        case \"Mutation\":\n        case \"Action\":\n        case \"Event\":\n            {\n                return {\n                    ...message\n                };\n            }\n        case \"Connect\":\n            {\n                if (message.maxObservedTimestamp !== void 0) {\n                    return {\n                        ...message,\n                        maxObservedTimestamp: longToU64(message.maxObservedTimestamp)\n                    };\n                } else {\n                    return {\n                        ...message,\n                        maxObservedTimestamp: void 0\n                    };\n                }\n            }\n        default:\n            {\n                const _exhaustivenessCheck = message;\n            }\n    }\n    return void 0;\n} //# sourceMappingURL=protocol.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvc3luYy9wcm90b2NvbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBYTtBQUNrQztBQUNiO0FBQzNCLFNBQVNFLFVBQVVDLE9BQU87SUFDL0IsTUFBTUMsZUFBZUosZ0VBQWtCLENBQUNHO0lBQ3hDLE9BQU9GLDBDQUFJQSxDQUFDSyxXQUFXLENBQUNDLE1BQU1DLElBQUksQ0FBQ0o7QUFDckM7QUFDTyxTQUFTSyxVQUFVQyxHQUFHO0lBQzNCLE1BQU1OLGVBQWUsSUFBSU8sV0FBV0QsSUFBSUUsU0FBUztJQUNqRCxPQUFPWixrRUFBb0IsQ0FBQ0k7QUFDOUI7QUFDTyxTQUFTVSxtQkFBbUJYLE9BQU87SUFDeEMsT0FBUUEsUUFBUVksSUFBSTtRQUNsQixLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1lBQVE7Z0JBQ1gsT0FBTztvQkFBRSxHQUFHWixPQUFPO2dCQUFDO1lBQ3RCO1FBQ0EsS0FBSztZQUFvQjtnQkFDdkIsSUFBSUEsUUFBUWEsT0FBTyxFQUFFO29CQUNuQixPQUFPO3dCQUFFLEdBQUdiLE9BQU87d0JBQUVjLElBQUlmLFVBQVVDLFFBQVFjLEVBQUU7b0JBQUU7Z0JBQ2pELE9BQU87b0JBQ0wsT0FBTzt3QkFBRSxHQUFHZCxPQUFPO29CQUFDO2dCQUN0QjtZQUNGO1FBQ0EsS0FBSztZQUFjO2dCQUNqQixPQUFPO29CQUNMLEdBQUdBLE9BQU87b0JBQ1ZlLGNBQWM7d0JBQ1osR0FBR2YsUUFBUWUsWUFBWTt3QkFDdkJELElBQUlmLFVBQVVDLFFBQVFlLFlBQVksQ0FBQ0QsRUFBRTtvQkFDdkM7b0JBQ0FFLFlBQVk7d0JBQ1YsR0FBR2hCLFFBQVFnQixVQUFVO3dCQUNyQkYsSUFBSWYsVUFBVUMsUUFBUWdCLFVBQVUsQ0FBQ0YsRUFBRTtvQkFDckM7Z0JBQ0Y7WUFDRjtRQUNBO1lBQVM7Z0JBQ1AsTUFBTUcsdUJBQXVCakI7WUFDL0I7SUFDRjtJQUNBLE9BQU8sS0FBSztBQUNkO0FBQ08sU0FBU2tCLG9CQUFvQkMsT0FBTztJQUN6QyxPQUFRQSxRQUFRUCxJQUFJO1FBQ2xCLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1lBQVM7Z0JBQ1osT0FBTztvQkFBRSxHQUFHTyxPQUFPO2dCQUFDO1lBQ3RCO1FBQ0EsS0FBSztZQUFXO2dCQUNkLElBQUlBLFFBQVFDLG9CQUFvQixLQUFLLEtBQUssR0FBRztvQkFDM0MsT0FBTzt3QkFDTCxHQUFHRCxPQUFPO3dCQUNWQyxzQkFBc0JkLFVBQVVhLFFBQVFDLG9CQUFvQjtvQkFDOUQ7Z0JBQ0YsT0FBTztvQkFDTCxPQUFPO3dCQUFFLEdBQUdELE9BQU87d0JBQUVDLHNCQUFzQixLQUFLO29CQUFFO2dCQUNwRDtZQUNGO1FBQ0E7WUFBUztnQkFDUCxNQUFNSCx1QkFBdUJFO1lBQy9CO0lBQ0Y7SUFDQSxPQUFPLEtBQUs7QUFDZCxFQUNBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYXNvcl9jbG9uZS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL3Byb3RvY29sLmpzPzI1MjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBCYXNlNjQgfSBmcm9tIFwiLi4vLi4vdmFsdWVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBMb25nIH0gZnJvbSBcIi4uL2xvbmcuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiB1NjRUb0xvbmcoZW5jb2RlZCkge1xuICBjb25zdCBpbnRlZ2VyQnl0ZXMgPSBCYXNlNjQudG9CeXRlQXJyYXkoZW5jb2RlZCk7XG4gIHJldHVybiBMb25nLmZyb21CeXRlc0xFKEFycmF5LmZyb20oaW50ZWdlckJ5dGVzKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbG9uZ1RvVTY0KHJhdykge1xuICBjb25zdCBpbnRlZ2VyQnl0ZXMgPSBuZXcgVWludDhBcnJheShyYXcudG9CeXRlc0xFKCkpO1xuICByZXR1cm4gQmFzZTY0LmZyb21CeXRlQXJyYXkoaW50ZWdlckJ5dGVzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNlcnZlck1lc3NhZ2UoZW5jb2RlZCkge1xuICBzd2l0Y2ggKGVuY29kZWQudHlwZSkge1xuICAgIGNhc2UgXCJGYXRhbEVycm9yXCI6XG4gICAgY2FzZSBcIkF1dGhFcnJvclwiOlxuICAgIGNhc2UgXCJBY3Rpb25SZXNwb25zZVwiOlxuICAgIGNhc2UgXCJQaW5nXCI6IHtcbiAgICAgIHJldHVybiB7IC4uLmVuY29kZWQgfTtcbiAgICB9XG4gICAgY2FzZSBcIk11dGF0aW9uUmVzcG9uc2VcIjoge1xuICAgICAgaWYgKGVuY29kZWQuc3VjY2Vzcykge1xuICAgICAgICByZXR1cm4geyAuLi5lbmNvZGVkLCB0czogdTY0VG9Mb25nKGVuY29kZWQudHMpIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4geyAuLi5lbmNvZGVkIH07XG4gICAgICB9XG4gICAgfVxuICAgIGNhc2UgXCJUcmFuc2l0aW9uXCI6IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmVuY29kZWQsXG4gICAgICAgIHN0YXJ0VmVyc2lvbjoge1xuICAgICAgICAgIC4uLmVuY29kZWQuc3RhcnRWZXJzaW9uLFxuICAgICAgICAgIHRzOiB1NjRUb0xvbmcoZW5jb2RlZC5zdGFydFZlcnNpb24udHMpXG4gICAgICAgIH0sXG4gICAgICAgIGVuZFZlcnNpb246IHtcbiAgICAgICAgICAuLi5lbmNvZGVkLmVuZFZlcnNpb24sXG4gICAgICAgICAgdHM6IHU2NFRvTG9uZyhlbmNvZGVkLmVuZFZlcnNpb24udHMpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGNvbnN0IF9leGhhdXN0aXZlbmVzc0NoZWNrID0gZW5jb2RlZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZvaWQgMDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVDbGllbnRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcbiAgICBjYXNlIFwiQXV0aGVudGljYXRlXCI6XG4gICAgY2FzZSBcIk1vZGlmeVF1ZXJ5U2V0XCI6XG4gICAgY2FzZSBcIk11dGF0aW9uXCI6XG4gICAgY2FzZSBcIkFjdGlvblwiOlxuICAgIGNhc2UgXCJFdmVudFwiOiB7XG4gICAgICByZXR1cm4geyAuLi5tZXNzYWdlIH07XG4gICAgfVxuICAgIGNhc2UgXCJDb25uZWN0XCI6IHtcbiAgICAgIGlmIChtZXNzYWdlLm1heE9ic2VydmVkVGltZXN0YW1wICE9PSB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5tZXNzYWdlLFxuICAgICAgICAgIG1heE9ic2VydmVkVGltZXN0YW1wOiBsb25nVG9VNjQobWVzc2FnZS5tYXhPYnNlcnZlZFRpbWVzdGFtcClcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7IC4uLm1lc3NhZ2UsIG1heE9ic2VydmVkVGltZXN0YW1wOiB2b2lkIDAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgY29uc3QgX2V4aGF1c3RpdmVuZXNzQ2hlY2sgPSBtZXNzYWdlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdG9jb2wuanMubWFwXG4iXSwibmFtZXMiOlsiQmFzZTY0IiwiTG9uZyIsInU2NFRvTG9uZyIsImVuY29kZWQiLCJpbnRlZ2VyQnl0ZXMiLCJ0b0J5dGVBcnJheSIsImZyb21CeXRlc0xFIiwiQXJyYXkiLCJmcm9tIiwibG9uZ1RvVTY0IiwicmF3IiwiVWludDhBcnJheSIsInRvQnl0ZXNMRSIsImZyb21CeXRlQXJyYXkiLCJwYXJzZVNlcnZlck1lc3NhZ2UiLCJ0eXBlIiwic3VjY2VzcyIsInRzIiwic3RhcnRWZXJzaW9uIiwiZW5kVmVyc2lvbiIsIl9leGhhdXN0aXZlbmVzc0NoZWNrIiwiZW5jb2RlQ2xpZW50TWVzc2FnZSIsIm1lc3NhZ2UiLCJtYXhPYnNlcnZlZFRpbWVzdGFtcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/protocol.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/remote_query_set.js":
/*!***********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/remote_query_set.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RemoteQuerySet: () => (/* binding */ RemoteQuerySet)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _long_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../long.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/long.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logging.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/logging.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\nclass RemoteQuerySet {\n    constructor(queryPath, logger){\n        __publicField(this, \"version\");\n        __publicField(this, \"remoteQuerySet\");\n        __publicField(this, \"queryPath\");\n        __publicField(this, \"logger\");\n        this.version = {\n            querySet: 0,\n            ts: _long_js__WEBPACK_IMPORTED_MODULE_1__.Long.fromNumber(0),\n            identity: 0\n        };\n        this.remoteQuerySet = /* @__PURE__ */ new Map();\n        this.queryPath = queryPath;\n        this.logger = logger;\n    }\n    transition(transition) {\n        const start = transition.startVersion;\n        if (this.version.querySet !== start.querySet || this.version.ts.notEquals(start.ts) || this.version.identity !== start.identity) {\n            throw new Error(`Invalid start version: ${start.ts.toString()}:${start.querySet}`);\n        }\n        for (const modification of transition.modifications){\n            switch(modification.type){\n                case \"QueryUpdated\":\n                    {\n                        const queryPath = this.queryPath(modification.queryId);\n                        if (queryPath) {\n                            for (const line of modification.logLines){\n                                (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.logForFunction)(this.logger, \"info\", \"query\", queryPath, line);\n                            }\n                        }\n                        const value = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(modification.value ?? null);\n                        this.remoteQuerySet.set(modification.queryId, {\n                            success: true,\n                            value,\n                            logLines: modification.logLines\n                        });\n                        break;\n                    }\n                case \"QueryFailed\":\n                    {\n                        const queryPath = this.queryPath(modification.queryId);\n                        if (queryPath) {\n                            for (const line of modification.logLines){\n                                (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.logForFunction)(this.logger, \"info\", \"query\", queryPath, line);\n                            }\n                        }\n                        const { errorData } = modification;\n                        this.remoteQuerySet.set(modification.queryId, {\n                            success: false,\n                            errorMessage: modification.errorMessage,\n                            errorData: errorData !== void 0 ? (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(errorData) : void 0,\n                            logLines: modification.logLines\n                        });\n                        break;\n                    }\n                case \"QueryRemoved\":\n                    {\n                        this.remoteQuerySet.delete(modification.queryId);\n                        break;\n                    }\n                default:\n                    {\n                        const _ = modification;\n                        throw new Error(`Invalid modification ${modification.type}`);\n                    }\n            }\n        }\n        this.version = transition.endVersion;\n    }\n    remoteQueryResults() {\n        return this.remoteQuerySet;\n    }\n    timestamp() {\n        return this.version.ts;\n    }\n} //# sourceMappingURL=remote_query_set.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvc3luYy9yZW1vdGVfcXVlcnlfc2V0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBYTtBQUNiLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1KLFVBQVVJLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksZ0JBQWdCLENBQUNOLEtBQUtDLEtBQUtDLFFBQVVILGdCQUFnQkMsS0FBSyxPQUFPQyxRQUFRLFdBQVdBLE1BQU0sS0FBS0EsS0FBS0M7QUFDbkQ7QUFDbkI7QUFDYTtBQUN4QyxNQUFNUTtJQUNYQyxZQUFZQyxTQUFTLEVBQUVDLE1BQU0sQ0FBRTtRQUM3QlAsY0FBYyxJQUFJLEVBQUU7UUFDcEJBLGNBQWMsSUFBSSxFQUFFO1FBQ3BCQSxjQUFjLElBQUksRUFBRTtRQUNwQkEsY0FBYyxJQUFJLEVBQUU7UUFDcEIsSUFBSSxDQUFDUSxPQUFPLEdBQUc7WUFBRUMsVUFBVTtZQUFHQyxJQUFJUiwwQ0FBSUEsQ0FBQ1MsVUFBVSxDQUFDO1lBQUlDLFVBQVU7UUFBRTtRQUNsRSxJQUFJLENBQUNDLGNBQWMsR0FBRyxhQUFhLEdBQUcsSUFBSUM7UUFDMUMsSUFBSSxDQUFDUixTQUFTLEdBQUdBO1FBQ2pCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQTtJQUNoQjtJQUNBUSxXQUFXQSxVQUFVLEVBQUU7UUFDckIsTUFBTUMsUUFBUUQsV0FBV0UsWUFBWTtRQUNyQyxJQUFJLElBQUksQ0FBQ1QsT0FBTyxDQUFDQyxRQUFRLEtBQUtPLE1BQU1QLFFBQVEsSUFBSSxJQUFJLENBQUNELE9BQU8sQ0FBQ0UsRUFBRSxDQUFDUSxTQUFTLENBQUNGLE1BQU1OLEVBQUUsS0FBSyxJQUFJLENBQUNGLE9BQU8sQ0FBQ0ksUUFBUSxLQUFLSSxNQUFNSixRQUFRLEVBQUU7WUFDL0gsTUFBTSxJQUFJTyxNQUNSLENBQUMsdUJBQXVCLEVBQUVILE1BQU1OLEVBQUUsQ0FBQ1UsUUFBUSxHQUFHLENBQUMsRUFBRUosTUFBTVAsUUFBUSxDQUFDLENBQUM7UUFFckU7UUFDQSxLQUFLLE1BQU1ZLGdCQUFnQk4sV0FBV08sYUFBYSxDQUFFO1lBQ25ELE9BQVFELGFBQWFFLElBQUk7Z0JBQ3ZCLEtBQUs7b0JBQWdCO3dCQUNuQixNQUFNakIsWUFBWSxJQUFJLENBQUNBLFNBQVMsQ0FBQ2UsYUFBYUcsT0FBTzt3QkFDckQsSUFBSWxCLFdBQVc7NEJBQ2IsS0FBSyxNQUFNbUIsUUFBUUosYUFBYUssUUFBUSxDQUFFO2dDQUN4Q3ZCLDJEQUFjQSxDQUFDLElBQUksQ0FBQ0ksTUFBTSxFQUFFLFFBQVEsU0FBU0QsV0FBV21COzRCQUMxRDt3QkFDRjt3QkFDQSxNQUFNN0IsUUFBUUssOERBQVlBLENBQUNvQixhQUFhekIsS0FBSyxJQUFJO3dCQUNqRCxJQUFJLENBQUNpQixjQUFjLENBQUNjLEdBQUcsQ0FBQ04sYUFBYUcsT0FBTyxFQUFFOzRCQUM1Q0ksU0FBUzs0QkFDVGhDOzRCQUNBOEIsVUFBVUwsYUFBYUssUUFBUTt3QkFDakM7d0JBQ0E7b0JBQ0Y7Z0JBQ0EsS0FBSztvQkFBZTt3QkFDbEIsTUFBTXBCLFlBQVksSUFBSSxDQUFDQSxTQUFTLENBQUNlLGFBQWFHLE9BQU87d0JBQ3JELElBQUlsQixXQUFXOzRCQUNiLEtBQUssTUFBTW1CLFFBQVFKLGFBQWFLLFFBQVEsQ0FBRTtnQ0FDeEN2QiwyREFBY0EsQ0FBQyxJQUFJLENBQUNJLE1BQU0sRUFBRSxRQUFRLFNBQVNELFdBQVdtQjs0QkFDMUQ7d0JBQ0Y7d0JBQ0EsTUFBTSxFQUFFSSxTQUFTLEVBQUUsR0FBR1I7d0JBQ3RCLElBQUksQ0FBQ1IsY0FBYyxDQUFDYyxHQUFHLENBQUNOLGFBQWFHLE9BQU8sRUFBRTs0QkFDNUNJLFNBQVM7NEJBQ1RFLGNBQWNULGFBQWFTLFlBQVk7NEJBQ3ZDRCxXQUFXQSxjQUFjLEtBQUssSUFBSTVCLDhEQUFZQSxDQUFDNEIsYUFBYSxLQUFLOzRCQUNqRUgsVUFBVUwsYUFBYUssUUFBUTt3QkFDakM7d0JBQ0E7b0JBQ0Y7Z0JBQ0EsS0FBSztvQkFBZ0I7d0JBQ25CLElBQUksQ0FBQ2IsY0FBYyxDQUFDa0IsTUFBTSxDQUFDVixhQUFhRyxPQUFPO3dCQUMvQztvQkFDRjtnQkFDQTtvQkFBUzt3QkFDUCxNQUFNUSxJQUFJWDt3QkFDVixNQUFNLElBQUlGLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRUUsYUFBYUUsSUFBSSxDQUFDLENBQUM7b0JBQzdEO1lBQ0Y7UUFDRjtRQUNBLElBQUksQ0FBQ2YsT0FBTyxHQUFHTyxXQUFXa0IsVUFBVTtJQUN0QztJQUNBQyxxQkFBcUI7UUFDbkIsT0FBTyxJQUFJLENBQUNyQixjQUFjO0lBQzVCO0lBQ0FzQixZQUFZO1FBQ1YsT0FBTyxJQUFJLENBQUMzQixPQUFPLENBQUNFLEVBQUU7SUFDeEI7QUFDRixFQUNBLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYXNvcl9jbG9uZS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL3JlbW90ZV9xdWVyeV9zZXQuanM/YWNhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19wdWJsaWNGaWVsZCA9IChvYmosIGtleSwgdmFsdWUpID0+IF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG5pbXBvcnQgeyBqc29uVG9Db252ZXggfSBmcm9tIFwiLi4vLi4vdmFsdWVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBMb25nIH0gZnJvbSBcIi4uL2xvbmcuanNcIjtcbmltcG9ydCB7IGxvZ0ZvckZ1bmN0aW9uIH0gZnJvbSBcIi4uL2xvZ2dpbmcuanNcIjtcbmV4cG9ydCBjbGFzcyBSZW1vdGVRdWVyeVNldCB7XG4gIGNvbnN0cnVjdG9yKHF1ZXJ5UGF0aCwgbG9nZ2VyKSB7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInZlcnNpb25cIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInJlbW90ZVF1ZXJ5U2V0XCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJxdWVyeVBhdGhcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImxvZ2dlclwiKTtcbiAgICB0aGlzLnZlcnNpb24gPSB7IHF1ZXJ5U2V0OiAwLCB0czogTG9uZy5mcm9tTnVtYmVyKDApLCBpZGVudGl0eTogMCB9O1xuICAgIHRoaXMucmVtb3RlUXVlcnlTZXQgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIHRoaXMucXVlcnlQYXRoID0gcXVlcnlQYXRoO1xuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICB9XG4gIHRyYW5zaXRpb24odHJhbnNpdGlvbikge1xuICAgIGNvbnN0IHN0YXJ0ID0gdHJhbnNpdGlvbi5zdGFydFZlcnNpb247XG4gICAgaWYgKHRoaXMudmVyc2lvbi5xdWVyeVNldCAhPT0gc3RhcnQucXVlcnlTZXQgfHwgdGhpcy52ZXJzaW9uLnRzLm5vdEVxdWFscyhzdGFydC50cykgfHwgdGhpcy52ZXJzaW9uLmlkZW50aXR5ICE9PSBzdGFydC5pZGVudGl0eSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW52YWxpZCBzdGFydCB2ZXJzaW9uOiAke3N0YXJ0LnRzLnRvU3RyaW5nKCl9OiR7c3RhcnQucXVlcnlTZXR9YFxuICAgICAgKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBtb2RpZmljYXRpb24gb2YgdHJhbnNpdGlvbi5tb2RpZmljYXRpb25zKSB7XG4gICAgICBzd2l0Y2ggKG1vZGlmaWNhdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJRdWVyeVVwZGF0ZWRcIjoge1xuICAgICAgICAgIGNvbnN0IHF1ZXJ5UGF0aCA9IHRoaXMucXVlcnlQYXRoKG1vZGlmaWNhdGlvbi5xdWVyeUlkKTtcbiAgICAgICAgICBpZiAocXVlcnlQYXRoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbW9kaWZpY2F0aW9uLmxvZ0xpbmVzKSB7XG4gICAgICAgICAgICAgIGxvZ0ZvckZ1bmN0aW9uKHRoaXMubG9nZ2VyLCBcImluZm9cIiwgXCJxdWVyeVwiLCBxdWVyeVBhdGgsIGxpbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGpzb25Ub0NvbnZleChtb2RpZmljYXRpb24udmFsdWUgPz8gbnVsbCk7XG4gICAgICAgICAgdGhpcy5yZW1vdGVRdWVyeVNldC5zZXQobW9kaWZpY2F0aW9uLnF1ZXJ5SWQsIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGxvZ0xpbmVzOiBtb2RpZmljYXRpb24ubG9nTGluZXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiUXVlcnlGYWlsZWRcIjoge1xuICAgICAgICAgIGNvbnN0IHF1ZXJ5UGF0aCA9IHRoaXMucXVlcnlQYXRoKG1vZGlmaWNhdGlvbi5xdWVyeUlkKTtcbiAgICAgICAgICBpZiAocXVlcnlQYXRoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbW9kaWZpY2F0aW9uLmxvZ0xpbmVzKSB7XG4gICAgICAgICAgICAgIGxvZ0ZvckZ1bmN0aW9uKHRoaXMubG9nZ2VyLCBcImluZm9cIiwgXCJxdWVyeVwiLCBxdWVyeVBhdGgsIGxpbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB7IGVycm9yRGF0YSB9ID0gbW9kaWZpY2F0aW9uO1xuICAgICAgICAgIHRoaXMucmVtb3RlUXVlcnlTZXQuc2V0KG1vZGlmaWNhdGlvbi5xdWVyeUlkLCB7XG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogbW9kaWZpY2F0aW9uLmVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgIGVycm9yRGF0YTogZXJyb3JEYXRhICE9PSB2b2lkIDAgPyBqc29uVG9Db252ZXgoZXJyb3JEYXRhKSA6IHZvaWQgMCxcbiAgICAgICAgICAgIGxvZ0xpbmVzOiBtb2RpZmljYXRpb24ubG9nTGluZXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiUXVlcnlSZW1vdmVkXCI6IHtcbiAgICAgICAgICB0aGlzLnJlbW90ZVF1ZXJ5U2V0LmRlbGV0ZShtb2RpZmljYXRpb24ucXVlcnlJZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIGNvbnN0IF8gPSBtb2RpZmljYXRpb247XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG1vZGlmaWNhdGlvbiAke21vZGlmaWNhdGlvbi50eXBlfWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMudmVyc2lvbiA9IHRyYW5zaXRpb24uZW5kVmVyc2lvbjtcbiAgfVxuICByZW1vdGVRdWVyeVJlc3VsdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3RlUXVlcnlTZXQ7XG4gIH1cbiAgdGltZXN0YW1wKCkge1xuICAgIHJldHVybiB0aGlzLnZlcnNpb24udHM7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbW90ZV9xdWVyeV9zZXQuanMubWFwXG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fcHVibGljRmllbGQiLCJqc29uVG9Db252ZXgiLCJMb25nIiwibG9nRm9yRnVuY3Rpb24iLCJSZW1vdGVRdWVyeVNldCIsImNvbnN0cnVjdG9yIiwicXVlcnlQYXRoIiwibG9nZ2VyIiwidmVyc2lvbiIsInF1ZXJ5U2V0IiwidHMiLCJmcm9tTnVtYmVyIiwiaWRlbnRpdHkiLCJyZW1vdGVRdWVyeVNldCIsIk1hcCIsInRyYW5zaXRpb24iLCJzdGFydCIsInN0YXJ0VmVyc2lvbiIsIm5vdEVxdWFscyIsIkVycm9yIiwidG9TdHJpbmciLCJtb2RpZmljYXRpb24iLCJtb2RpZmljYXRpb25zIiwidHlwZSIsInF1ZXJ5SWQiLCJsaW5lIiwibG9nTGluZXMiLCJzZXQiLCJzdWNjZXNzIiwiZXJyb3JEYXRhIiwiZXJyb3JNZXNzYWdlIiwiZGVsZXRlIiwiXyIsImVuZFZlcnNpb24iLCJyZW1vdGVRdWVyeVJlc3VsdHMiLCJ0aW1lc3RhbXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/remote_query_set.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/request_manager.js":
/*!**********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/request_manager.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestManager: () => (/* binding */ RequestManager)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logging.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/logging.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\nclass RequestManager {\n    constructor(logger){\n        this.logger = logger;\n        __publicField(this, \"inflightRequests\");\n        __publicField(this, \"requestsOlderThanRestart\");\n        this.inflightRequests = /* @__PURE__ */ new Map();\n        this.requestsOlderThanRestart = /* @__PURE__ */ new Set();\n    }\n    request(message, sent) {\n        const result = new Promise((resolve)=>{\n            const status = sent ? \"Requested\" : \"NotSent\";\n            this.inflightRequests.set(message.requestId, {\n                message,\n                status: {\n                    status,\n                    requestedAt: /* @__PURE__ */ new Date(),\n                    onResult: resolve\n                }\n            });\n        });\n        return result;\n    }\n    /**\n   * Update the state after receiving a response.\n   *\n   * @returns A RequestId if the request is complete and its optimistic update\n   * can be dropped, null otherwise.\n   */ onResponse(response) {\n        const requestInfo = this.inflightRequests.get(response.requestId);\n        if (requestInfo === void 0) {\n            return null;\n        }\n        if (requestInfo.status.status === \"Completed\") {\n            return null;\n        }\n        const udfType = requestInfo.message.type === \"Mutation\" ? \"mutation\" : \"action\";\n        const udfPath = requestInfo.message.udfPath;\n        for (const line of response.logLines){\n            (0,_logging_js__WEBPACK_IMPORTED_MODULE_1__.logForFunction)(this.logger, \"info\", udfType, udfPath, line);\n        }\n        const status = requestInfo.status;\n        let result;\n        let onResolve;\n        if (response.success) {\n            result = {\n                success: true,\n                logLines: response.logLines,\n                value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(response.result)\n            };\n            onResolve = ()=>status.onResult(result);\n        } else {\n            const errorMessage = response.result;\n            const { errorData } = response;\n            (0,_logging_js__WEBPACK_IMPORTED_MODULE_1__.logForFunction)(this.logger, \"error\", udfType, udfPath, errorMessage);\n            result = {\n                success: false,\n                errorMessage,\n                errorData: errorData !== void 0 ? (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(errorData) : void 0,\n                logLines: response.logLines\n            };\n            onResolve = ()=>status.onResult(result);\n        }\n        if (response.type === \"ActionResponse\" || !response.success) {\n            onResolve();\n            this.inflightRequests.delete(response.requestId);\n            this.requestsOlderThanRestart.delete(response.requestId);\n            return {\n                requestId: response.requestId,\n                result\n            };\n        }\n        requestInfo.status = {\n            status: \"Completed\",\n            result,\n            ts: response.ts,\n            onResolve\n        };\n        return null;\n    }\n    // Remove and returns completed requests.\n    removeCompleted(ts) {\n        const completeRequests = /* @__PURE__ */ new Map();\n        for (const [requestId, requestInfo] of this.inflightRequests.entries()){\n            const status = requestInfo.status;\n            if (status.status === \"Completed\" && status.ts.lessThanOrEqual(ts)) {\n                status.onResolve();\n                completeRequests.set(requestId, status.result);\n                this.inflightRequests.delete(requestId);\n                this.requestsOlderThanRestart.delete(requestId);\n            }\n        }\n        return completeRequests;\n    }\n    restart() {\n        this.requestsOlderThanRestart = new Set(this.inflightRequests.keys());\n        const allMessages = [];\n        for (const [requestId, value] of this.inflightRequests){\n            if (value.status.status === \"NotSent\") {\n                value.status.status = \"Requested\";\n                allMessages.push(value.message);\n                continue;\n            }\n            if (value.message.type === \"Mutation\") {\n                allMessages.push(value.message);\n            } else {\n                this.inflightRequests.delete(requestId);\n                this.requestsOlderThanRestart.delete(requestId);\n                if (value.status.status === \"Completed\") {\n                    throw new Error(\"Action should never be in 'Completed' state\");\n                }\n                value.status.onResult({\n                    success: false,\n                    errorMessage: \"Connection lost while action was in flight\",\n                    logLines: []\n                });\n            }\n        }\n        return allMessages;\n    }\n    resume() {\n        const allMessages = [];\n        for (const [, value] of this.inflightRequests){\n            if (value.status.status === \"NotSent\") {\n                value.status.status = \"Requested\";\n                allMessages.push(value.message);\n                continue;\n            }\n        }\n        return allMessages;\n    }\n    /**\n   * @returns true if there are any requests that have been requested but have\n   * not be completed yet.\n   */ hasIncompleteRequests() {\n        for (const requestInfo of this.inflightRequests.values()){\n            if (requestInfo.status.status === \"Requested\") {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n   * @returns true if there are any inflight requests, including ones that have\n   * completed on the server, but have not been applied.\n   */ hasInflightRequests() {\n        return this.inflightRequests.size > 0;\n    }\n    /**\n   * @returns true if there are any inflight requests, that have been hanging around\n   * since prior to the most recent restart.\n   */ hasSyncedPastLastReconnect() {\n        return this.requestsOlderThanRestart.size === 0;\n    }\n    timeOfOldestInflightRequest() {\n        if (this.inflightRequests.size === 0) {\n            return null;\n        }\n        let oldestInflightRequest = Date.now();\n        for (const request of this.inflightRequests.values()){\n            if (request.status.status !== \"Completed\") {\n                if (request.status.requestedAt.getTime() < oldestInflightRequest) {\n                    oldestInflightRequest = request.status.requestedAt.getTime();\n                }\n            }\n        }\n        return new Date(oldestInflightRequest);\n    }\n} //# sourceMappingURL=request_manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/request_manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/session.js":
/*!**************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/session.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   newSessionId: () => (/* binding */ newSessionId)\n/* harmony export */ });\n\nfunction newSessionId() {\n    return uuidv4();\n}\nfunction uuidv4() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c)=>{\n        const r = Math.random() * 16 | 0, v = c === \"x\" ? r : r & 3 | 8;\n        return v.toString(16);\n    });\n} //# sourceMappingURL=session.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvc3luYy9zZXNzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBYTtBQUNOLFNBQVNBO0lBQ2QsT0FBT0M7QUFDVDtBQUNBLFNBQVNBO0lBQ1AsT0FBTyx1Q0FBdUNDLE9BQU8sQ0FBQyxTQUFTLENBQUNDO1FBQzlELE1BQU1DLElBQUlDLEtBQUtDLE1BQU0sS0FBSyxLQUFLLEdBQUdDLElBQUlKLE1BQU0sTUFBTUMsSUFBSUEsSUFBSSxJQUFJO1FBQzlELE9BQU9HLEVBQUVDLFFBQVEsQ0FBQztJQUNwQjtBQUNGLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhc29yX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9icm93c2VyL3N5bmMvc2Vzc2lvbi5qcz9lMTAyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0IGZ1bmN0aW9uIG5ld1Nlc3Npb25JZCgpIHtcbiAgcmV0dXJuIHV1aWR2NCgpO1xufVxuZnVuY3Rpb24gdXVpZHY0KCkge1xuICByZXR1cm4gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csIChjKSA9PiB7XG4gICAgY29uc3QgciA9IE1hdGgucmFuZG9tKCkgKiAxNiB8IDAsIHYgPSBjID09PSBcInhcIiA/IHIgOiByICYgMyB8IDg7XG4gICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlc3Npb24uanMubWFwXG4iXSwibmFtZXMiOlsibmV3U2Vzc2lvbklkIiwidXVpZHY0IiwicmVwbGFjZSIsImMiLCJyIiwiTWF0aCIsInJhbmRvbSIsInYiLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/session.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canonicalizeUdfPath: () => (/* binding */ canonicalizeUdfPath),\n/* harmony export */   serializePathAndArgs: () => (/* binding */ serializePathAndArgs)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n\n\nfunction canonicalizeUdfPath(udfPath) {\n    const pieces = udfPath.split(\":\");\n    let moduleName;\n    let functionName;\n    if (pieces.length === 1) {\n        moduleName = pieces[0];\n        functionName = \"default\";\n    } else {\n        moduleName = pieces.slice(0, pieces.length - 1).join(\":\");\n        functionName = pieces[pieces.length - 1];\n    }\n    if (moduleName.endsWith(\".js\")) {\n        moduleName = moduleName.slice(0, -3);\n    }\n    return `${moduleName}:${functionName}`;\n}\nfunction serializePathAndArgs(udfPath, args) {\n    return JSON.stringify({\n        udfPath: canonicalizeUdfPath(udfPath),\n        args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(args)\n    });\n} //# sourceMappingURL=udf_path_utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvc3luYy91ZGZfcGF0aF91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBYTtBQUN3QztBQUM5QyxTQUFTQyxvQkFBb0JDLE9BQU87SUFDekMsTUFBTUMsU0FBU0QsUUFBUUUsS0FBSyxDQUFDO0lBQzdCLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJSCxPQUFPSSxNQUFNLEtBQUssR0FBRztRQUN2QkYsYUFBYUYsTUFBTSxDQUFDLEVBQUU7UUFDdEJHLGVBQWU7SUFDakIsT0FBTztRQUNMRCxhQUFhRixPQUFPSyxLQUFLLENBQUMsR0FBR0wsT0FBT0ksTUFBTSxHQUFHLEdBQUdFLElBQUksQ0FBQztRQUNyREgsZUFBZUgsTUFBTSxDQUFDQSxPQUFPSSxNQUFNLEdBQUcsRUFBRTtJQUMxQztJQUNBLElBQUlGLFdBQVdLLFFBQVEsQ0FBQyxRQUFRO1FBQzlCTCxhQUFhQSxXQUFXRyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQ3BDO0lBQ0EsT0FBTyxDQUFDLEVBQUVILFdBQVcsQ0FBQyxFQUFFQyxhQUFhLENBQUM7QUFDeEM7QUFDTyxTQUFTSyxxQkFBcUJULE9BQU8sRUFBRVUsSUFBSTtJQUNoRCxPQUFPQyxLQUFLQyxTQUFTLENBQUM7UUFDcEJaLFNBQVNELG9CQUFvQkM7UUFDN0JVLE1BQU1aLDhEQUFZQSxDQUFDWTtJQUNyQjtBQUNGLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhc29yX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9icm93c2VyL3N5bmMvdWRmX3BhdGhfdXRpbHMuanM/MDVhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IGNvbnZleFRvSnNvbiB9IGZyb20gXCIuLi8uLi92YWx1ZXMvaW5kZXguanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBjYW5vbmljYWxpemVVZGZQYXRoKHVkZlBhdGgpIHtcbiAgY29uc3QgcGllY2VzID0gdWRmUGF0aC5zcGxpdChcIjpcIik7XG4gIGxldCBtb2R1bGVOYW1lO1xuICBsZXQgZnVuY3Rpb25OYW1lO1xuICBpZiAocGllY2VzLmxlbmd0aCA9PT0gMSkge1xuICAgIG1vZHVsZU5hbWUgPSBwaWVjZXNbMF07XG4gICAgZnVuY3Rpb25OYW1lID0gXCJkZWZhdWx0XCI7XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlTmFtZSA9IHBpZWNlcy5zbGljZSgwLCBwaWVjZXMubGVuZ3RoIC0gMSkuam9pbihcIjpcIik7XG4gICAgZnVuY3Rpb25OYW1lID0gcGllY2VzW3BpZWNlcy5sZW5ndGggLSAxXTtcbiAgfVxuICBpZiAobW9kdWxlTmFtZS5lbmRzV2l0aChcIi5qc1wiKSkge1xuICAgIG1vZHVsZU5hbWUgPSBtb2R1bGVOYW1lLnNsaWNlKDAsIC0zKTtcbiAgfVxuICByZXR1cm4gYCR7bW9kdWxlTmFtZX06JHtmdW5jdGlvbk5hbWV9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVQYXRoQW5kQXJncyh1ZGZQYXRoLCBhcmdzKSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgdWRmUGF0aDogY2Fub25pY2FsaXplVWRmUGF0aCh1ZGZQYXRoKSxcbiAgICBhcmdzOiBjb252ZXhUb0pzb24oYXJncylcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11ZGZfcGF0aF91dGlscy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJjb252ZXhUb0pzb24iLCJjYW5vbmljYWxpemVVZGZQYXRoIiwidWRmUGF0aCIsInBpZWNlcyIsInNwbGl0IiwibW9kdWxlTmFtZSIsImZ1bmN0aW9uTmFtZSIsImxlbmd0aCIsInNsaWNlIiwiam9pbiIsImVuZHNXaXRoIiwic2VyaWFsaXplUGF0aEFuZEFyZ3MiLCJhcmdzIiwiSlNPTiIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/web_socket_manager.js":
/*!*************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/web_socket_manager.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocketManager: () => (/* binding */ WebSocketManager)\n/* harmony export */ });\n/* harmony import */ var _protocol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./protocol.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/protocol.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\nconst CLOSE_NORMAL = 1e3;\nconst CLOSE_GOING_AWAY = 1001;\nconst CLOSE_NO_STATUS = 1005;\nconst CLOSE_NOT_FOUND = 4040;\nclass WebSocketManager {\n    constructor(uri, callbacks, webSocketConstructor, logger){\n        __publicField(this, \"socket\");\n        __publicField(this, \"connectionCount\");\n        __publicField(this, \"lastCloseReason\");\n        /** Upon HTTPS/WSS failure, the first jittered backoff duration, in ms. */ __publicField(this, \"initialBackoff\");\n        /** We backoff exponentially, but we need to cap that--this is the jittered max. */ __publicField(this, \"maxBackoff\");\n        /** How many times have we failed consecutively? */ __publicField(this, \"retries\");\n        /** How long before lack of server response causes us to initiate a reconnect,\n     * in ms */ __publicField(this, \"serverInactivityThreshold\");\n        __publicField(this, \"reconnectDueToServerInactivityTimeout\");\n        __publicField(this, \"uri\");\n        __publicField(this, \"onOpen\");\n        __publicField(this, \"onResume\");\n        __publicField(this, \"onMessage\");\n        __publicField(this, \"webSocketConstructor\");\n        __publicField(this, \"logger\");\n        this.webSocketConstructor = webSocketConstructor;\n        this.socket = {\n            state: \"disconnected\"\n        };\n        this.connectionCount = 0;\n        this.lastCloseReason = \"InitialConnect\";\n        this.initialBackoff = 100;\n        this.maxBackoff = 16e3;\n        this.retries = 0;\n        this.serverInactivityThreshold = 3e4;\n        this.reconnectDueToServerInactivityTimeout = null;\n        this.uri = uri;\n        this.onOpen = callbacks.onOpen;\n        this.onResume = callbacks.onResume;\n        this.onMessage = callbacks.onMessage;\n        this.logger = logger;\n        this.connect();\n    }\n    connect() {\n        if (this.socket.state === \"terminated\") {\n            return;\n        }\n        if (this.socket.state !== \"disconnected\" && this.socket.state !== \"stopped\") {\n            throw new Error(\"Didn't start connection from disconnected state: \" + this.socket.state);\n        }\n        const ws = new this.webSocketConstructor(this.uri);\n        this._logVerbose(\"constructed WebSocket\");\n        this.socket = {\n            state: \"connecting\",\n            ws,\n            paused: \"no\"\n        };\n        this.resetServerInactivityTimeout();\n        ws.onopen = ()=>{\n            this.logger.logVerbose(\"begin ws.onopen\");\n            if (this.socket.state !== \"connecting\") {\n                throw new Error(\"onopen called with socket not in connecting state\");\n            }\n            this.socket = {\n                state: \"ready\",\n                ws,\n                paused: this.socket.paused === \"yes\" ? \"uninitialized\" : \"no\"\n            };\n            this.resetServerInactivityTimeout();\n            if (this.socket.paused === \"no\") {\n                this.onOpen({\n                    connectionCount: this.connectionCount,\n                    lastCloseReason: this.lastCloseReason\n                });\n            }\n            if (this.lastCloseReason !== \"InitialConnect\") {\n                this.logger.log(\"WebSocket reconnected\");\n            }\n            this.connectionCount += 1;\n            this.lastCloseReason = null;\n        };\n        ws.onerror = (error)=>{\n            const message = error.message;\n            this.logger.log(`WebSocket error: ${message}`);\n        };\n        ws.onmessage = (message)=>{\n            this.resetServerInactivityTimeout();\n            const serverMessage = (0,_protocol_js__WEBPACK_IMPORTED_MODULE_0__.parseServerMessage)(JSON.parse(message.data));\n            this._logVerbose(`received ws message with type ${serverMessage.type}`);\n            const response = this.onMessage(serverMessage);\n            if (response.hasSyncedPastLastReconnect) {\n                this.retries = 0;\n            }\n        };\n        ws.onclose = (event)=>{\n            this._logVerbose(\"begin ws.onclose\");\n            if (this.lastCloseReason === null) {\n                this.lastCloseReason = event.reason ?? \"OnCloseInvoked\";\n            }\n            if (event.code !== CLOSE_NORMAL && event.code !== CLOSE_GOING_AWAY && // This commonly gets fired on mobile apps when the app is backgrounded\n            event.code !== CLOSE_NO_STATUS && event.code !== CLOSE_NOT_FOUND) {\n                let msg = `WebSocket closed with code ${event.code}`;\n                if (event.reason) {\n                    msg += `: ${event.reason}`;\n                }\n                this.logger.log(msg);\n            }\n            this.scheduleReconnect();\n            return;\n        };\n    }\n    /**\n   * @returns The state of the {@link Socket}.\n   */ socketState() {\n        return this.socket.state;\n    }\n    /**\n   * @param message - A ClientMessage to send.\n   * @returns Whether the message (might have been) sent.\n   */ sendMessage(message) {\n        this._logVerbose(`sending message with type ${message.type}`);\n        if (this.socket.state === \"ready\" && this.socket.paused === \"no\") {\n            const encodedMessage = (0,_protocol_js__WEBPACK_IMPORTED_MODULE_0__.encodeClientMessage)(message);\n            const request = JSON.stringify(encodedMessage);\n            try {\n                this.socket.ws.send(request);\n            } catch (error) {\n                this.logger.log(`Failed to send message on WebSocket, reconnecting: ${error}`);\n                this.closeAndReconnect(\"FailedToSendMessage\");\n            }\n            return true;\n        }\n        return false;\n    }\n    resetServerInactivityTimeout() {\n        if (this.socket.state === \"terminated\") {\n            return;\n        }\n        if (this.reconnectDueToServerInactivityTimeout !== null) {\n            clearTimeout(this.reconnectDueToServerInactivityTimeout);\n            this.reconnectDueToServerInactivityTimeout = null;\n        }\n        this.reconnectDueToServerInactivityTimeout = setTimeout(()=>{\n            this.closeAndReconnect(\"InactiveServer\");\n        }, this.serverInactivityThreshold);\n    }\n    scheduleReconnect() {\n        this.socket = {\n            state: \"disconnected\"\n        };\n        const backoff = this.nextBackoff();\n        this.logger.log(`Attempting reconnect in ${backoff}ms`);\n        setTimeout(()=>this.connect(), backoff);\n    }\n    /**\n   * Close the WebSocket and schedule a reconnect.\n   *\n   * This should be used when we hit an error and would like to restart the session.\n   */ closeAndReconnect(closeReason) {\n        this._logVerbose(`begin closeAndReconnect with reason ${closeReason}`);\n        switch(this.socket.state){\n            case \"disconnected\":\n            case \"terminated\":\n            case \"stopped\":\n                return;\n            case \"connecting\":\n            case \"ready\":\n                {\n                    this.lastCloseReason = closeReason;\n                    void this.close();\n                    this.scheduleReconnect();\n                    return;\n                }\n            default:\n                {\n                    const _ = this.socket;\n                }\n        }\n    }\n    /**\n   * Close the WebSocket, being careful to clear the onclose handler to avoid re-entrant\n   * calls. Use this instead of directly calling `ws.close()`\n   *\n   * It is the callers responsibility to update the state after this method is called so that the\n   * closed socket is not accessible or used again after this method is called\n   */ close() {\n        switch(this.socket.state){\n            case \"disconnected\":\n            case \"terminated\":\n            case \"stopped\":\n                return Promise.resolve();\n            case \"connecting\":\n                {\n                    const ws = this.socket.ws;\n                    return new Promise((r)=>{\n                        ws.onclose = ()=>{\n                            this._logVerbose(\"Closed after connecting\");\n                            r();\n                        };\n                        ws.onopen = ()=>{\n                            this._logVerbose(\"Opened after connecting\");\n                            ws.close();\n                        };\n                    });\n                }\n            case \"ready\":\n                {\n                    this._logVerbose(\"ws.close called\");\n                    const ws = this.socket.ws;\n                    const result = new Promise((r)=>{\n                        ws.onclose = ()=>{\n                            r();\n                        };\n                    });\n                    ws.close();\n                    return result;\n                }\n            default:\n                {\n                    const _ = this.socket;\n                    return Promise.resolve();\n                }\n        }\n    }\n    /**\n   * Close the WebSocket and do not reconnect.\n   * @returns A Promise that resolves when the WebSocket `onClose` callback is called.\n   */ terminate() {\n        if (this.reconnectDueToServerInactivityTimeout) {\n            clearTimeout(this.reconnectDueToServerInactivityTimeout);\n        }\n        switch(this.socket.state){\n            case \"terminated\":\n            case \"stopped\":\n            case \"disconnected\":\n            case \"connecting\":\n            case \"ready\":\n                {\n                    const result = this.close();\n                    this.socket = {\n                        state: \"terminated\"\n                    };\n                    return result;\n                }\n            default:\n                {\n                    const _ = this.socket;\n                    throw new Error(`Invalid websocket state: ${this.socket.state}`);\n                }\n        }\n    }\n    stop() {\n        switch(this.socket.state){\n            case \"terminated\":\n                return Promise.resolve();\n            case \"connecting\":\n            case \"stopped\":\n            case \"disconnected\":\n            case \"ready\":\n                {\n                    const result = this.close();\n                    this.socket = {\n                        state: \"stopped\"\n                    };\n                    return result;\n                }\n            default:\n                {\n                    const _ = this.socket;\n                    return Promise.resolve();\n                }\n        }\n    }\n    /**\n   * Create a new WebSocket after a previous `stop()`, unless `terminate()` was\n   * called before.\n   */ restart() {\n        switch(this.socket.state){\n            case \"stopped\":\n                break;\n            case \"terminated\":\n                return;\n            case \"connecting\":\n            case \"ready\":\n            case \"disconnected\":\n                throw new Error(\"`restart()` is only valid after `stop()`\");\n            default:\n                {\n                    const _ = this.socket;\n                }\n        }\n        this.connect();\n    }\n    pause() {\n        switch(this.socket.state){\n            case \"disconnected\":\n            case \"stopped\":\n            case \"terminated\":\n                return;\n            case \"connecting\":\n            case \"ready\":\n                {\n                    this.socket = {\n                        ...this.socket,\n                        paused: \"yes\"\n                    };\n                    return;\n                }\n            default:\n                {\n                    const _ = this.socket;\n                    return;\n                }\n        }\n    }\n    /**\n   * Resume the state machine if previously paused.\n   */ resume() {\n        switch(this.socket.state){\n            case \"connecting\":\n                this.socket = {\n                    ...this.socket,\n                    paused: \"no\"\n                };\n                return;\n            case \"ready\":\n                if (this.socket.paused === \"uninitialized\") {\n                    this.socket = {\n                        ...this.socket,\n                        paused: \"no\"\n                    };\n                    this.onOpen({\n                        connectionCount: this.connectionCount,\n                        lastCloseReason: this.lastCloseReason\n                    });\n                } else if (this.socket.paused === \"yes\") {\n                    this.socket = {\n                        ...this.socket,\n                        paused: \"no\"\n                    };\n                    this.onResume();\n                }\n                return;\n            case \"terminated\":\n            case \"stopped\":\n            case \"disconnected\":\n                return;\n            default:\n                {\n                    const _ = this.socket;\n                }\n        }\n        this.connect();\n    }\n    _logVerbose(message) {\n        this.logger.logVerbose(message);\n    }\n    nextBackoff() {\n        const baseBackoff = this.initialBackoff * Math.pow(2, this.retries);\n        this.retries += 1;\n        const actualBackoff = Math.min(baseBackoff, this.maxBackoff);\n        const jitter = actualBackoff * (Math.random() - 0.5);\n        return actualBackoff + jitter;\n    }\n} //# sourceMappingURL=web_socket_manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/web_socket_manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/common/index.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/common/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSimpleObject: () => (/* binding */ isSimpleObject),\n/* harmony export */   parseArgs: () => (/* binding */ parseArgs),\n/* harmony export */   validateDeploymentUrl: () => (/* binding */ validateDeploymentUrl)\n/* harmony export */ });\n\nfunction parseArgs(args) {\n    if (args === void 0) {\n        return {};\n    }\n    if (!isSimpleObject(args)) {\n        throw new Error(`The arguments to a Convex function must be an object. Received: ${args}`);\n    }\n    return args;\n}\nfunction validateDeploymentUrl(deploymentUrl) {\n    if (typeof deploymentUrl === \"undefined\") {\n        throw new Error(`Client created with undefined deployment address. If you used an environment variable, check that it's set.`);\n    }\n    if (typeof deploymentUrl !== \"string\") {\n        throw new Error(`Invalid deployment address: found ${deploymentUrl}\".`);\n    }\n    if (!(deploymentUrl.startsWith(\"http:\") || deploymentUrl.startsWith(\"https:\"))) {\n        throw new Error(`Invalid deployment address: Must start with \"https://\" or \"http://\". Found \"${deploymentUrl}\".`);\n    }\n    try {\n        new URL(deploymentUrl);\n    } catch  {\n        throw new Error(`Invalid deployment address: \"${deploymentUrl}\" is not a valid URL. If you believe this URL is correct, use the \\`skipConvexDeploymentUrlCheck\\` option to bypass this.`);\n    }\n    if (deploymentUrl.endsWith(\".convex.site\")) {\n        throw new Error(`Invalid deployment address: \"${deploymentUrl}\" ends with .convex.site, which is used for HTTP Actions. Convex deployment URLs typically end with .convex.cloud? If you believe this URL is correct, use the \\`skipConvexDeploymentUrlCheck\\` option to bypass this.`);\n    }\n}\nfunction isSimpleObject(value) {\n    const isObject = typeof value === \"object\";\n    const prototype = Object.getPrototypeOf(value);\n    const isSimple = prototype === null || prototype === Object.prototype || // Objects generated from other contexts (e.g. across Node.js `vm` modules) will not satisfy the previous\n    // conditions but are still simple objects.\n    prototype?.constructor?.name === \"Object\";\n    return isObject && isSimple;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2NvbW1vbi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBYTtBQUNOLFNBQVNBLFVBQVVDLElBQUk7SUFDNUIsSUFBSUEsU0FBUyxLQUFLLEdBQUc7UUFDbkIsT0FBTyxDQUFDO0lBQ1Y7SUFDQSxJQUFJLENBQUNDLGVBQWVELE9BQU87UUFDekIsTUFBTSxJQUFJRSxNQUNSLENBQUMsZ0VBQWdFLEVBQUVGLEtBQUssQ0FBQztJQUU3RTtJQUNBLE9BQU9BO0FBQ1Q7QUFDTyxTQUFTRyxzQkFBc0JDLGFBQWE7SUFDakQsSUFBSSxPQUFPQSxrQkFBa0IsYUFBYTtRQUN4QyxNQUFNLElBQUlGLE1BQ1IsQ0FBQywyR0FBMkcsQ0FBQztJQUVqSDtJQUNBLElBQUksT0FBT0Usa0JBQWtCLFVBQVU7UUFDckMsTUFBTSxJQUFJRixNQUNSLENBQUMsa0NBQWtDLEVBQUVFLGNBQWMsRUFBRSxDQUFDO0lBRTFEO0lBQ0EsSUFBSSxDQUFFQSxDQUFBQSxjQUFjQyxVQUFVLENBQUMsWUFBWUQsY0FBY0MsVUFBVSxDQUFDLFNBQVEsR0FBSTtRQUM5RSxNQUFNLElBQUlILE1BQ1IsQ0FBQyw0RUFBNEUsRUFBRUUsY0FBYyxFQUFFLENBQUM7SUFFcEc7SUFDQSxJQUFJO1FBQ0YsSUFBSUUsSUFBSUY7SUFDVixFQUFFLE9BQU07UUFDTixNQUFNLElBQUlGLE1BQ1IsQ0FBQyw2QkFBNkIsRUFBRUUsY0FBYyx5SEFBeUgsQ0FBQztJQUU1SztJQUNBLElBQUlBLGNBQWNHLFFBQVEsQ0FBQyxpQkFBaUI7UUFDMUMsTUFBTSxJQUFJTCxNQUNSLENBQUMsNkJBQTZCLEVBQUVFLGNBQWMsc05BQXNOLENBQUM7SUFFelE7QUFDRjtBQUNPLFNBQVNILGVBQWVPLEtBQUs7SUFDbEMsTUFBTUMsV0FBVyxPQUFPRCxVQUFVO0lBQ2xDLE1BQU1FLFlBQVlDLE9BQU9DLGNBQWMsQ0FBQ0o7SUFDeEMsTUFBTUssV0FBV0gsY0FBYyxRQUFRQSxjQUFjQyxPQUFPRCxTQUFTLElBQUkseUdBQXlHO0lBQ2xMLDJDQUEyQztJQUMzQ0EsV0FBV0ksYUFBYUMsU0FBUztJQUNqQyxPQUFPTixZQUFZSTtBQUNyQixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYXNvcl9jbG9uZS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vY29tbW9uL2luZGV4LmpzP2IzMWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBcmdzKGFyZ3MpIHtcbiAgaWYgKGFyZ3MgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBpZiAoIWlzU2ltcGxlT2JqZWN0KGFyZ3MpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFRoZSBhcmd1bWVudHMgdG8gYSBDb252ZXggZnVuY3Rpb24gbXVzdCBiZSBhbiBvYmplY3QuIFJlY2VpdmVkOiAke2FyZ3N9YFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGFyZ3M7XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVEZXBsb3ltZW50VXJsKGRlcGxveW1lbnRVcmwpIHtcbiAgaWYgKHR5cGVvZiBkZXBsb3ltZW50VXJsID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYENsaWVudCBjcmVhdGVkIHdpdGggdW5kZWZpbmVkIGRlcGxveW1lbnQgYWRkcmVzcy4gSWYgeW91IHVzZWQgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUsIGNoZWNrIHRoYXQgaXQncyBzZXQuYFxuICAgICk7XG4gIH1cbiAgaWYgKHR5cGVvZiBkZXBsb3ltZW50VXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEludmFsaWQgZGVwbG95bWVudCBhZGRyZXNzOiBmb3VuZCAke2RlcGxveW1lbnRVcmx9XCIuYFxuICAgICk7XG4gIH1cbiAgaWYgKCEoZGVwbG95bWVudFVybC5zdGFydHNXaXRoKFwiaHR0cDpcIikgfHwgZGVwbG95bWVudFVybC5zdGFydHNXaXRoKFwiaHR0cHM6XCIpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBJbnZhbGlkIGRlcGxveW1lbnQgYWRkcmVzczogTXVzdCBzdGFydCB3aXRoIFwiaHR0cHM6Ly9cIiBvciBcImh0dHA6Ly9cIi4gRm91bmQgXCIke2RlcGxveW1lbnRVcmx9XCIuYFxuICAgICk7XG4gIH1cbiAgdHJ5IHtcbiAgICBuZXcgVVJMKGRlcGxveW1lbnRVcmwpO1xuICB9IGNhdGNoIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgSW52YWxpZCBkZXBsb3ltZW50IGFkZHJlc3M6IFwiJHtkZXBsb3ltZW50VXJsfVwiIGlzIG5vdCBhIHZhbGlkIFVSTC4gSWYgeW91IGJlbGlldmUgdGhpcyBVUkwgaXMgY29ycmVjdCwgdXNlIHRoZSBcXGBza2lwQ29udmV4RGVwbG95bWVudFVybENoZWNrXFxgIG9wdGlvbiB0byBieXBhc3MgdGhpcy5gXG4gICAgKTtcbiAgfVxuICBpZiAoZGVwbG95bWVudFVybC5lbmRzV2l0aChcIi5jb252ZXguc2l0ZVwiKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBJbnZhbGlkIGRlcGxveW1lbnQgYWRkcmVzczogXCIke2RlcGxveW1lbnRVcmx9XCIgZW5kcyB3aXRoIC5jb252ZXguc2l0ZSwgd2hpY2ggaXMgdXNlZCBmb3IgSFRUUCBBY3Rpb25zLiBDb252ZXggZGVwbG95bWVudCBVUkxzIHR5cGljYWxseSBlbmQgd2l0aCAuY29udmV4LmNsb3VkPyBJZiB5b3UgYmVsaWV2ZSB0aGlzIFVSTCBpcyBjb3JyZWN0LCB1c2UgdGhlIFxcYHNraXBDb252ZXhEZXBsb3ltZW50VXJsQ2hlY2tcXGAgb3B0aW9uIHRvIGJ5cGFzcyB0aGlzLmBcbiAgICApO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTaW1wbGVPYmplY3QodmFsdWUpIHtcbiAgY29uc3QgaXNPYmplY3QgPSB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG4gIGNvbnN0IHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSk7XG4gIGNvbnN0IGlzU2ltcGxlID0gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCAvLyBPYmplY3RzIGdlbmVyYXRlZCBmcm9tIG90aGVyIGNvbnRleHRzIChlLmcuIGFjcm9zcyBOb2RlLmpzIGB2bWAgbW9kdWxlcykgd2lsbCBub3Qgc2F0aXNmeSB0aGUgcHJldmlvdXNcbiAgLy8gY29uZGl0aW9ucyBidXQgYXJlIHN0aWxsIHNpbXBsZSBvYmplY3RzLlxuICBwcm90b3R5cGU/LmNvbnN0cnVjdG9yPy5uYW1lID09PSBcIk9iamVjdFwiO1xuICByZXR1cm4gaXNPYmplY3QgJiYgaXNTaW1wbGU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJwYXJzZUFyZ3MiLCJhcmdzIiwiaXNTaW1wbGVPYmplY3QiLCJFcnJvciIsInZhbGlkYXRlRGVwbG95bWVudFVybCIsImRlcGxveW1lbnRVcmwiLCJzdGFydHNXaXRoIiwiVVJMIiwiZW5kc1dpdGgiLCJ2YWx1ZSIsImlzT2JqZWN0IiwicHJvdG90eXBlIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJpc1NpbXBsZSIsImNvbnN0cnVjdG9yIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/common/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/index.js":
/*!***********************************************!*\
  !*** ./node_modules/convex/dist/esm/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n\nconst version = \"1.18.2\"; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBYTtBQUNOLE1BQU1BLFVBQVUsU0FBUyxDQUNoQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmFzb3JfY2xvbmUvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2luZGV4LmpzP2RhODQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IFwiMS4xOC4yXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/ConvexAuthState.js":
/*!***************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/ConvexAuthState.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexProviderWithAuth: () => (/* binding */ ConvexProviderWithAuth),\n/* harmony export */   useConvexAuth: () => (/* binding */ useConvexAuth)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client.js */ \"(ssr)/./node_modules/convex/dist/esm/react/client.js\");\n\n\n\nconst ConvexAuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0);\nfunction useConvexAuth() {\n    const authContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ConvexAuthContext);\n    if (authContext === void 0) {\n        throw new Error(\"Could not find `ConvexProviderWithAuth` (or `ConvexProviderWithClerk` or `ConvexProviderWithAuth0`) as an ancestor component. This component may be missing, or you might have two instances of the `convex/react` module loaded in your project.\");\n    }\n    return authContext;\n}\nfunction ConvexProviderWithAuth({ children, client, useAuth }) {\n    const { isLoading: authProviderLoading, isAuthenticated: authProviderAuthenticated, fetchAccessToken } = useAuth();\n    const [isConvexAuthenticated, setIsConvexAuthenticated] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    if (authProviderLoading && isConvexAuthenticated !== null) {\n        setIsConvexAuthenticated(null);\n    }\n    if (!authProviderLoading && !authProviderAuthenticated && isConvexAuthenticated !== false) {\n        setIsConvexAuthenticated(false);\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConvexAuthContext.Provider, {\n        value: {\n            isLoading: isConvexAuthenticated === null,\n            isAuthenticated: authProviderAuthenticated && (isConvexAuthenticated ?? false)\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConvexAuthStateFirstEffect, {\n        authProviderAuthenticated,\n        fetchAccessToken,\n        authProviderLoading,\n        client,\n        setIsConvexAuthenticated\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_client_js__WEBPACK_IMPORTED_MODULE_1__.ConvexProvider, {\n        client\n    }, children), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConvexAuthStateLastEffect, {\n        authProviderAuthenticated,\n        fetchAccessToken,\n        authProviderLoading,\n        client,\n        setIsConvexAuthenticated\n    }));\n}\nfunction ConvexAuthStateFirstEffect({ authProviderAuthenticated, fetchAccessToken, authProviderLoading, client, setIsConvexAuthenticated }) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let isThisEffectRelevant = true;\n        if (authProviderAuthenticated) {\n            client.setAuth(fetchAccessToken, (backendReportsIsAuthenticated)=>{\n                if (isThisEffectRelevant) {\n                    setIsConvexAuthenticated(()=>backendReportsIsAuthenticated);\n                }\n            });\n            return ()=>{\n                isThisEffectRelevant = false;\n                setIsConvexAuthenticated((isConvexAuthenticated)=>isConvexAuthenticated ? false : null);\n            };\n        }\n    }, [\n        authProviderAuthenticated,\n        fetchAccessToken,\n        authProviderLoading,\n        client,\n        setIsConvexAuthenticated\n    ]);\n    return null;\n}\nfunction ConvexAuthStateLastEffect({ authProviderAuthenticated, fetchAccessToken, authProviderLoading, client, setIsConvexAuthenticated }) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (authProviderAuthenticated) {\n            return ()=>{\n                client.clearAuth();\n                setIsConvexAuthenticated(()=>null);\n            };\n        }\n    }, [\n        authProviderAuthenticated,\n        fetchAccessToken,\n        authProviderLoading,\n        client,\n        setIsConvexAuthenticated\n    ]);\n    return null;\n} //# sourceMappingURL=ConvexAuthState.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3JlYWN0L0NvbnZleEF1dGhTdGF0ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWE7QUFNRTtBQUM4QjtBQUM3QyxNQUFNTSxrQ0FBb0JMLG9EQUFhQSxDQUFDLEtBQUs7QUFDdEMsU0FBU007SUFDZCxNQUFNQyxjQUFjTixpREFBVUEsQ0FBQ0k7SUFDL0IsSUFBSUUsZ0JBQWdCLEtBQUssR0FBRztRQUMxQixNQUFNLElBQUlDLE1BQ1I7SUFFSjtJQUNBLE9BQU9EO0FBQ1Q7QUFDTyxTQUFTRSx1QkFBdUIsRUFDckNDLFFBQVEsRUFDUkMsTUFBTSxFQUNOQyxPQUFPLEVBQ1I7SUFDQyxNQUFNLEVBQ0pDLFdBQVdDLG1CQUFtQixFQUM5QkMsaUJBQWlCQyx5QkFBeUIsRUFDMUNDLGdCQUFnQixFQUNqQixHQUFHTDtJQUNKLE1BQU0sQ0FBQ00sdUJBQXVCQyx5QkFBeUIsR0FBR2hCLCtDQUFRQSxDQUFDO0lBQ25FLElBQUlXLHVCQUF1QkksMEJBQTBCLE1BQU07UUFDekRDLHlCQUF5QjtJQUMzQjtJQUNBLElBQUksQ0FBQ0wsdUJBQXVCLENBQUNFLDZCQUE2QkUsMEJBQTBCLE9BQU87UUFDekZDLHlCQUF5QjtJQUMzQjtJQUNBLE9BQU8sYUFBYSxpQkFBR3BCLGdEQUFtQixDQUN4Q00sa0JBQWtCZ0IsUUFBUSxFQUMxQjtRQUNFQyxPQUFPO1lBQ0xULFdBQVdLLDBCQUEwQjtZQUNyQ0gsaUJBQWlCQyw2QkFBOEJFLENBQUFBLHlCQUF5QixLQUFJO1FBQzlFO0lBQ0YsR0FDQSxhQUFhLGlCQUFHbkIsZ0RBQW1CLENBQ2pDd0IsNEJBQ0E7UUFDRVA7UUFDQUM7UUFDQUg7UUFDQUg7UUFDQVE7SUFDRixJQUVGLGFBQWEsaUJBQUdwQixnREFBbUIsQ0FBQ0ssc0RBQWNBLEVBQUU7UUFBRU87SUFBTyxHQUFHRCxXQUNoRSxhQUFhLGlCQUFHWCxnREFBbUIsQ0FDakN5QiwyQkFDQTtRQUNFUjtRQUNBQztRQUNBSDtRQUNBSDtRQUNBUTtJQUNGO0FBR047QUFDQSxTQUFTSSwyQkFBMkIsRUFDbENQLHlCQUF5QixFQUN6QkMsZ0JBQWdCLEVBQ2hCSCxtQkFBbUIsRUFDbkJILE1BQU0sRUFDTlEsd0JBQXdCLEVBQ3pCO0lBQ0NqQixnREFBU0EsQ0FBQztRQUNSLElBQUl1Qix1QkFBdUI7UUFDM0IsSUFBSVQsMkJBQTJCO1lBQzdCTCxPQUFPZSxPQUFPLENBQUNULGtCQUFrQixDQUFDVTtnQkFDaEMsSUFBSUYsc0JBQXNCO29CQUN4Qk4seUJBQXlCLElBQU1RO2dCQUNqQztZQUNGO1lBQ0EsT0FBTztnQkFDTEYsdUJBQXVCO2dCQUN2Qk4seUJBQ0UsQ0FBQ0Qsd0JBQTBCQSx3QkFBd0IsUUFBUTtZQUUvRDtRQUNGO0lBQ0YsR0FBRztRQUNERjtRQUNBQztRQUNBSDtRQUNBSDtRQUNBUTtLQUNEO0lBQ0QsT0FBTztBQUNUO0FBQ0EsU0FBU0ssMEJBQTBCLEVBQ2pDUix5QkFBeUIsRUFDekJDLGdCQUFnQixFQUNoQkgsbUJBQW1CLEVBQ25CSCxNQUFNLEVBQ05RLHdCQUF3QixFQUN6QjtJQUNDakIsZ0RBQVNBLENBQUM7UUFDUixJQUFJYywyQkFBMkI7WUFDN0IsT0FBTztnQkFDTEwsT0FBT2lCLFNBQVM7Z0JBQ2hCVCx5QkFBeUIsSUFBTTtZQUNqQztRQUNGO0lBQ0YsR0FBRztRQUNESDtRQUNBQztRQUNBSDtRQUNBSDtRQUNBUTtLQUNEO0lBQ0QsT0FBTztBQUNULEVBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhc29yX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9yZWFjdC9Db252ZXhBdXRoU3RhdGUuanM/Y2FhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCBSZWFjdCwge1xuICBjcmVhdGVDb250ZXh0LFxuICB1c2VDb250ZXh0LFxuICB1c2VFZmZlY3QsXG4gIHVzZVN0YXRlXG59IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQ29udmV4UHJvdmlkZXIgfSBmcm9tIFwiLi9jbGllbnQuanNcIjtcbmNvbnN0IENvbnZleEF1dGhDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh2b2lkIDApO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUNvbnZleEF1dGgoKSB7XG4gIGNvbnN0IGF1dGhDb250ZXh0ID0gdXNlQ29udGV4dChDb252ZXhBdXRoQ29udGV4dCk7XG4gIGlmIChhdXRoQ29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJDb3VsZCBub3QgZmluZCBgQ29udmV4UHJvdmlkZXJXaXRoQXV0aGAgKG9yIGBDb252ZXhQcm92aWRlcldpdGhDbGVya2Agb3IgYENvbnZleFByb3ZpZGVyV2l0aEF1dGgwYCkgYXMgYW4gYW5jZXN0b3IgY29tcG9uZW50LiBUaGlzIGNvbXBvbmVudCBtYXkgYmUgbWlzc2luZywgb3IgeW91IG1pZ2h0IGhhdmUgdHdvIGluc3RhbmNlcyBvZiB0aGUgYGNvbnZleC9yZWFjdGAgbW9kdWxlIGxvYWRlZCBpbiB5b3VyIHByb2plY3QuXCJcbiAgICApO1xuICB9XG4gIHJldHVybiBhdXRoQ29udGV4dDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBDb252ZXhQcm92aWRlcldpdGhBdXRoKHtcbiAgY2hpbGRyZW4sXG4gIGNsaWVudCxcbiAgdXNlQXV0aFxufSkge1xuICBjb25zdCB7XG4gICAgaXNMb2FkaW5nOiBhdXRoUHJvdmlkZXJMb2FkaW5nLFxuICAgIGlzQXV0aGVudGljYXRlZDogYXV0aFByb3ZpZGVyQXV0aGVudGljYXRlZCxcbiAgICBmZXRjaEFjY2Vzc1Rva2VuXG4gIH0gPSB1c2VBdXRoKCk7XG4gIGNvbnN0IFtpc0NvbnZleEF1dGhlbnRpY2F0ZWQsIHNldElzQ29udmV4QXV0aGVudGljYXRlZF0gPSB1c2VTdGF0ZShudWxsKTtcbiAgaWYgKGF1dGhQcm92aWRlckxvYWRpbmcgJiYgaXNDb252ZXhBdXRoZW50aWNhdGVkICE9PSBudWxsKSB7XG4gICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkKG51bGwpO1xuICB9XG4gIGlmICghYXV0aFByb3ZpZGVyTG9hZGluZyAmJiAhYXV0aFByb3ZpZGVyQXV0aGVudGljYXRlZCAmJiBpc0NvbnZleEF1dGhlbnRpY2F0ZWQgIT09IGZhbHNlKSB7XG4gICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkKGZhbHNlKTtcbiAgfVxuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgQ29udmV4QXV0aENvbnRleHQuUHJvdmlkZXIsXG4gICAge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaXNMb2FkaW5nOiBpc0NvbnZleEF1dGhlbnRpY2F0ZWQgPT09IG51bGwsXG4gICAgICAgIGlzQXV0aGVudGljYXRlZDogYXV0aFByb3ZpZGVyQXV0aGVudGljYXRlZCAmJiAoaXNDb252ZXhBdXRoZW50aWNhdGVkID8/IGZhbHNlKVxuICAgICAgfVxuICAgIH0sXG4gICAgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBDb252ZXhBdXRoU3RhdGVGaXJzdEVmZmVjdCxcbiAgICAgIHtcbiAgICAgICAgYXV0aFByb3ZpZGVyQXV0aGVudGljYXRlZCxcbiAgICAgICAgZmV0Y2hBY2Nlc3NUb2tlbixcbiAgICAgICAgYXV0aFByb3ZpZGVyTG9hZGluZyxcbiAgICAgICAgY2xpZW50LFxuICAgICAgICBzZXRJc0NvbnZleEF1dGhlbnRpY2F0ZWRcbiAgICAgIH1cbiAgICApLFxuICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnZleFByb3ZpZGVyLCB7IGNsaWVudCB9LCBjaGlsZHJlbiksXG4gICAgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBDb252ZXhBdXRoU3RhdGVMYXN0RWZmZWN0LFxuICAgICAge1xuICAgICAgICBhdXRoUHJvdmlkZXJBdXRoZW50aWNhdGVkLFxuICAgICAgICBmZXRjaEFjY2Vzc1Rva2VuLFxuICAgICAgICBhdXRoUHJvdmlkZXJMb2FkaW5nLFxuICAgICAgICBjbGllbnQsXG4gICAgICAgIHNldElzQ29udmV4QXV0aGVudGljYXRlZFxuICAgICAgfVxuICAgIClcbiAgKTtcbn1cbmZ1bmN0aW9uIENvbnZleEF1dGhTdGF0ZUZpcnN0RWZmZWN0KHtcbiAgYXV0aFByb3ZpZGVyQXV0aGVudGljYXRlZCxcbiAgZmV0Y2hBY2Nlc3NUb2tlbixcbiAgYXV0aFByb3ZpZGVyTG9hZGluZyxcbiAgY2xpZW50LFxuICBzZXRJc0NvbnZleEF1dGhlbnRpY2F0ZWRcbn0pIHtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgaXNUaGlzRWZmZWN0UmVsZXZhbnQgPSB0cnVlO1xuICAgIGlmIChhdXRoUHJvdmlkZXJBdXRoZW50aWNhdGVkKSB7XG4gICAgICBjbGllbnQuc2V0QXV0aChmZXRjaEFjY2Vzc1Rva2VuLCAoYmFja2VuZFJlcG9ydHNJc0F1dGhlbnRpY2F0ZWQpID0+IHtcbiAgICAgICAgaWYgKGlzVGhpc0VmZmVjdFJlbGV2YW50KSB7XG4gICAgICAgICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkKCgpID0+IGJhY2tlbmRSZXBvcnRzSXNBdXRoZW50aWNhdGVkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpc1RoaXNFZmZlY3RSZWxldmFudCA9IGZhbHNlO1xuICAgICAgICBzZXRJc0NvbnZleEF1dGhlbnRpY2F0ZWQoXG4gICAgICAgICAgKGlzQ29udmV4QXV0aGVudGljYXRlZCkgPT4gaXNDb252ZXhBdXRoZW50aWNhdGVkID8gZmFsc2UgOiBudWxsXG4gICAgICAgICk7XG4gICAgICB9O1xuICAgIH1cbiAgfSwgW1xuICAgIGF1dGhQcm92aWRlckF1dGhlbnRpY2F0ZWQsXG4gICAgZmV0Y2hBY2Nlc3NUb2tlbixcbiAgICBhdXRoUHJvdmlkZXJMb2FkaW5nLFxuICAgIGNsaWVudCxcbiAgICBzZXRJc0NvbnZleEF1dGhlbnRpY2F0ZWRcbiAgXSk7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gQ29udmV4QXV0aFN0YXRlTGFzdEVmZmVjdCh7XG4gIGF1dGhQcm92aWRlckF1dGhlbnRpY2F0ZWQsXG4gIGZldGNoQWNjZXNzVG9rZW4sXG4gIGF1dGhQcm92aWRlckxvYWRpbmcsXG4gIGNsaWVudCxcbiAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkXG59KSB7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGF1dGhQcm92aWRlckF1dGhlbnRpY2F0ZWQpIHtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNsaWVudC5jbGVhckF1dGgoKTtcbiAgICAgICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkKCgpID0+IG51bGwpO1xuICAgICAgfTtcbiAgICB9XG4gIH0sIFtcbiAgICBhdXRoUHJvdmlkZXJBdXRoZW50aWNhdGVkLFxuICAgIGZldGNoQWNjZXNzVG9rZW4sXG4gICAgYXV0aFByb3ZpZGVyTG9hZGluZyxcbiAgICBjbGllbnQsXG4gICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkXG4gIF0pO1xuICByZXR1cm4gbnVsbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnZleEF1dGhTdGF0ZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlU3RhdGUiLCJDb252ZXhQcm92aWRlciIsIkNvbnZleEF1dGhDb250ZXh0IiwidXNlQ29udmV4QXV0aCIsImF1dGhDb250ZXh0IiwiRXJyb3IiLCJDb252ZXhQcm92aWRlcldpdGhBdXRoIiwiY2hpbGRyZW4iLCJjbGllbnQiLCJ1c2VBdXRoIiwiaXNMb2FkaW5nIiwiYXV0aFByb3ZpZGVyTG9hZGluZyIsImlzQXV0aGVudGljYXRlZCIsImF1dGhQcm92aWRlckF1dGhlbnRpY2F0ZWQiLCJmZXRjaEFjY2Vzc1Rva2VuIiwiaXNDb252ZXhBdXRoZW50aWNhdGVkIiwic2V0SXNDb252ZXhBdXRoZW50aWNhdGVkIiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwidmFsdWUiLCJDb252ZXhBdXRoU3RhdGVGaXJzdEVmZmVjdCIsIkNvbnZleEF1dGhTdGF0ZUxhc3RFZmZlY3QiLCJpc1RoaXNFZmZlY3RSZWxldmFudCIsInNldEF1dGgiLCJiYWNrZW5kUmVwb3J0c0lzQXV0aGVudGljYXRlZCIsImNsZWFyQXV0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/ConvexAuthState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/auth_helpers.js":
/*!************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/auth_helpers.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthLoading: () => (/* binding */ AuthLoading),\n/* harmony export */   Authenticated: () => (/* binding */ Authenticated),\n/* harmony export */   Unauthenticated: () => (/* binding */ Unauthenticated)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConvexAuthState.js */ \"(ssr)/./node_modules/convex/dist/esm/react/ConvexAuthState.js\");\n\n\n\nfunction Authenticated({ children }) {\n    const { isLoading, isAuthenticated } = (0,_ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth)();\n    if (isLoading || !isAuthenticated) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n}\nfunction Unauthenticated({ children }) {\n    const { isLoading, isAuthenticated } = (0,_ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth)();\n    if (isLoading || isAuthenticated) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n}\nfunction AuthLoading({ children }) {\n    const { isLoading } = (0,_ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth)();\n    if (!isLoading) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n} //# sourceMappingURL=auth_helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3JlYWN0L2F1dGhfaGVscGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFhO0FBQ2E7QUFDMkI7QUFDOUMsU0FBU0UsY0FBYyxFQUFFQyxRQUFRLEVBQUU7SUFDeEMsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLGVBQWUsRUFBRSxHQUFHSixrRUFBYUE7SUFDcEQsSUFBSUcsYUFBYSxDQUFDQyxpQkFBaUI7UUFDakMsT0FBTztJQUNUO0lBQ0EsT0FBTyxhQUFhLGlCQUFHTCxnREFBbUIsQ0FBQ0EsMkNBQWMsRUFBRSxNQUFNRztBQUNuRTtBQUNPLFNBQVNLLGdCQUFnQixFQUFFTCxRQUFRLEVBQUU7SUFDMUMsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLGVBQWUsRUFBRSxHQUFHSixrRUFBYUE7SUFDcEQsSUFBSUcsYUFBYUMsaUJBQWlCO1FBQ2hDLE9BQU87SUFDVDtJQUNBLE9BQU8sYUFBYSxpQkFBR0wsZ0RBQW1CLENBQUNBLDJDQUFjLEVBQUUsTUFBTUc7QUFDbkU7QUFDTyxTQUFTTSxZQUFZLEVBQUVOLFFBQVEsRUFBRTtJQUN0QyxNQUFNLEVBQUVDLFNBQVMsRUFBRSxHQUFHSCxrRUFBYUE7SUFDbkMsSUFBSSxDQUFDRyxXQUFXO1FBQ2QsT0FBTztJQUNUO0lBQ0EsT0FBTyxhQUFhLGlCQUFHSixnREFBbUIsQ0FBQ0EsMkNBQWMsRUFBRSxNQUFNRztBQUNuRSxFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYXNvcl9jbG9uZS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvYXV0aF9oZWxwZXJzLmpzP2EyZGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VDb252ZXhBdXRoIH0gZnJvbSBcIi4vQ29udmV4QXV0aFN0YXRlLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gQXV0aGVudGljYXRlZCh7IGNoaWxkcmVuIH0pIHtcbiAgY29uc3QgeyBpc0xvYWRpbmcsIGlzQXV0aGVudGljYXRlZCB9ID0gdXNlQ29udmV4QXV0aCgpO1xuICBpZiAoaXNMb2FkaW5nIHx8ICFpc0F1dGhlbnRpY2F0ZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBVbmF1dGhlbnRpY2F0ZWQoeyBjaGlsZHJlbiB9KSB7XG4gIGNvbnN0IHsgaXNMb2FkaW5nLCBpc0F1dGhlbnRpY2F0ZWQgfSA9IHVzZUNvbnZleEF1dGgoKTtcbiAgaWYgKGlzTG9hZGluZyB8fCBpc0F1dGhlbnRpY2F0ZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBBdXRoTG9hZGluZyh7IGNoaWxkcmVuIH0pIHtcbiAgY29uc3QgeyBpc0xvYWRpbmcgfSA9IHVzZUNvbnZleEF1dGgoKTtcbiAgaWYgKCFpc0xvYWRpbmcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGhfaGVscGVycy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUNvbnZleEF1dGgiLCJBdXRoZW50aWNhdGVkIiwiY2hpbGRyZW4iLCJpc0xvYWRpbmciLCJpc0F1dGhlbnRpY2F0ZWQiLCJjcmVhdGVFbGVtZW50IiwiRnJhZ21lbnQiLCJVbmF1dGhlbnRpY2F0ZWQiLCJBdXRoTG9hZGluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/auth_helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/client.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/client.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexProvider: () => (/* binding */ ConvexProvider),\n/* harmony export */   ConvexReactClient: () => (/* binding */ ConvexReactClient),\n/* harmony export */   createMutation: () => (/* binding */ createMutation),\n/* harmony export */   useAction: () => (/* binding */ useAction),\n/* harmony export */   useConvex: () => (/* binding */ useConvex),\n/* harmony export */   useMutation: () => (/* binding */ useMutation),\n/* harmony export */   useQuery: () => (/* binding */ useQuery)\n/* harmony export */ });\n/* harmony import */ var _browser_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../browser/index.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var _use_queries_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./use_queries.js */ \"(ssr)/./node_modules/convex/dist/esm/react/use_queries.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../server/api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _browser_logging_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../browser/logging.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/logging.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\n\n\n\nif (typeof react__WEBPACK_IMPORTED_MODULE_1__ === \"undefined\") {\n    throw new Error(\"Required dependency 'react' not found\");\n}\nif (typeof react_dom__WEBPACK_IMPORTED_MODULE_3__ === \"undefined\") {\n    throw new Error(\"Required dependency 'react-dom' not found\");\n}\nfunction createMutation(mutationReference, client, update) {\n    function mutation(args) {\n        assertNotAccidentalArgument(args);\n        return client.mutation(mutationReference, args, {\n            optimisticUpdate: update\n        });\n    }\n    mutation.withOptimisticUpdate = function withOptimisticUpdate(optimisticUpdate) {\n        if (update !== void 0) {\n            throw new Error(`Already specified optimistic update for mutation ${(0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(mutationReference)}`);\n        }\n        return createMutation(mutationReference, client, optimisticUpdate);\n    };\n    return mutation;\n}\nfunction createAction(actionReference, client) {\n    return function(args) {\n        return client.action(actionReference, args);\n    };\n}\nclass ConvexReactClient {\n    /**\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   * @param options - See {@link ConvexReactClientOptions} for a full description.\n   */ constructor(address, options){\n        __publicField(this, \"address\");\n        __publicField(this, \"cachedSync\");\n        __publicField(this, \"listeners\");\n        __publicField(this, \"options\");\n        __publicField(this, \"closed\", false);\n        __publicField(this, \"_logger\");\n        __publicField(this, \"adminAuth\");\n        __publicField(this, \"fakeUserIdentity\");\n        if (address === void 0) {\n            throw new Error(\"No address provided to ConvexReactClient.\\nIf trying to deploy to production, make sure to follow all the instructions found at https://docs.convex.dev/production/hosting/\\nIf running locally, make sure to run `convex dev` and ensure the .env.local file is populated.\");\n        }\n        if (typeof address !== \"string\") {\n            throw new Error(`ConvexReactClient requires a URL like 'https://happy-otter-123.convex.cloud', received something of type ${typeof address} instead.`);\n        }\n        if (!address.includes(\"://\")) {\n            throw new Error(\"Provided address was not an absolute URL.\");\n        }\n        this.address = address;\n        this.listeners = /* @__PURE__ */ new Map();\n        this._logger = options?.logger ?? (0,_browser_logging_js__WEBPACK_IMPORTED_MODULE_7__.instantiateDefaultLogger)({\n            verbose: options?.verbose ?? false\n        });\n        this.options = {\n            ...options,\n            logger: this._logger\n        };\n    }\n    /**\n   * Lazily instantiate the `BaseConvexClient` so we don't create the WebSocket\n   * when server-side rendering.\n   *\n   * @internal\n   */ get sync() {\n        if (this.closed) {\n            throw new Error(\"ConvexReactClient has already been closed.\");\n        }\n        if (this.cachedSync) {\n            return this.cachedSync;\n        }\n        this.cachedSync = new _browser_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseConvexClient(this.address, (updatedQueries)=>this.transition(updatedQueries), this.options);\n        if (this.adminAuth) {\n            this.cachedSync.setAdminAuth(this.adminAuth, this.fakeUserIdentity);\n        }\n        return this.cachedSync;\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   * `fetchToken` will be called automatically again if a token expires.\n   * `fetchToken` should return `null` if the token cannot be retrieved, for example\n   * when the user's rights were permanently revoked.\n   * @param fetchToken - an async function returning the JWT-encoded OpenID Connect Identity Token\n   * @param onChange - a callback that will be called when the authentication status changes\n   */ setAuth(fetchToken, onChange) {\n        if (typeof fetchToken === \"string\") {\n            throw new Error(\"Passing a string to ConvexReactClient.setAuth is no longer supported, please upgrade to passing in an async function to handle reauthentication.\");\n        }\n        this.sync.setAuth(fetchToken, onChange ?? (()=>{}));\n    }\n    /**\n   * Clear the current authentication token if set.\n   */ clearAuth() {\n        this.sync.clearAuth();\n    }\n    /**\n   * @internal\n   */ setAdminAuth(token, identity) {\n        this.adminAuth = token;\n        this.fakeUserIdentity = identity;\n        if (this.closed) {\n            throw new Error(\"ConvexReactClient has already been closed.\");\n        }\n        if (this.cachedSync) {\n            this.sync.setAdminAuth(token, identity);\n        }\n    }\n    /**\n   * Construct a new {@link Watch} on a Convex query function.\n   *\n   * **Most application code should not call this method directly. Instead use\n   * the {@link useQuery} hook.**\n   *\n   * @param query - A {@link server.FunctionReference} for the public query to run.\n   * @param args - An arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @param options - A {@link WatchQueryOptions} options object for this query.\n   *\n   * @returns The {@link Watch} object.\n   */ watchQuery(query, ...argsAndOptions) {\n        const [args, options] = argsAndOptions;\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(query);\n        return {\n            onUpdate: (callback)=>{\n                const { queryToken, unsubscribe } = this.sync.subscribe(name, args, options);\n                const currentListeners = this.listeners.get(queryToken);\n                if (currentListeners !== void 0) {\n                    currentListeners.add(callback);\n                } else {\n                    this.listeners.set(queryToken, /* @__PURE__ */ new Set([\n                        callback\n                    ]));\n                }\n                return ()=>{\n                    if (this.closed) {\n                        return;\n                    }\n                    const currentListeners2 = this.listeners.get(queryToken);\n                    currentListeners2.delete(callback);\n                    if (currentListeners2.size === 0) {\n                        this.listeners.delete(queryToken);\n                    }\n                    unsubscribe();\n                };\n            },\n            localQueryResult: ()=>{\n                if (this.cachedSync) {\n                    return this.cachedSync.localQueryResult(name, args);\n                }\n                return void 0;\n            },\n            localQueryLogs: ()=>{\n                if (this.cachedSync) {\n                    return this.cachedSync.localQueryLogs(name, args);\n                }\n                return void 0;\n            },\n            journal: ()=>{\n                if (this.cachedSync) {\n                    return this.cachedSync.queryJournal(name, args);\n                }\n                return void 0;\n            }\n        };\n    }\n    /**\n   * Execute a mutation function.\n   *\n   * @param mutation - A {@link server.FunctionReference} for the public mutation\n   * to run.\n   * @param args - An arguments object for the mutation. If this is omitted,\n   * the arguments will be `{}`.\n   * @param options - A {@link MutationOptions} options object for the mutation.\n   * @returns A promise of the mutation's result.\n   */ mutation(mutation, ...argsAndOptions) {\n        const [args, options] = argsAndOptions;\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(mutation);\n        return this.sync.mutation(name, args, options);\n    }\n    /**\n   * Execute an action function.\n   *\n   * @param action - A {@link server.FunctionReference} for the public action\n   * to run.\n   * @param args - An arguments object for the action. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the action's result.\n   */ action(action, ...args) {\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(action);\n        return this.sync.action(name, ...args);\n    }\n    /**\n   * Fetch a query result once.\n   *\n   * **Most application code should subscribe to queries instead, using\n   * the {@link useQuery} hook.**\n   *\n   * @param query - A {@link server.FunctionReference} for the public query\n   * to run.\n   * @param args - An arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the query's result.\n   */ query(query, ...args) {\n        const watch = this.watchQuery(query, ...args);\n        const existingResult = watch.localQueryResult();\n        if (existingResult !== void 0) {\n            return Promise.resolve(existingResult);\n        }\n        return new Promise((resolve, reject)=>{\n            const unsubscribe = watch.onUpdate(()=>{\n                unsubscribe();\n                try {\n                    resolve(watch.localQueryResult());\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n   * Get the current {@link ConnectionState} between the client and the Convex\n   * backend.\n   *\n   * @returns The {@link ConnectionState} with the Convex backend.\n   */ connectionState() {\n        return this.sync.connectionState();\n    }\n    /**\n   * Get the logger for this client.\n   *\n   * @returns The {@link Logger} for this client.\n   */ get logger() {\n        return this._logger;\n    }\n    /**\n   * Close any network handles associated with this client and stop all subscriptions.\n   *\n   * Call this method when you're done with a {@link ConvexReactClient} to\n   * dispose of its sockets and resources.\n   *\n   * @returns A `Promise` fulfilled when the connection has been completely closed.\n   */ async close() {\n        this.closed = true;\n        this.listeners = /* @__PURE__ */ new Map();\n        if (this.cachedSync) {\n            const sync = this.cachedSync;\n            this.cachedSync = void 0;\n            await sync.close();\n        }\n    }\n    transition(updatedQueries) {\n        react_dom__WEBPACK_IMPORTED_MODULE_3__.unstable_batchedUpdates(()=>{\n            for (const queryToken of updatedQueries){\n                const callbacks = this.listeners.get(queryToken);\n                if (callbacks) {\n                    for (const callback of callbacks){\n                        callback();\n                    }\n                }\n            }\n        });\n    }\n}\nconst ConvexContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nfunction useConvex() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ConvexContext);\n}\nconst ConvexProvider = ({ client, children })=>{\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ConvexContext.Provider, {\n        value: client\n    }, children);\n};\nfunction useQuery(query, ...args) {\n    const skip = args[0] === \"skip\";\n    const argsObject = args[0] === \"skip\" ? {} : (0,_common_index_js__WEBPACK_IMPORTED_MODULE_5__.parseArgs)(args[0]);\n    const queryReference = typeof query === \"string\" ? (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.makeFunctionReference)(query) : query;\n    const queryName = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(queryReference);\n    const queries = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>skip ? {} : {\n            query: {\n                query: queryReference,\n                args: argsObject\n            }\n        }, // Stringify args so args that are semantically the same don't trigger a\n    // rerender. Saves developers from adding `useMemo` on every args usage.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_2__.convexToJson)(argsObject)),\n        queryName,\n        skip\n    ]);\n    const results = (0,_use_queries_js__WEBPACK_IMPORTED_MODULE_4__.useQueries)(queries);\n    const result = results[\"query\"];\n    if (result instanceof Error) {\n        throw result;\n    }\n    return result;\n}\nfunction useMutation(mutation) {\n    const mutationReference = typeof mutation === \"string\" ? (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.makeFunctionReference)(mutation) : mutation;\n    const convex = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ConvexContext);\n    if (convex === void 0) {\n        throw new Error(\"Could not find Convex client! `useMutation` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\");\n    }\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>createMutation(mutationReference, convex), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        convex,\n        (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(mutationReference)\n    ]);\n}\nfunction useAction(action) {\n    const convex = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ConvexContext);\n    const actionReference = typeof action === \"string\" ? (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.makeFunctionReference)(action) : action;\n    if (convex === void 0) {\n        throw new Error(\"Could not find Convex client! `useAction` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\");\n    }\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>createAction(actionReference, convex), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        convex,\n        (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(actionReference)\n    ]);\n}\nfunction assertNotAccidentalArgument(value) {\n    if (typeof value === \"object\" && value !== null && \"bubbles\" in value && \"persist\" in value && \"isDefaultPrevented\" in value) {\n        throw new Error(`Convex function called with SyntheticEvent object. Did you use a Convex function as an event handler directly? Event handlers like onClick receive an event object as their first argument. These SyntheticEvent objects are not valid Convex values. Try wrapping the function like \\`const handler = () => myMutation();\\` and using \\`handler\\` in the event handler.`);\n    }\n} //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/hydration.js":
/*!*********************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/hydration.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   usePreloadedQuery: () => (/* binding */ usePreloadedQuery)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _react_client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../react/client.js */ \"(ssr)/./node_modules/convex/dist/esm/react/client.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../server/api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n\n\n\n\n\nfunction usePreloadedQuery(preloadedQuery) {\n    const args = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(preloadedQuery._argsJSON), [\n        preloadedQuery._argsJSON\n    ]);\n    const preloadedResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(preloadedQuery._valueJSON), [\n        preloadedQuery._valueJSON\n    ]);\n    const result = (0,_react_client_js__WEBPACK_IMPORTED_MODULE_1__.useQuery)((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.makeFunctionReference)(preloadedQuery._name), args);\n    return result === void 0 ? preloadedResult : result;\n} //# sourceMappingURL=hydration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3JlYWN0L2h5ZHJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFhO0FBQ21CO0FBQ2M7QUFDVztBQUNQO0FBQzNDLFNBQVNJLGtCQUFrQkMsY0FBYztJQUM5QyxNQUFNQyxPQUFPTiw4Q0FBT0EsQ0FDbEIsSUFBTUcsOERBQVlBLENBQUNFLGVBQWVFLFNBQVMsR0FDM0M7UUFBQ0YsZUFBZUUsU0FBUztLQUFDO0lBRTVCLE1BQU1DLGtCQUFrQlIsOENBQU9BLENBQzdCLElBQU1HLDhEQUFZQSxDQUFDRSxlQUFlSSxVQUFVLEdBQzVDO1FBQUNKLGVBQWVJLFVBQVU7S0FBQztJQUU3QixNQUFNQyxTQUFTVCwwREFBUUEsQ0FDckJDLHFFQUFxQkEsQ0FBQ0csZUFBZU0sS0FBSyxHQUMxQ0w7SUFFRixPQUFPSSxXQUFXLEtBQUssSUFBSUYsa0JBQWtCRTtBQUMvQyxFQUNBLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYXNvcl9jbG9uZS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvaHlkcmF0aW9uLmpzPzgyMTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VRdWVyeSB9IGZyb20gXCIuLi9yZWFjdC9jbGllbnQuanNcIjtcbmltcG9ydCB7IG1ha2VGdW5jdGlvblJlZmVyZW5jZSB9IGZyb20gXCIuLi9zZXJ2ZXIvYXBpLmpzXCI7XG5pbXBvcnQgeyBqc29uVG9Db252ZXggfSBmcm9tIFwiLi4vdmFsdWVzL2luZGV4LmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gdXNlUHJlbG9hZGVkUXVlcnkocHJlbG9hZGVkUXVlcnkpIHtcbiAgY29uc3QgYXJncyA9IHVzZU1lbW8oXG4gICAgKCkgPT4ganNvblRvQ29udmV4KHByZWxvYWRlZFF1ZXJ5Ll9hcmdzSlNPTiksXG4gICAgW3ByZWxvYWRlZFF1ZXJ5Ll9hcmdzSlNPTl1cbiAgKTtcbiAgY29uc3QgcHJlbG9hZGVkUmVzdWx0ID0gdXNlTWVtbyhcbiAgICAoKSA9PiBqc29uVG9Db252ZXgocHJlbG9hZGVkUXVlcnkuX3ZhbHVlSlNPTiksXG4gICAgW3ByZWxvYWRlZFF1ZXJ5Ll92YWx1ZUpTT05dXG4gICk7XG4gIGNvbnN0IHJlc3VsdCA9IHVzZVF1ZXJ5KFxuICAgIG1ha2VGdW5jdGlvblJlZmVyZW5jZShwcmVsb2FkZWRRdWVyeS5fbmFtZSksXG4gICAgYXJnc1xuICApO1xuICByZXR1cm4gcmVzdWx0ID09PSB2b2lkIDAgPyBwcmVsb2FkZWRSZXN1bHQgOiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oeWRyYXRpb24uanMubWFwXG4iXSwibmFtZXMiOlsidXNlTWVtbyIsInVzZVF1ZXJ5IiwibWFrZUZ1bmN0aW9uUmVmZXJlbmNlIiwianNvblRvQ29udmV4IiwidXNlUHJlbG9hZGVkUXVlcnkiLCJwcmVsb2FkZWRRdWVyeSIsImFyZ3MiLCJfYXJnc0pTT04iLCJwcmVsb2FkZWRSZXN1bHQiLCJfdmFsdWVKU09OIiwicmVzdWx0IiwiX25hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/hydration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthLoading: () => (/* reexport safe */ _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__.AuthLoading),\n/* harmony export */   Authenticated: () => (/* reexport safe */ _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__.Authenticated),\n/* harmony export */   ConvexProvider: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.ConvexProvider),\n/* harmony export */   ConvexProviderWithAuth: () => (/* reexport safe */ _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_3__.ConvexProviderWithAuth),\n/* harmony export */   ConvexReactClient: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.ConvexReactClient),\n/* harmony export */   Unauthenticated: () => (/* reexport safe */ _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__.Unauthenticated),\n/* harmony export */   optimisticallyUpdateValueInPaginatedQuery: () => (/* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.optimisticallyUpdateValueInPaginatedQuery),\n/* harmony export */   resetPaginationId: () => (/* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.resetPaginationId),\n/* harmony export */   useAction: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useAction),\n/* harmony export */   useConvex: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useConvex),\n/* harmony export */   useConvexAuth: () => (/* reexport safe */ _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_3__.useConvexAuth),\n/* harmony export */   useMutation: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useMutation),\n/* harmony export */   usePaginatedQuery: () => (/* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.usePaginatedQuery),\n/* harmony export */   usePreloadedQuery: () => (/* reexport safe */ _hydration_js__WEBPACK_IMPORTED_MODULE_4__.usePreloadedQuery),\n/* harmony export */   useQueries: () => (/* reexport safe */ _use_queries_js__WEBPACK_IMPORTED_MODULE_1__.useQueries),\n/* harmony export */   useQuery: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useQuery),\n/* harmony export */   useSubscription: () => (/* reexport safe */ _use_subscription_js__WEBPACK_IMPORTED_MODULE_5__.useSubscription)\n/* harmony export */ });\n/* harmony import */ var _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./use_paginated_query.js */ \"(ssr)/./node_modules/convex/dist/esm/react/use_paginated_query.js\");\n/* harmony import */ var _use_queries_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./use_queries.js */ \"(ssr)/./node_modules/convex/dist/esm/react/use_queries.js\");\n/* harmony import */ var _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./auth_helpers.js */ \"(ssr)/./node_modules/convex/dist/esm/react/auth_helpers.js\");\n/* harmony import */ var _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ConvexAuthState.js */ \"(ssr)/./node_modules/convex/dist/esm/react/ConvexAuthState.js\");\n/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hydration.js */ \"(ssr)/./node_modules/convex/dist/esm/react/hydration.js\");\n/* harmony import */ var _use_subscription_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./use_subscription.js */ \"(ssr)/./node_modules/convex/dist/esm/react/use_subscription.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./client.js */ \"(ssr)/./node_modules/convex/dist/esm/react/client.js\");\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3JlYWN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFhO0FBQzRCO0FBQ0s7QUFDWjtBQUNHO0FBQ047QUFDeUI7QUFRbkMsQ0FDckIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhc29yX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9yZWFjdC9pbmRleC5qcz8zNTViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vdXNlX3BhZ2luYXRlZF9xdWVyeS5qc1wiO1xuZXhwb3J0IHsgdXNlUXVlcmllcyB9IGZyb20gXCIuL3VzZV9xdWVyaWVzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9hdXRoX2hlbHBlcnMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0NvbnZleEF1dGhTdGF0ZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaHlkcmF0aW9uLmpzXCI7XG5leHBvcnQgeyB1c2VTdWJzY3JpcHRpb24gfSBmcm9tIFwiLi91c2Vfc3Vic2NyaXB0aW9uLmpzXCI7XG5leHBvcnQge1xuICBDb252ZXhSZWFjdENsaWVudCxcbiAgdXNlQ29udmV4LFxuICBDb252ZXhQcm92aWRlcixcbiAgdXNlUXVlcnksXG4gIHVzZU11dGF0aW9uLFxuICB1c2VBY3Rpb25cbn0gZnJvbSBcIi4vY2xpZW50LmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ1c2VRdWVyaWVzIiwidXNlU3Vic2NyaXB0aW9uIiwiQ29udmV4UmVhY3RDbGllbnQiLCJ1c2VDb252ZXgiLCJDb252ZXhQcm92aWRlciIsInVzZVF1ZXJ5IiwidXNlTXV0YXRpb24iLCJ1c2VBY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/queries_observer.js":
/*!****************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/queries_observer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueriesObserver: () => (/* binding */ QueriesObserver)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../server/api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\nclass QueriesObserver {\n    constructor(createWatch){\n        __publicField(this, \"createWatch\");\n        __publicField(this, \"queries\");\n        __publicField(this, \"listeners\");\n        this.createWatch = createWatch;\n        this.queries = {};\n        this.listeners = /* @__PURE__ */ new Set();\n    }\n    setQueries(newQueries) {\n        for (const identifier of Object.keys(newQueries)){\n            const { query, args } = newQueries[identifier];\n            (0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(query);\n            if (this.queries[identifier] === void 0) {\n                this.addQuery(identifier, query, args);\n            } else {\n                const existingInfo = this.queries[identifier];\n                if ((0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(query) !== (0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(existingInfo.query) || JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(args)) !== JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(existingInfo.args))) {\n                    this.removeQuery(identifier);\n                    this.addQuery(identifier, query, args);\n                }\n            }\n        }\n        for (const identifier of Object.keys(this.queries)){\n            if (newQueries[identifier] === void 0) {\n                this.removeQuery(identifier);\n            }\n        }\n    }\n    subscribe(listener) {\n        this.listeners.add(listener);\n        return ()=>{\n            this.listeners.delete(listener);\n        };\n    }\n    getLocalResults(queries) {\n        const result = {};\n        for (const identifier of Object.keys(queries)){\n            const { query, args } = queries[identifier];\n            (0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(query);\n            const watch = this.createWatch(query, args);\n            let value;\n            try {\n                value = watch.localQueryResult();\n            } catch (e) {\n                if (e instanceof Error) {\n                    value = e;\n                } else {\n                    throw e;\n                }\n            }\n            result[identifier] = value;\n        }\n        return result;\n    }\n    setCreateWatch(createWatch) {\n        this.createWatch = createWatch;\n        for (const identifier of Object.keys(this.queries)){\n            const { query, args, watch } = this.queries[identifier];\n            const journal = watch.journal();\n            this.removeQuery(identifier);\n            this.addQuery(identifier, query, args, journal);\n        }\n    }\n    destroy() {\n        for (const identifier of Object.keys(this.queries)){\n            this.removeQuery(identifier);\n        }\n        this.listeners = /* @__PURE__ */ new Set();\n    }\n    addQuery(identifier, query, args, journal) {\n        if (this.queries[identifier] !== void 0) {\n            throw new Error(`Tried to add a new query with identifier ${identifier} when it already exists.`);\n        }\n        const watch = this.createWatch(query, args, journal);\n        const unsubscribe = watch.onUpdate(()=>this.notifyListeners());\n        this.queries[identifier] = {\n            query,\n            args,\n            watch,\n            unsubscribe\n        };\n    }\n    removeQuery(identifier) {\n        const info = this.queries[identifier];\n        if (info === void 0) {\n            throw new Error(`No query found with identifier ${identifier}.`);\n        }\n        info.unsubscribe();\n        delete this.queries[identifier];\n    }\n    notifyListeners() {\n        for (const listener of this.listeners){\n            listener();\n        }\n    }\n} //# sourceMappingURL=queries_observer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/queries_observer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/use_paginated_query.js":
/*!*******************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/use_paginated_query.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   optimisticallyUpdateValueInPaginatedQuery: () => (/* binding */ optimisticallyUpdateValueInPaginatedQuery),\n/* harmony export */   resetPaginationId: () => (/* binding */ resetPaginationId),\n/* harmony export */   usePaginatedQuery: () => (/* binding */ usePaginatedQuery)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _use_queries_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./use_queries.js */ \"(ssr)/./node_modules/convex/dist/esm/react/use_queries.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../server/api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./client.js */ \"(ssr)/./node_modules/convex/dist/esm/react/client.js\");\n\n\n\n\n\n\nconst splitQuery = (key, splitCursor, continueCursor)=>(prevState)=>{\n        const queries = {\n            ...prevState.queries\n        };\n        const splitKey1 = prevState.nextPageKey;\n        const splitKey2 = prevState.nextPageKey + 1;\n        const nextPageKey = prevState.nextPageKey + 2;\n        queries[splitKey1] = {\n            query: prevState.query,\n            args: {\n                ...prevState.args,\n                paginationOpts: {\n                    ...prevState.queries[key].args.paginationOpts,\n                    endCursor: splitCursor\n                }\n            }\n        };\n        queries[splitKey2] = {\n            query: prevState.query,\n            args: {\n                ...prevState.args,\n                paginationOpts: {\n                    ...prevState.queries[key].args.paginationOpts,\n                    cursor: splitCursor,\n                    endCursor: continueCursor\n                }\n            }\n        };\n        const ongoingSplits = {\n            ...prevState.ongoingSplits\n        };\n        ongoingSplits[key] = [\n            splitKey1,\n            splitKey2\n        ];\n        return {\n            ...prevState,\n            nextPageKey,\n            queries,\n            ongoingSplits\n        };\n    };\nconst completeSplitQuery = (key)=>(prevState)=>{\n        const completedSplit = prevState.ongoingSplits[key];\n        if (completedSplit === void 0) {\n            return prevState;\n        }\n        const queries = {\n            ...prevState.queries\n        };\n        delete queries[key];\n        const ongoingSplits = {\n            ...prevState.ongoingSplits\n        };\n        delete ongoingSplits[key];\n        let pageKeys = prevState.pageKeys.slice();\n        const pageIndex = prevState.pageKeys.findIndex((v)=>v === key);\n        if (pageIndex >= 0) {\n            pageKeys = [\n                ...prevState.pageKeys.slice(0, pageIndex),\n                ...completedSplit,\n                ...prevState.pageKeys.slice(pageIndex + 1)\n            ];\n        }\n        return {\n            ...prevState,\n            queries,\n            pageKeys,\n            ongoingSplits\n        };\n    };\nfunction usePaginatedQuery(query, args, options) {\n    if (typeof options?.initialNumItems !== \"number\" || options.initialNumItems < 0) {\n        throw new Error(`\\`options.initialNumItems\\` must be a positive number. Received \\`${options?.initialNumItems}\\`.`);\n    }\n    const skip = args === \"skip\";\n    const argsObject = skip ? {} : args;\n    const queryName = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(query);\n    const createInitialState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return ()=>{\n            const id = nextPaginationId();\n            return {\n                query,\n                args: argsObject,\n                id,\n                nextPageKey: 1,\n                pageKeys: skip ? [] : [\n                    0\n                ],\n                queries: skip ? {} : {\n                    0: {\n                        query,\n                        args: {\n                            ...argsObject,\n                            paginationOpts: {\n                                numItems: options.initialNumItems,\n                                cursor: null,\n                                id\n                            }\n                        }\n                    }\n                },\n                ongoingSplits: {},\n                skip\n            };\n        };\n    }, [\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(argsObject)),\n        queryName,\n        options.initialNumItems,\n        skip\n    ]);\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(createInitialState);\n    let currState = state;\n    if ((0,_server_api_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(query) !== (0,_server_api_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(state.query) || JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(argsObject)) !== JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(state.args)) || skip !== state.skip) {\n        currState = createInitialState();\n        setState(currState);\n    }\n    const convexClient = (0,_client_js__WEBPACK_IMPORTED_MODULE_4__.useConvex)();\n    const logger = convexClient.logger;\n    const resultsObject = (0,_use_queries_js__WEBPACK_IMPORTED_MODULE_2__.useQueries)(currState.queries);\n    const [results, maybeLastResult] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        let currResult = void 0;\n        const allItems = [];\n        for (const pageKey of currState.pageKeys){\n            currResult = resultsObject[pageKey];\n            if (currResult === void 0) {\n                break;\n            }\n            if (currResult instanceof Error) {\n                if (currResult.message.includes(\"InvalidCursor\") || currResult instanceof _values_index_js__WEBPACK_IMPORTED_MODULE_1__.ConvexError && typeof currResult.data === \"object\" && currResult.data?.isConvexSystemError === true && currResult.data?.paginationError === \"InvalidCursor\") {\n                    logger.warn(\"usePaginatedQuery hit error, resetting pagination state: \" + currResult.message);\n                    setState(createInitialState);\n                    return [\n                        [],\n                        void 0\n                    ];\n                } else {\n                    throw currResult;\n                }\n            }\n            const ongoingSplit = currState.ongoingSplits[pageKey];\n            if (ongoingSplit !== void 0) {\n                if (resultsObject[ongoingSplit[0]] !== void 0 && resultsObject[ongoingSplit[1]] !== void 0) {\n                    setState(completeSplitQuery(pageKey));\n                }\n            } else if (currResult.splitCursor && (currResult.pageStatus === \"SplitRecommended\" || currResult.pageStatus === \"SplitRequired\" || currResult.page.length > options.initialNumItems * 2)) {\n                setState(splitQuery(pageKey, currResult.splitCursor, currResult.continueCursor));\n            }\n            if (currResult.pageStatus === \"SplitRequired\") {\n                return [\n                    allItems,\n                    void 0\n                ];\n            }\n            allItems.push(...currResult.page);\n        }\n        return [\n            allItems,\n            currResult\n        ];\n    }, [\n        resultsObject,\n        currState.pageKeys,\n        currState.ongoingSplits,\n        options.initialNumItems,\n        createInitialState,\n        logger\n    ]);\n    const statusObject = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (maybeLastResult === void 0) {\n            if (currState.nextPageKey === 1) {\n                return {\n                    status: \"LoadingFirstPage\",\n                    isLoading: true,\n                    loadMore: (_numItems)=>{}\n                };\n            } else {\n                return {\n                    status: \"LoadingMore\",\n                    isLoading: true,\n                    loadMore: (_numItems)=>{}\n                };\n            }\n        }\n        if (maybeLastResult.isDone) {\n            return {\n                status: \"Exhausted\",\n                isLoading: false,\n                loadMore: (_numItems)=>{}\n            };\n        }\n        const continueCursor = maybeLastResult.continueCursor;\n        let alreadyLoadingMore = false;\n        return {\n            status: \"CanLoadMore\",\n            isLoading: false,\n            loadMore: (numItems)=>{\n                if (!alreadyLoadingMore) {\n                    alreadyLoadingMore = true;\n                    setState((prevState)=>{\n                        const pageKeys = [\n                            ...prevState.pageKeys,\n                            prevState.nextPageKey\n                        ];\n                        const queries = {\n                            ...prevState.queries\n                        };\n                        queries[prevState.nextPageKey] = {\n                            query: prevState.query,\n                            args: {\n                                ...prevState.args,\n                                paginationOpts: {\n                                    numItems,\n                                    cursor: continueCursor,\n                                    id: prevState.id\n                                }\n                            }\n                        };\n                        return {\n                            ...prevState,\n                            nextPageKey: prevState.nextPageKey + 1,\n                            pageKeys,\n                            queries\n                        };\n                    });\n                }\n            }\n        };\n    }, [\n        maybeLastResult,\n        currState.nextPageKey\n    ]);\n    return {\n        results,\n        ...statusObject\n    };\n}\nlet paginationId = 0;\nfunction nextPaginationId() {\n    paginationId++;\n    return paginationId;\n}\nfunction resetPaginationId() {\n    paginationId = 0;\n}\nfunction optimisticallyUpdateValueInPaginatedQuery(localStore, query, args, updateValue) {\n    const expectedArgs = JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(args));\n    for (const queryResult of localStore.getAllQueries(query)){\n        if (queryResult.value !== void 0) {\n            const { paginationOpts: _, ...innerArgs } = queryResult.args;\n            if (JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(innerArgs)) === expectedArgs) {\n                const value = queryResult.value;\n                if (typeof value === \"object\" && value !== null && Array.isArray(value.page)) {\n                    localStore.setQuery(query, queryResult.args, {\n                        ...value,\n                        page: value.page.map(updateValue)\n                    });\n                }\n            }\n        }\n    }\n} //# sourceMappingURL=use_paginated_query.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/use_paginated_query.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/use_queries.js":
/*!***********************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/use_queries.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useQueries: () => (/* binding */ useQueries),\n/* harmony export */   useQueriesHelper: () => (/* binding */ useQueriesHelper)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client.js */ \"(ssr)/./node_modules/convex/dist/esm/react/client.js\");\n/* harmony import */ var _queries_observer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./queries_observer.js */ \"(ssr)/./node_modules/convex/dist/esm/react/queries_observer.js\");\n/* harmony import */ var _use_subscription_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./use_subscription.js */ \"(ssr)/./node_modules/convex/dist/esm/react/use_subscription.js\");\n\n\n\n\n\nfunction useQueries(queries) {\n    const convex = (0,_client_js__WEBPACK_IMPORTED_MODULE_1__.useConvex)();\n    if (convex === void 0) {\n        throw new Error(\"Could not find Convex client! `useQuery` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\");\n    }\n    const createWatch = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return (query, args, journal)=>{\n            return convex.watchQuery(query, args, {\n                journal\n            });\n        };\n    }, [\n        convex\n    ]);\n    return useQueriesHelper(queries, createWatch);\n}\nfunction useQueriesHelper(queries, createWatch) {\n    const [observer] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new _queries_observer_js__WEBPACK_IMPORTED_MODULE_2__.QueriesObserver(createWatch));\n    if (observer.createWatch !== createWatch) {\n        observer.setCreateWatch(createWatch);\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>observer.destroy(), [\n        observer\n    ]);\n    const subscription = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            getCurrentValue: ()=>{\n                return observer.getLocalResults(queries);\n            },\n            subscribe: (callback)=>{\n                observer.setQueries(queries);\n                return observer.subscribe(callback);\n            }\n        }), [\n        observer,\n        queries\n    ]);\n    return (0,_use_subscription_js__WEBPACK_IMPORTED_MODULE_3__.useSubscription)(subscription);\n} //# sourceMappingURL=use_queries.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3JlYWN0L3VzZV9xdWVyaWVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFhO0FBQ3dDO0FBQ2I7QUFDZ0I7QUFDQTtBQUNqRCxTQUFTTSxXQUFXQyxPQUFPO0lBQ2hDLE1BQU1DLFNBQVNMLHFEQUFTQTtJQUN4QixJQUFJSyxXQUFXLEtBQUssR0FBRztRQUNyQixNQUFNLElBQUlDLE1BQ1I7SUFFSjtJQUNBLE1BQU1DLGNBQWNULDhDQUFPQSxDQUFDO1FBQzFCLE9BQU8sQ0FBQ1UsT0FBT0MsTUFBTUM7WUFDbkIsT0FBT0wsT0FBT00sVUFBVSxDQUFDSCxPQUFPQyxNQUFNO2dCQUFFQztZQUFRO1FBQ2xEO0lBQ0YsR0FBRztRQUFDTDtLQUFPO0lBQ1gsT0FBT08saUJBQWlCUixTQUFTRztBQUNuQztBQUNPLFNBQVNLLGlCQUFpQlIsT0FBTyxFQUFFRyxXQUFXO0lBQ25ELE1BQU0sQ0FBQ00sU0FBUyxHQUFHZCwrQ0FBUUEsQ0FBQyxJQUFNLElBQUlFLGlFQUFlQSxDQUFDTTtJQUN0RCxJQUFJTSxTQUFTTixXQUFXLEtBQUtBLGFBQWE7UUFDeENNLFNBQVNDLGNBQWMsQ0FBQ1A7SUFDMUI7SUFDQVYsZ0RBQVNBLENBQUMsSUFBTSxJQUFNZ0IsU0FBU0UsT0FBTyxJQUFJO1FBQUNGO0tBQVM7SUFDcEQsTUFBTUcsZUFBZWxCLDhDQUFPQSxDQUMxQixJQUFPO1lBQ0xtQixpQkFBaUI7Z0JBQ2YsT0FBT0osU0FBU0ssZUFBZSxDQUFDZDtZQUNsQztZQUNBZSxXQUFXLENBQUNDO2dCQUNWUCxTQUFTUSxVQUFVLENBQUNqQjtnQkFDcEIsT0FBT1MsU0FBU00sU0FBUyxDQUFDQztZQUM1QjtRQUNGLElBQ0E7UUFBQ1A7UUFBVVQ7S0FBUTtJQUVyQixPQUFPRixxRUFBZUEsQ0FBQ2M7QUFDekIsRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmFzb3JfY2xvbmUvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3JlYWN0L3VzZV9xdWVyaWVzLmpzPzhlMmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VDb252ZXggfSBmcm9tIFwiLi9jbGllbnQuanNcIjtcbmltcG9ydCB7IFF1ZXJpZXNPYnNlcnZlciB9IGZyb20gXCIuL3F1ZXJpZXNfb2JzZXJ2ZXIuanNcIjtcbmltcG9ydCB7IHVzZVN1YnNjcmlwdGlvbiB9IGZyb20gXCIuL3VzZV9zdWJzY3JpcHRpb24uanNcIjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VRdWVyaWVzKHF1ZXJpZXMpIHtcbiAgY29uc3QgY29udmV4ID0gdXNlQ29udmV4KCk7XG4gIGlmIChjb252ZXggPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiQ291bGQgbm90IGZpbmQgQ29udmV4IGNsaWVudCEgYHVzZVF1ZXJ5YCBtdXN0IGJlIHVzZWQgaW4gdGhlIFJlYWN0IGNvbXBvbmVudCB0cmVlIHVuZGVyIGBDb252ZXhQcm92aWRlcmAuIERpZCB5b3UgZm9yZ2V0IGl0PyBTZWUgaHR0cHM6Ly9kb2NzLmNvbnZleC5kZXYvcXVpY2stc3RhcnQjc2V0LXVwLWNvbnZleC1pbi15b3VyLXJlYWN0LWFwcFwiXG4gICAgKTtcbiAgfVxuICBjb25zdCBjcmVhdGVXYXRjaCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiAocXVlcnksIGFyZ3MsIGpvdXJuYWwpID0+IHtcbiAgICAgIHJldHVybiBjb252ZXgud2F0Y2hRdWVyeShxdWVyeSwgYXJncywgeyBqb3VybmFsIH0pO1xuICAgIH07XG4gIH0sIFtjb252ZXhdKTtcbiAgcmV0dXJuIHVzZVF1ZXJpZXNIZWxwZXIocXVlcmllcywgY3JlYXRlV2F0Y2gpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHVzZVF1ZXJpZXNIZWxwZXIocXVlcmllcywgY3JlYXRlV2F0Y2gpIHtcbiAgY29uc3QgW29ic2VydmVyXSA9IHVzZVN0YXRlKCgpID0+IG5ldyBRdWVyaWVzT2JzZXJ2ZXIoY3JlYXRlV2F0Y2gpKTtcbiAgaWYgKG9ic2VydmVyLmNyZWF0ZVdhdGNoICE9PSBjcmVhdGVXYXRjaCkge1xuICAgIG9ic2VydmVyLnNldENyZWF0ZVdhdGNoKGNyZWF0ZVdhdGNoKTtcbiAgfVxuICB1c2VFZmZlY3QoKCkgPT4gKCkgPT4gb2JzZXJ2ZXIuZGVzdHJveSgpLCBbb2JzZXJ2ZXJdKTtcbiAgY29uc3Qgc3Vic2NyaXB0aW9uID0gdXNlTWVtbyhcbiAgICAoKSA9PiAoe1xuICAgICAgZ2V0Q3VycmVudFZhbHVlOiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBvYnNlcnZlci5nZXRMb2NhbFJlc3VsdHMocXVlcmllcyk7XG4gICAgICB9LFxuICAgICAgc3Vic2NyaWJlOiAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIuc2V0UXVlcmllcyhxdWVyaWVzKTtcbiAgICAgICAgcmV0dXJuIG9ic2VydmVyLnN1YnNjcmliZShjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfSksXG4gICAgW29ic2VydmVyLCBxdWVyaWVzXVxuICApO1xuICByZXR1cm4gdXNlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VfcXVlcmllcy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VNZW1vIiwidXNlU3RhdGUiLCJ1c2VDb252ZXgiLCJRdWVyaWVzT2JzZXJ2ZXIiLCJ1c2VTdWJzY3JpcHRpb24iLCJ1c2VRdWVyaWVzIiwicXVlcmllcyIsImNvbnZleCIsIkVycm9yIiwiY3JlYXRlV2F0Y2giLCJxdWVyeSIsImFyZ3MiLCJqb3VybmFsIiwid2F0Y2hRdWVyeSIsInVzZVF1ZXJpZXNIZWxwZXIiLCJvYnNlcnZlciIsInNldENyZWF0ZVdhdGNoIiwiZGVzdHJveSIsInN1YnNjcmlwdGlvbiIsImdldEN1cnJlbnRWYWx1ZSIsImdldExvY2FsUmVzdWx0cyIsInN1YnNjcmliZSIsImNhbGxiYWNrIiwic2V0UXVlcmllcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/use_queries.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/use_subscription.js":
/*!****************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/use_subscription.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSubscription: () => (/* binding */ useSubscription)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\nfunction useSubscription({ // (Synchronously) returns the current value of our subscription.\ngetCurrentValue, // This function is passed an event handler to attach to the subscription.\n// It should return an unsubscribe function that removes the handler.\nsubscribe }) {\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>({\n            getCurrentValue,\n            subscribe,\n            value: getCurrentValue()\n        }));\n    let valueToReturn = state.value;\n    if (state.getCurrentValue !== getCurrentValue || state.subscribe !== subscribe) {\n        valueToReturn = getCurrentValue();\n        setState({\n            getCurrentValue,\n            subscribe,\n            value: valueToReturn\n        });\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let didUnsubscribe = false;\n        const checkForUpdates = ()=>{\n            if (didUnsubscribe) {\n                return;\n            }\n            setState((prevState)=>{\n                if (prevState.getCurrentValue !== getCurrentValue || prevState.subscribe !== subscribe) {\n                    return prevState;\n                }\n                const value = getCurrentValue();\n                if (prevState.value === value) {\n                    return prevState;\n                }\n                return {\n                    ...prevState,\n                    value\n                };\n            });\n        };\n        const unsubscribe = subscribe(checkForUpdates);\n        checkForUpdates();\n        return ()=>{\n            didUnsubscribe = true;\n            unsubscribe();\n        };\n    }, [\n        getCurrentValue,\n        subscribe\n    ]);\n    return valueToReturn;\n} //# sourceMappingURL=use_subscription.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3JlYWN0L3VzZV9zdWJzY3JpcHRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBYTtBQUMrQjtBQUNyQyxTQUFTRSxnQkFBZ0IsRUFDOUIsaUVBQWlFO0FBQ2pFQyxlQUFlLEVBQ2YsMEVBQTBFO0FBQzFFLHFFQUFxRTtBQUNyRUMsU0FBUyxFQUNWO0lBQ0MsTUFBTSxDQUFDQyxPQUFPQyxTQUFTLEdBQUdMLCtDQUFRQSxDQUFDLElBQU87WUFDeENFO1lBQ0FDO1lBQ0FHLE9BQU9KO1FBQ1Q7SUFDQSxJQUFJSyxnQkFBZ0JILE1BQU1FLEtBQUs7SUFDL0IsSUFBSUYsTUFBTUYsZUFBZSxLQUFLQSxtQkFBbUJFLE1BQU1ELFNBQVMsS0FBS0EsV0FBVztRQUM5RUksZ0JBQWdCTDtRQUNoQkcsU0FBUztZQUNQSDtZQUNBQztZQUNBRyxPQUFPQztRQUNUO0lBQ0Y7SUFDQVIsZ0RBQVNBLENBQUM7UUFDUixJQUFJUyxpQkFBaUI7UUFDckIsTUFBTUMsa0JBQWtCO1lBQ3RCLElBQUlELGdCQUFnQjtnQkFDbEI7WUFDRjtZQUNBSCxTQUFTLENBQUNLO2dCQUNSLElBQUlBLFVBQVVSLGVBQWUsS0FBS0EsbUJBQW1CUSxVQUFVUCxTQUFTLEtBQUtBLFdBQVc7b0JBQ3RGLE9BQU9PO2dCQUNUO2dCQUNBLE1BQU1KLFFBQVFKO2dCQUNkLElBQUlRLFVBQVVKLEtBQUssS0FBS0EsT0FBTztvQkFDN0IsT0FBT0k7Z0JBQ1Q7Z0JBQ0EsT0FBTztvQkFBRSxHQUFHQSxTQUFTO29CQUFFSjtnQkFBTTtZQUMvQjtRQUNGO1FBQ0EsTUFBTUssY0FBY1IsVUFBVU07UUFDOUJBO1FBQ0EsT0FBTztZQUNMRCxpQkFBaUI7WUFDakJHO1FBQ0Y7SUFDRixHQUFHO1FBQUNUO1FBQWlCQztLQUFVO0lBQy9CLE9BQU9JO0FBQ1QsRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmFzb3JfY2xvbmUvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3JlYWN0L3VzZV9zdWJzY3JpcHRpb24uanM/OWZkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VTdWJzY3JpcHRpb24oe1xuICAvLyAoU3luY2hyb25vdXNseSkgcmV0dXJucyB0aGUgY3VycmVudCB2YWx1ZSBvZiBvdXIgc3Vic2NyaXB0aW9uLlxuICBnZXRDdXJyZW50VmFsdWUsXG4gIC8vIFRoaXMgZnVuY3Rpb24gaXMgcGFzc2VkIGFuIGV2ZW50IGhhbmRsZXIgdG8gYXR0YWNoIHRvIHRoZSBzdWJzY3JpcHRpb24uXG4gIC8vIEl0IHNob3VsZCByZXR1cm4gYW4gdW5zdWJzY3JpYmUgZnVuY3Rpb24gdGhhdCByZW1vdmVzIHRoZSBoYW5kbGVyLlxuICBzdWJzY3JpYmVcbn0pIHtcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZSgoKSA9PiAoe1xuICAgIGdldEN1cnJlbnRWYWx1ZSxcbiAgICBzdWJzY3JpYmUsXG4gICAgdmFsdWU6IGdldEN1cnJlbnRWYWx1ZSgpXG4gIH0pKTtcbiAgbGV0IHZhbHVlVG9SZXR1cm4gPSBzdGF0ZS52YWx1ZTtcbiAgaWYgKHN0YXRlLmdldEN1cnJlbnRWYWx1ZSAhPT0gZ2V0Q3VycmVudFZhbHVlIHx8IHN0YXRlLnN1YnNjcmliZSAhPT0gc3Vic2NyaWJlKSB7XG4gICAgdmFsdWVUb1JldHVybiA9IGdldEN1cnJlbnRWYWx1ZSgpO1xuICAgIHNldFN0YXRlKHtcbiAgICAgIGdldEN1cnJlbnRWYWx1ZSxcbiAgICAgIHN1YnNjcmliZSxcbiAgICAgIHZhbHVlOiB2YWx1ZVRvUmV0dXJuXG4gICAgfSk7XG4gIH1cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgZGlkVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgICBjb25zdCBjaGVja0ZvclVwZGF0ZXMgPSAoKSA9PiB7XG4gICAgICBpZiAoZGlkVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2V0U3RhdGUoKHByZXZTdGF0ZSkgPT4ge1xuICAgICAgICBpZiAocHJldlN0YXRlLmdldEN1cnJlbnRWYWx1ZSAhPT0gZ2V0Q3VycmVudFZhbHVlIHx8IHByZXZTdGF0ZS5zdWJzY3JpYmUgIT09IHN1YnNjcmliZSkge1xuICAgICAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSBnZXRDdXJyZW50VmFsdWUoKTtcbiAgICAgICAgaWYgKHByZXZTdGF0ZS52YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gcHJldlN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IC4uLnByZXZTdGF0ZSwgdmFsdWUgfTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgdW5zdWJzY3JpYmUgPSBzdWJzY3JpYmUoY2hlY2tGb3JVcGRhdGVzKTtcbiAgICBjaGVja0ZvclVwZGF0ZXMoKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZGlkVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbZ2V0Q3VycmVudFZhbHVlLCBzdWJzY3JpYmVdKTtcbiAgcmV0dXJuIHZhbHVlVG9SZXR1cm47XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2Vfc3Vic2NyaXB0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbInVzZUVmZmVjdCIsInVzZVN0YXRlIiwidXNlU3Vic2NyaXB0aW9uIiwiZ2V0Q3VycmVudFZhbHVlIiwic3Vic2NyaWJlIiwic3RhdGUiLCJzZXRTdGF0ZSIsInZhbHVlIiwidmFsdWVUb1JldHVybiIsImRpZFVuc3Vic2NyaWJlIiwiY2hlY2tGb3JVcGRhdGVzIiwicHJldlN0YXRlIiwidW5zdWJzY3JpYmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/use_subscription.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/api.js":
/*!****************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/api.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   anyApi: () => (/* binding */ anyApi),\n/* harmony export */   filterApi: () => (/* binding */ filterApi),\n/* harmony export */   getFunctionName: () => (/* binding */ getFunctionName),\n/* harmony export */   justActions: () => (/* binding */ justActions),\n/* harmony export */   justInternal: () => (/* binding */ justInternal),\n/* harmony export */   justMutations: () => (/* binding */ justMutations),\n/* harmony export */   justPaginatedQueries: () => (/* binding */ justPaginatedQueries),\n/* harmony export */   justPublic: () => (/* binding */ justPublic),\n/* harmony export */   justQueries: () => (/* binding */ justQueries),\n/* harmony export */   justSchedulable: () => (/* binding */ justSchedulable),\n/* harmony export */   makeFunctionReference: () => (/* binding */ makeFunctionReference)\n/* harmony export */ });\n/* harmony import */ var _functionName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functionName.js */ \"(ssr)/./node_modules/convex/dist/esm/server/functionName.js\");\n/* harmony import */ var _components_paths_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/paths.js */ \"(ssr)/./node_modules/convex/dist/esm/server/components/paths.js\");\n\n\n\nfunction getFunctionName(functionReference) {\n    const address = (0,_components_paths_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionAddress)(functionReference);\n    if (address.name === void 0) {\n        if (address.functionHandle !== void 0) {\n            throw new Error(`Expected function reference like \"api.file.func\" or \"internal.file.func\", but received function handle ${address.functionHandle}`);\n        } else if (address.reference !== void 0) {\n            throw new Error(`Expected function reference in the current component like \"api.file.func\" or \"internal.file.func\", but received reference ${address.reference}`);\n        }\n        throw new Error(`Expected function reference like \"api.file.func\" or \"internal.file.func\", but received ${JSON.stringify(address)}`);\n    }\n    if (typeof functionReference === \"string\") return functionReference;\n    const name = functionReference[_functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName];\n    if (!name) {\n        throw new Error(`${functionReference} is not a functionReference`);\n    }\n    return name;\n}\nfunction makeFunctionReference(name) {\n    return {\n        [_functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName]: name\n    };\n}\nfunction createApi(pathParts = []) {\n    const handler = {\n        get (_, prop) {\n            if (typeof prop === \"string\") {\n                const newParts = [\n                    ...pathParts,\n                    prop\n                ];\n                return createApi(newParts);\n            } else if (prop === _functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName) {\n                if (pathParts.length < 2) {\n                    const found = [\n                        \"api\",\n                        ...pathParts\n                    ].join(\".\");\n                    throw new Error(`API path is expected to be of the form \\`api.moduleName.functionName\\`. Found: \\`${found}\\``);\n                }\n                const path = pathParts.slice(0, -1).join(\"/\");\n                const exportName = pathParts[pathParts.length - 1];\n                if (exportName === \"default\") {\n                    return path;\n                } else {\n                    return path + \":\" + exportName;\n                }\n            } else if (prop === Symbol.toStringTag) {\n                return \"FunctionReference\";\n            } else {\n                return void 0;\n            }\n        }\n    };\n    return new Proxy({}, handler);\n}\nfunction filterApi(api) {\n    return api;\n}\nfunction justInternal(api) {\n    return api;\n}\nfunction justPublic(api) {\n    return api;\n}\nfunction justQueries(api) {\n    return api;\n}\nfunction justMutations(api) {\n    return api;\n}\nfunction justActions(api) {\n    return api;\n}\nfunction justPaginatedQueries(api) {\n    return api;\n}\nfunction justSchedulable(api) {\n    return api;\n}\nconst anyApi = createApi(); //# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9hcGkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFhO0FBQ29DO0FBQ1U7QUFDcEQsU0FBU0UsZ0JBQWdCQyxpQkFBaUI7SUFDL0MsTUFBTUMsVUFBVUgsd0VBQWtCQSxDQUFDRTtJQUNuQyxJQUFJQyxRQUFRQyxJQUFJLEtBQUssS0FBSyxHQUFHO1FBQzNCLElBQUlELFFBQVFFLGNBQWMsS0FBSyxLQUFLLEdBQUc7WUFDckMsTUFBTSxJQUFJQyxNQUNSLENBQUMsdUdBQXVHLEVBQUVILFFBQVFFLGNBQWMsQ0FBQyxDQUFDO1FBRXRJLE9BQU8sSUFBSUYsUUFBUUksU0FBUyxLQUFLLEtBQUssR0FBRztZQUN2QyxNQUFNLElBQUlELE1BQ1IsQ0FBQywwSEFBMEgsRUFBRUgsUUFBUUksU0FBUyxDQUFDLENBQUM7UUFFcEo7UUFDQSxNQUFNLElBQUlELE1BQ1IsQ0FBQyx1RkFBdUYsRUFBRUUsS0FBS0MsU0FBUyxDQUFDTixTQUFTLENBQUM7SUFFdkg7SUFDQSxJQUFJLE9BQU9ELHNCQUFzQixVQUFVLE9BQU9BO0lBQ2xELE1BQU1FLE9BQU9GLGlCQUFpQixDQUFDSCwwREFBWUEsQ0FBQztJQUM1QyxJQUFJLENBQUNLLE1BQU07UUFDVCxNQUFNLElBQUlFLE1BQU0sQ0FBQyxFQUFFSixrQkFBa0IsMkJBQTJCLENBQUM7SUFDbkU7SUFDQSxPQUFPRTtBQUNUO0FBQ08sU0FBU00sc0JBQXNCTixJQUFJO0lBQ3hDLE9BQU87UUFBRSxDQUFDTCwwREFBWUEsQ0FBQyxFQUFFSztJQUFLO0FBQ2hDO0FBQ0EsU0FBU08sVUFBVUMsWUFBWSxFQUFFO0lBQy9CLE1BQU1DLFVBQVU7UUFDZEMsS0FBSUMsQ0FBQyxFQUFFQyxJQUFJO1lBQ1QsSUFBSSxPQUFPQSxTQUFTLFVBQVU7Z0JBQzVCLE1BQU1DLFdBQVc7dUJBQUlMO29CQUFXSTtpQkFBSztnQkFDckMsT0FBT0wsVUFBVU07WUFDbkIsT0FBTyxJQUFJRCxTQUFTakIsMERBQVlBLEVBQUU7Z0JBQ2hDLElBQUlhLFVBQVVNLE1BQU0sR0FBRyxHQUFHO29CQUN4QixNQUFNQyxRQUFRO3dCQUFDOzJCQUFVUDtxQkFBVSxDQUFDUSxJQUFJLENBQUM7b0JBQ3pDLE1BQU0sSUFBSWQsTUFDUixDQUFDLGlGQUFpRixFQUFFYSxNQUFNLEVBQUUsQ0FBQztnQkFFakc7Z0JBQ0EsTUFBTUUsT0FBT1QsVUFBVVUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHRixJQUFJLENBQUM7Z0JBQ3pDLE1BQU1HLGFBQWFYLFNBQVMsQ0FBQ0EsVUFBVU0sTUFBTSxHQUFHLEVBQUU7Z0JBQ2xELElBQUlLLGVBQWUsV0FBVztvQkFDNUIsT0FBT0Y7Z0JBQ1QsT0FBTztvQkFDTCxPQUFPQSxPQUFPLE1BQU1FO2dCQUN0QjtZQUNGLE9BQU8sSUFBSVAsU0FBU1EsT0FBT0MsV0FBVyxFQUFFO2dCQUN0QyxPQUFPO1lBQ1QsT0FBTztnQkFDTCxPQUFPLEtBQUs7WUFDZDtRQUNGO0lBQ0Y7SUFDQSxPQUFPLElBQUlDLE1BQU0sQ0FBQyxHQUFHYjtBQUN2QjtBQUNPLFNBQVNjLFVBQVVDLEdBQUc7SUFDM0IsT0FBT0E7QUFDVDtBQUNPLFNBQVNDLGFBQWFELEdBQUc7SUFDOUIsT0FBT0E7QUFDVDtBQUNPLFNBQVNFLFdBQVdGLEdBQUc7SUFDNUIsT0FBT0E7QUFDVDtBQUNPLFNBQVNHLFlBQVlILEdBQUc7SUFDN0IsT0FBT0E7QUFDVDtBQUNPLFNBQVNJLGNBQWNKLEdBQUc7SUFDL0IsT0FBT0E7QUFDVDtBQUNPLFNBQVNLLFlBQVlMLEdBQUc7SUFDN0IsT0FBT0E7QUFDVDtBQUNPLFNBQVNNLHFCQUFxQk4sR0FBRztJQUN0QyxPQUFPQTtBQUNUO0FBQ08sU0FBU08sZ0JBQWdCUCxHQUFHO0lBQ2pDLE9BQU9BO0FBQ1Q7QUFDTyxNQUFNUSxTQUFTekIsWUFBWSxDQUNsQywrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmFzb3JfY2xvbmUvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9hcGkuanM/NmMxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IGZ1bmN0aW9uTmFtZSB9IGZyb20gXCIuL2Z1bmN0aW9uTmFtZS5qc1wiO1xuaW1wb3J0IHsgZ2V0RnVuY3Rpb25BZGRyZXNzIH0gZnJvbSBcIi4vY29tcG9uZW50cy9wYXRocy5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZ1bmN0aW9uTmFtZShmdW5jdGlvblJlZmVyZW5jZSkge1xuICBjb25zdCBhZGRyZXNzID0gZ2V0RnVuY3Rpb25BZGRyZXNzKGZ1bmN0aW9uUmVmZXJlbmNlKTtcbiAgaWYgKGFkZHJlc3MubmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgaWYgKGFkZHJlc3MuZnVuY3Rpb25IYW5kbGUgIT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRXhwZWN0ZWQgZnVuY3Rpb24gcmVmZXJlbmNlIGxpa2UgXCJhcGkuZmlsZS5mdW5jXCIgb3IgXCJpbnRlcm5hbC5maWxlLmZ1bmNcIiwgYnV0IHJlY2VpdmVkIGZ1bmN0aW9uIGhhbmRsZSAke2FkZHJlc3MuZnVuY3Rpb25IYW5kbGV9YFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGFkZHJlc3MucmVmZXJlbmNlICE9PSB2b2lkIDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEV4cGVjdGVkIGZ1bmN0aW9uIHJlZmVyZW5jZSBpbiB0aGUgY3VycmVudCBjb21wb25lbnQgbGlrZSBcImFwaS5maWxlLmZ1bmNcIiBvciBcImludGVybmFsLmZpbGUuZnVuY1wiLCBidXQgcmVjZWl2ZWQgcmVmZXJlbmNlICR7YWRkcmVzcy5yZWZlcmVuY2V9YFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEV4cGVjdGVkIGZ1bmN0aW9uIHJlZmVyZW5jZSBsaWtlIFwiYXBpLmZpbGUuZnVuY1wiIG9yIFwiaW50ZXJuYWwuZmlsZS5mdW5jXCIsIGJ1dCByZWNlaXZlZCAke0pTT04uc3RyaW5naWZ5KGFkZHJlc3MpfWBcbiAgICApO1xuICB9XG4gIGlmICh0eXBlb2YgZnVuY3Rpb25SZWZlcmVuY2UgPT09IFwic3RyaW5nXCIpIHJldHVybiBmdW5jdGlvblJlZmVyZW5jZTtcbiAgY29uc3QgbmFtZSA9IGZ1bmN0aW9uUmVmZXJlbmNlW2Z1bmN0aW9uTmFtZV07XG4gIGlmICghbmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgJHtmdW5jdGlvblJlZmVyZW5jZX0gaXMgbm90IGEgZnVuY3Rpb25SZWZlcmVuY2VgKTtcbiAgfVxuICByZXR1cm4gbmFtZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRnVuY3Rpb25SZWZlcmVuY2UobmFtZSkge1xuICByZXR1cm4geyBbZnVuY3Rpb25OYW1lXTogbmFtZSB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQXBpKHBhdGhQYXJ0cyA9IFtdKSB7XG4gIGNvbnN0IGhhbmRsZXIgPSB7XG4gICAgZ2V0KF8sIHByb3ApIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBuZXdQYXJ0cyA9IFsuLi5wYXRoUGFydHMsIHByb3BdO1xuICAgICAgICByZXR1cm4gY3JlYXRlQXBpKG5ld1BhcnRzKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcCA9PT0gZnVuY3Rpb25OYW1lKSB7XG4gICAgICAgIGlmIChwYXRoUGFydHMubGVuZ3RoIDwgMikge1xuICAgICAgICAgIGNvbnN0IGZvdW5kID0gW1wiYXBpXCIsIC4uLnBhdGhQYXJ0c10uam9pbihcIi5cIik7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYEFQSSBwYXRoIGlzIGV4cGVjdGVkIHRvIGJlIG9mIHRoZSBmb3JtIFxcYGFwaS5tb2R1bGVOYW1lLmZ1bmN0aW9uTmFtZVxcYC4gRm91bmQ6IFxcYCR7Zm91bmR9XFxgYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF0aCA9IHBhdGhQYXJ0cy5zbGljZSgwLCAtMSkuam9pbihcIi9cIik7XG4gICAgICAgIGNvbnN0IGV4cG9ydE5hbWUgPSBwYXRoUGFydHNbcGF0aFBhcnRzLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAoZXhwb3J0TmFtZSA9PT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcGF0aCArIFwiOlwiICsgZXhwb3J0TmFtZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwcm9wID09PSBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiAgICAgICAgcmV0dXJuIFwiRnVuY3Rpb25SZWZlcmVuY2VcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gbmV3IFByb3h5KHt9LCBoYW5kbGVyKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJBcGkoYXBpKSB7XG4gIHJldHVybiBhcGk7XG59XG5leHBvcnQgZnVuY3Rpb24ganVzdEludGVybmFsKGFwaSkge1xuICByZXR1cm4gYXBpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGp1c3RQdWJsaWMoYXBpKSB7XG4gIHJldHVybiBhcGk7XG59XG5leHBvcnQgZnVuY3Rpb24ganVzdFF1ZXJpZXMoYXBpKSB7XG4gIHJldHVybiBhcGk7XG59XG5leHBvcnQgZnVuY3Rpb24ganVzdE11dGF0aW9ucyhhcGkpIHtcbiAgcmV0dXJuIGFwaTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBqdXN0QWN0aW9ucyhhcGkpIHtcbiAgcmV0dXJuIGFwaTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBqdXN0UGFnaW5hdGVkUXVlcmllcyhhcGkpIHtcbiAgcmV0dXJuIGFwaTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBqdXN0U2NoZWR1bGFibGUoYXBpKSB7XG4gIHJldHVybiBhcGk7XG59XG5leHBvcnQgY29uc3QgYW55QXBpID0gY3JlYXRlQXBpKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkuanMubWFwXG4iXSwibmFtZXMiOlsiZnVuY3Rpb25OYW1lIiwiZ2V0RnVuY3Rpb25BZGRyZXNzIiwiZ2V0RnVuY3Rpb25OYW1lIiwiZnVuY3Rpb25SZWZlcmVuY2UiLCJhZGRyZXNzIiwibmFtZSIsImZ1bmN0aW9uSGFuZGxlIiwiRXJyb3IiLCJyZWZlcmVuY2UiLCJKU09OIiwic3RyaW5naWZ5IiwibWFrZUZ1bmN0aW9uUmVmZXJlbmNlIiwiY3JlYXRlQXBpIiwicGF0aFBhcnRzIiwiaGFuZGxlciIsImdldCIsIl8iLCJwcm9wIiwibmV3UGFydHMiLCJsZW5ndGgiLCJmb3VuZCIsImpvaW4iLCJwYXRoIiwic2xpY2UiLCJleHBvcnROYW1lIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJQcm94eSIsImZpbHRlckFwaSIsImFwaSIsImp1c3RJbnRlcm5hbCIsImp1c3RQdWJsaWMiLCJqdXN0UXVlcmllcyIsImp1c3RNdXRhdGlvbnMiLCJqdXN0QWN0aW9ucyIsImp1c3RQYWdpbmF0ZWRRdWVyaWVzIiwianVzdFNjaGVkdWxhYmxlIiwiYW55QXBpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/components/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/components/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   componentsGeneric: () => (/* binding */ componentsGeneric),\n/* harmony export */   createFunctionHandle: () => (/* binding */ createFunctionHandle),\n/* harmony export */   currentSystemUdfInComponent: () => (/* binding */ currentSystemUdfInComponent),\n/* harmony export */   defineApp: () => (/* binding */ defineApp),\n/* harmony export */   defineComponent: () => (/* binding */ defineComponent),\n/* harmony export */   getFunctionAddress: () => (/* reexport safe */ _paths_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionAddress)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _impl_syscall_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../impl/syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n/* harmony import */ var _paths_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./paths.js */ \"(ssr)/./node_modules/convex/dist/esm/server/components/paths.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\nasync function createFunctionHandle(functionReference) {\n    const address = (0,_paths_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionAddress)(functionReference);\n    return await (0,_impl_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/createFunctionHandle\", {\n        ...address,\n        version: _index_js__WEBPACK_IMPORTED_MODULE_1__.version\n    });\n}\nclass InstalledComponent {\n    constructor(definition, name){\n        /**\n     * @internal\n     */ __publicField(this, \"_definition\");\n        /**\n     * @internal\n     */ __publicField(this, \"_name\");\n        this._definition = definition;\n        this._name = name;\n        (0,_paths_js__WEBPACK_IMPORTED_MODULE_3__.setReferencePath)(this, `_reference/childComponent/${name}`);\n    }\n    get exports() {\n        return createExports(this._name, []);\n    }\n}\nfunction createExports(name, pathParts) {\n    const handler = {\n        get (_, prop) {\n            if (typeof prop === \"string\") {\n                const newParts = [\n                    ...pathParts,\n                    prop\n                ];\n                return createExports(name, newParts);\n            } else if (prop === _paths_js__WEBPACK_IMPORTED_MODULE_3__.toReferencePath) {\n                let reference = `_reference/childComponent/${name}`;\n                for (const part of pathParts){\n                    reference += `/${part}`;\n                }\n                return reference;\n            } else {\n                return void 0;\n            }\n        }\n    };\n    return new Proxy({}, handler);\n}\nfunction use(definition, options) {\n    const importedComponentDefinition = definition;\n    if (typeof importedComponentDefinition.componentDefinitionPath !== \"string\") {\n        throw new Error(\"Component definition does not have the required componentDefinitionPath property. This code only works in Convex runtime.\");\n    }\n    const name = options?.name || // added recently\n    importedComponentDefinition.defaultName || // can be removed once backend is out\n    importedComponentDefinition.componentDefinitionPath.split(\"/\").pop();\n    this._childComponents.push([\n        name,\n        importedComponentDefinition,\n        {}\n    ]);\n    return new InstalledComponent(definition, name);\n}\nfunction exportAppForAnalysis() {\n    const definitionType = {\n        type: \"app\"\n    };\n    const childComponents = serializeChildComponents(this._childComponents);\n    return {\n        definitionType,\n        childComponents,\n        httpMounts: {},\n        exports: serializeExportTree(this._exportTree)\n    };\n}\nfunction serializeExportTree(tree) {\n    const branch = [];\n    for (const [key, child] of Object.entries(tree)){\n        let node;\n        if (typeof child === \"string\") {\n            node = {\n                type: \"leaf\",\n                leaf: child\n            };\n        } else {\n            node = serializeExportTree(child);\n        }\n        branch.push([\n            key,\n            node\n        ]);\n    }\n    return {\n        type: \"branch\",\n        branch\n    };\n}\nfunction serializeChildComponents(childComponents) {\n    return childComponents.map(([name, definition, p])=>{\n        let args = null;\n        if (p !== null) {\n            args = [];\n            for (const [name2, value] of Object.entries(p)){\n                if (value !== void 0) {\n                    args.push([\n                        name2,\n                        {\n                            type: \"value\",\n                            value: JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(value))\n                        }\n                    ]);\n                }\n            }\n        }\n        const path = definition.componentDefinitionPath;\n        if (!path) throw new Error(\"no .componentPath for component definition \" + JSON.stringify(definition, null, 2));\n        return {\n            name,\n            path,\n            args\n        };\n    });\n}\nfunction exportComponentForAnalysis() {\n    const args = Object.entries(this._args).map(([name, validator])=>[\n            name,\n            {\n                type: \"value\",\n                value: JSON.stringify(validator.json)\n            }\n        ]);\n    const definitionType = {\n        type: \"childComponent\",\n        name: this._name,\n        args\n    };\n    const childComponents = serializeChildComponents(this._childComponents);\n    return {\n        name: this._name,\n        definitionType,\n        childComponents,\n        httpMounts: {},\n        exports: serializeExportTree(this._exportTree)\n    };\n}\nfunction defineComponent(name) {\n    const ret = {\n        _isRoot: false,\n        _name: name,\n        _args: {},\n        _childComponents: [],\n        _exportTree: {},\n        _onInitCallbacks: {},\n        export: exportComponentForAnalysis,\n        use,\n        // pretend to conform to ComponentDefinition, which temporarily expects __args\n        ...{}\n    };\n    return ret;\n}\nfunction defineApp() {\n    const ret = {\n        _isRoot: true,\n        _childComponents: [],\n        _exportTree: {},\n        export: exportAppForAnalysis,\n        use\n    };\n    return ret;\n}\nfunction currentSystemUdfInComponent(componentId) {\n    return {\n        [_paths_js__WEBPACK_IMPORTED_MODULE_3__.toReferencePath]: `_reference/currentSystemUdfInComponent/${componentId}`\n    };\n}\nfunction createChildComponents(root, pathParts) {\n    const handler = {\n        get (_, prop) {\n            if (typeof prop === \"string\") {\n                const newParts = [\n                    ...pathParts,\n                    prop\n                ];\n                return createChildComponents(root, newParts);\n            } else if (prop === _paths_js__WEBPACK_IMPORTED_MODULE_3__.toReferencePath) {\n                if (pathParts.length < 1) {\n                    const found = [\n                        root,\n                        ...pathParts\n                    ].join(\".\");\n                    throw new Error(`API path is expected to be of the form \\`${root}.childComponent.functionName\\`. Found: \\`${found}\\``);\n                }\n                return `_reference/childComponent/` + pathParts.join(\"/\");\n            } else {\n                return void 0;\n            }\n        }\n    };\n    return new Proxy({}, handler);\n}\nconst componentsGeneric = ()=>createChildComponents(\"components\", []); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9jb21wb25lbnRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBYTtBQUNiLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1KLFVBQVVJLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksZ0JBQWdCLENBQUNOLEtBQUtDLEtBQUtDLFFBQVVILGdCQUFnQkMsS0FBSyxPQUFPQyxRQUFRLFdBQVdBLE1BQU0sS0FBS0EsS0FBS0M7QUFDbkQ7QUFDWjtBQUNnQjtBQUtyQztBQUM0QjtBQUN6QyxlQUFlVyxxQkFBcUJDLGlCQUFpQjtJQUMxRCxNQUFNQyxVQUFVTCw2REFBa0JBLENBQUNJO0lBQ25DLE9BQU8sTUFBTUwscUVBQW1CQSxDQUFDLDRCQUE0QjtRQUMzRCxHQUFHTSxPQUFPO1FBQ1ZQLE9BQU9BLGdEQUFBQTtJQUNUO0FBQ0Y7QUFDQSxNQUFNUTtJQUNKQyxZQUFZQyxVQUFVLEVBQUVDLElBQUksQ0FBRTtRQUM1Qjs7S0FFQyxHQUNEYixjQUFjLElBQUksRUFBRTtRQUNwQjs7S0FFQyxHQUNEQSxjQUFjLElBQUksRUFBRTtRQUNwQixJQUFJLENBQUNjLFdBQVcsR0FBR0Y7UUFDbkIsSUFBSSxDQUFDRyxLQUFLLEdBQUdGO1FBQ2JSLDJEQUFnQkEsQ0FBQyxJQUFJLEVBQUUsQ0FBQywwQkFBMEIsRUFBRVEsS0FBSyxDQUFDO0lBQzVEO0lBQ0EsSUFBSUcsVUFBVTtRQUNaLE9BQU9DLGNBQWMsSUFBSSxDQUFDRixLQUFLLEVBQUUsRUFBRTtJQUNyQztBQUNGO0FBQ0EsU0FBU0UsY0FBY0osSUFBSSxFQUFFSyxTQUFTO0lBQ3BDLE1BQU1DLFVBQVU7UUFDZEMsS0FBSUMsQ0FBQyxFQUFFQyxJQUFJO1lBQ1QsSUFBSSxPQUFPQSxTQUFTLFVBQVU7Z0JBQzVCLE1BQU1DLFdBQVc7dUJBQUlMO29CQUFXSTtpQkFBSztnQkFDckMsT0FBT0wsY0FBY0osTUFBTVU7WUFDN0IsT0FBTyxJQUFJRCxTQUFTaEIsc0RBQWVBLEVBQUU7Z0JBQ25DLElBQUlrQixZQUFZLENBQUMsMEJBQTBCLEVBQUVYLEtBQUssQ0FBQztnQkFDbkQsS0FBSyxNQUFNWSxRQUFRUCxVQUFXO29CQUM1Qk0sYUFBYSxDQUFDLENBQUMsRUFBRUMsS0FBSyxDQUFDO2dCQUN6QjtnQkFDQSxPQUFPRDtZQUNULE9BQU87Z0JBQ0wsT0FBTyxLQUFLO1lBQ2Q7UUFDRjtJQUNGO0lBQ0EsT0FBTyxJQUFJRSxNQUFNLENBQUMsR0FBR1A7QUFDdkI7QUFDQSxTQUFTUSxJQUFJZixVQUFVLEVBQUVnQixPQUFPO0lBQzlCLE1BQU1DLDhCQUE4QmpCO0lBQ3BDLElBQUksT0FBT2lCLDRCQUE0QkMsdUJBQXVCLEtBQUssVUFBVTtRQUMzRSxNQUFNLElBQUlDLE1BQ1I7SUFFSjtJQUNBLE1BQU1sQixPQUFPZSxTQUFTZixRQUFRLGlCQUFpQjtJQUMvQ2dCLDRCQUE0QkcsV0FBVyxJQUFJLHFDQUFxQztJQUNoRkgsNEJBQTRCQyx1QkFBdUIsQ0FBQ0csS0FBSyxDQUFDLEtBQUtDLEdBQUc7SUFDbEUsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQ0MsSUFBSSxDQUFDO1FBQUN2QjtRQUFNZ0I7UUFBNkIsQ0FBQztLQUFFO0lBQ2xFLE9BQU8sSUFBSW5CLG1CQUFtQkUsWUFBWUM7QUFDNUM7QUFDQSxTQUFTd0I7SUFDUCxNQUFNQyxpQkFBaUI7UUFBRUMsTUFBTTtJQUFNO0lBQ3JDLE1BQU1DLGtCQUFrQkMseUJBQXlCLElBQUksQ0FBQ04sZ0JBQWdCO0lBQ3RFLE9BQU87UUFDTEc7UUFDQUU7UUFDQUUsWUFBWSxDQUFDO1FBQ2IxQixTQUFTMkIsb0JBQW9CLElBQUksQ0FBQ0MsV0FBVztJQUMvQztBQUNGO0FBQ0EsU0FBU0Qsb0JBQW9CRSxJQUFJO0lBQy9CLE1BQU1DLFNBQVMsRUFBRTtJQUNqQixLQUFLLE1BQU0sQ0FBQ25ELEtBQUtvRCxNQUFNLElBQUl4RCxPQUFPeUQsT0FBTyxDQUFDSCxNQUFPO1FBQy9DLElBQUlJO1FBQ0osSUFBSSxPQUFPRixVQUFVLFVBQVU7WUFDN0JFLE9BQU87Z0JBQUVWLE1BQU07Z0JBQVFXLE1BQU1IO1lBQU07UUFDckMsT0FBTztZQUNMRSxPQUFPTixvQkFBb0JJO1FBQzdCO1FBQ0FELE9BQU9WLElBQUksQ0FBQztZQUFDekM7WUFBS3NEO1NBQUs7SUFDekI7SUFDQSxPQUFPO1FBQUVWLE1BQU07UUFBVU87SUFBTztBQUNsQztBQUNBLFNBQVNMLHlCQUF5QkQsZUFBZTtJQUMvQyxPQUFPQSxnQkFBZ0JXLEdBQUcsQ0FBQyxDQUFDLENBQUN0QyxNQUFNRCxZQUFZd0MsRUFBRTtRQUMvQyxJQUFJQyxPQUFPO1FBQ1gsSUFBSUQsTUFBTSxNQUFNO1lBQ2RDLE9BQU8sRUFBRTtZQUNULEtBQUssTUFBTSxDQUFDQyxPQUFPMUQsTUFBTSxJQUFJTCxPQUFPeUQsT0FBTyxDQUFDSSxHQUFJO2dCQUM5QyxJQUFJeEQsVUFBVSxLQUFLLEdBQUc7b0JBQ3BCeUQsS0FBS2pCLElBQUksQ0FBQzt3QkFDUmtCO3dCQUNBOzRCQUFFZixNQUFNOzRCQUFTM0MsT0FBTzJELEtBQUtDLFNBQVMsQ0FBQ3ZELDhEQUFZQSxDQUFDTDt3QkFBUTtxQkFDN0Q7Z0JBQ0g7WUFDRjtRQUNGO1FBQ0EsTUFBTTZELE9BQU83QyxXQUFXa0IsdUJBQXVCO1FBQy9DLElBQUksQ0FBQzJCLE1BQ0gsTUFBTSxJQUFJMUIsTUFDUixnREFBZ0R3QixLQUFLQyxTQUFTLENBQUM1QyxZQUFZLE1BQU07UUFFckYsT0FBTztZQUNMQztZQUNBNEM7WUFDQUo7UUFDRjtJQUNGO0FBQ0Y7QUFDQSxTQUFTSztJQUNQLE1BQU1MLE9BQU85RCxPQUFPeUQsT0FBTyxDQUN6QixJQUFJLENBQUNXLEtBQUssRUFDVlIsR0FBRyxDQUFDLENBQUMsQ0FBQ3RDLE1BQU0rQyxVQUFVLEdBQUs7WUFDM0IvQztZQUNBO2dCQUNFMEIsTUFBTTtnQkFDTjNDLE9BQU8yRCxLQUFLQyxTQUFTLENBQUNJLFVBQVVDLElBQUk7WUFDdEM7U0FDRDtJQUNELE1BQU12QixpQkFBaUI7UUFDckJDLE1BQU07UUFDTjFCLE1BQU0sSUFBSSxDQUFDRSxLQUFLO1FBQ2hCc0M7SUFDRjtJQUNBLE1BQU1iLGtCQUFrQkMseUJBQXlCLElBQUksQ0FBQ04sZ0JBQWdCO0lBQ3RFLE9BQU87UUFDTHRCLE1BQU0sSUFBSSxDQUFDRSxLQUFLO1FBQ2hCdUI7UUFDQUU7UUFDQUUsWUFBWSxDQUFDO1FBQ2IxQixTQUFTMkIsb0JBQW9CLElBQUksQ0FBQ0MsV0FBVztJQUMvQztBQUNGO0FBQ08sU0FBU2tCLGdCQUFnQmpELElBQUk7SUFDbEMsTUFBTWtELE1BQU07UUFDVkMsU0FBUztRQUNUakQsT0FBT0Y7UUFDUDhDLE9BQU8sQ0FBQztRQUNSeEIsa0JBQWtCLEVBQUU7UUFDcEJTLGFBQWEsQ0FBQztRQUNkcUIsa0JBQWtCLENBQUM7UUFDbkJDLFFBQVFSO1FBQ1IvQjtRQUNBLDhFQUE4RTtRQUM5RSxHQUFHLENBQUMsQ0FBQztJQUNQO0lBQ0EsT0FBT29DO0FBQ1Q7QUFDTyxTQUFTSTtJQUNkLE1BQU1KLE1BQU07UUFDVkMsU0FBUztRQUNUN0Isa0JBQWtCLEVBQUU7UUFDcEJTLGFBQWEsQ0FBQztRQUNkc0IsUUFBUTdCO1FBQ1JWO0lBQ0Y7SUFDQSxPQUFPb0M7QUFDVDtBQUNPLFNBQVNLLDRCQUE0QkMsV0FBVztJQUNyRCxPQUFPO1FBQ0wsQ0FBQy9ELHNEQUFlQSxDQUFDLEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRStELFlBQVksQ0FBQztJQUM1RTtBQUNGO0FBQ0EsU0FBU0Msc0JBQXNCQyxJQUFJLEVBQUVyRCxTQUFTO0lBQzVDLE1BQU1DLFVBQVU7UUFDZEMsS0FBSUMsQ0FBQyxFQUFFQyxJQUFJO1lBQ1QsSUFBSSxPQUFPQSxTQUFTLFVBQVU7Z0JBQzVCLE1BQU1DLFdBQVc7dUJBQUlMO29CQUFXSTtpQkFBSztnQkFDckMsT0FBT2dELHNCQUFzQkMsTUFBTWhEO1lBQ3JDLE9BQU8sSUFBSUQsU0FBU2hCLHNEQUFlQSxFQUFFO2dCQUNuQyxJQUFJWSxVQUFVc0QsTUFBTSxHQUFHLEdBQUc7b0JBQ3hCLE1BQU1DLFFBQVE7d0JBQUNGOzJCQUFTckQ7cUJBQVUsQ0FBQ3dELElBQUksQ0FBQztvQkFDeEMsTUFBTSxJQUFJM0MsTUFDUixDQUFDLHlDQUF5QyxFQUFFd0MsS0FBSyx5Q0FBeUMsRUFBRUUsTUFBTSxFQUFFLENBQUM7Z0JBRXpHO2dCQUNBLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxHQUFHdkQsVUFBVXdELElBQUksQ0FBQztZQUN2RCxPQUFPO2dCQUNMLE9BQU8sS0FBSztZQUNkO1FBQ0Y7SUFDRjtJQUNBLE9BQU8sSUFBSWhELE1BQU0sQ0FBQyxHQUFHUDtBQUN2QjtBQUNPLE1BQU13RCxvQkFBb0IsSUFBTUwsc0JBQXNCLGNBQWMsRUFBRSxFQUFFLENBQy9FLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYXNvcl9jbG9uZS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2NvbXBvbmVudHMvaW5kZXguanM/MDYyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19wdWJsaWNGaWVsZCA9IChvYmosIGtleSwgdmFsdWUpID0+IF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG5pbXBvcnQgeyBjb252ZXhUb0pzb24gfSBmcm9tIFwiLi4vLi4vdmFsdWVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4uLy4uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBwZXJmb3JtQXN5bmNTeXNjYWxsIH0gZnJvbSBcIi4uL2ltcGwvc3lzY2FsbC5qc1wiO1xuaW1wb3J0IHtcbiAgZ2V0RnVuY3Rpb25BZGRyZXNzLFxuICBzZXRSZWZlcmVuY2VQYXRoLFxuICB0b1JlZmVyZW5jZVBhdGhcbn0gZnJvbSBcIi4vcGF0aHMuanNcIjtcbmV4cG9ydCB7IGdldEZ1bmN0aW9uQWRkcmVzcyB9IGZyb20gXCIuL3BhdGhzLmpzXCI7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25IYW5kbGUoZnVuY3Rpb25SZWZlcmVuY2UpIHtcbiAgY29uc3QgYWRkcmVzcyA9IGdldEZ1bmN0aW9uQWRkcmVzcyhmdW5jdGlvblJlZmVyZW5jZSk7XG4gIHJldHVybiBhd2FpdCBwZXJmb3JtQXN5bmNTeXNjYWxsKFwiMS4wL2NyZWF0ZUZ1bmN0aW9uSGFuZGxlXCIsIHtcbiAgICAuLi5hZGRyZXNzLFxuICAgIHZlcnNpb25cbiAgfSk7XG59XG5jbGFzcyBJbnN0YWxsZWRDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihkZWZpbml0aW9uLCBuYW1lKSB7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIl9kZWZpbml0aW9uXCIpO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJfbmFtZVwiKTtcbiAgICB0aGlzLl9kZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICBzZXRSZWZlcmVuY2VQYXRoKHRoaXMsIGBfcmVmZXJlbmNlL2NoaWxkQ29tcG9uZW50LyR7bmFtZX1gKTtcbiAgfVxuICBnZXQgZXhwb3J0cygpIHtcbiAgICByZXR1cm4gY3JlYXRlRXhwb3J0cyh0aGlzLl9uYW1lLCBbXSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUV4cG9ydHMobmFtZSwgcGF0aFBhcnRzKSB7XG4gIGNvbnN0IGhhbmRsZXIgPSB7XG4gICAgZ2V0KF8sIHByb3ApIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBuZXdQYXJ0cyA9IFsuLi5wYXRoUGFydHMsIHByb3BdO1xuICAgICAgICByZXR1cm4gY3JlYXRlRXhwb3J0cyhuYW1lLCBuZXdQYXJ0cyk7XG4gICAgICB9IGVsc2UgaWYgKHByb3AgPT09IHRvUmVmZXJlbmNlUGF0aCkge1xuICAgICAgICBsZXQgcmVmZXJlbmNlID0gYF9yZWZlcmVuY2UvY2hpbGRDb21wb25lbnQvJHtuYW1lfWA7XG4gICAgICAgIGZvciAoY29uc3QgcGFydCBvZiBwYXRoUGFydHMpIHtcbiAgICAgICAgICByZWZlcmVuY2UgKz0gYC8ke3BhcnR9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVmZXJlbmNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBuZXcgUHJveHkoe30sIGhhbmRsZXIpO1xufVxuZnVuY3Rpb24gdXNlKGRlZmluaXRpb24sIG9wdGlvbnMpIHtcbiAgY29uc3QgaW1wb3J0ZWRDb21wb25lbnREZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcbiAgaWYgKHR5cGVvZiBpbXBvcnRlZENvbXBvbmVudERlZmluaXRpb24uY29tcG9uZW50RGVmaW5pdGlvblBhdGggIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIkNvbXBvbmVudCBkZWZpbml0aW9uIGRvZXMgbm90IGhhdmUgdGhlIHJlcXVpcmVkIGNvbXBvbmVudERlZmluaXRpb25QYXRoIHByb3BlcnR5LiBUaGlzIGNvZGUgb25seSB3b3JrcyBpbiBDb252ZXggcnVudGltZS5cIlxuICAgICk7XG4gIH1cbiAgY29uc3QgbmFtZSA9IG9wdGlvbnM/Lm5hbWUgfHwgLy8gYWRkZWQgcmVjZW50bHlcbiAgaW1wb3J0ZWRDb21wb25lbnREZWZpbml0aW9uLmRlZmF1bHROYW1lIHx8IC8vIGNhbiBiZSByZW1vdmVkIG9uY2UgYmFja2VuZCBpcyBvdXRcbiAgaW1wb3J0ZWRDb21wb25lbnREZWZpbml0aW9uLmNvbXBvbmVudERlZmluaXRpb25QYXRoLnNwbGl0KFwiL1wiKS5wb3AoKTtcbiAgdGhpcy5fY2hpbGRDb21wb25lbnRzLnB1c2goW25hbWUsIGltcG9ydGVkQ29tcG9uZW50RGVmaW5pdGlvbiwge31dKTtcbiAgcmV0dXJuIG5ldyBJbnN0YWxsZWRDb21wb25lbnQoZGVmaW5pdGlvbiwgbmFtZSk7XG59XG5mdW5jdGlvbiBleHBvcnRBcHBGb3JBbmFseXNpcygpIHtcbiAgY29uc3QgZGVmaW5pdGlvblR5cGUgPSB7IHR5cGU6IFwiYXBwXCIgfTtcbiAgY29uc3QgY2hpbGRDb21wb25lbnRzID0gc2VyaWFsaXplQ2hpbGRDb21wb25lbnRzKHRoaXMuX2NoaWxkQ29tcG9uZW50cyk7XG4gIHJldHVybiB7XG4gICAgZGVmaW5pdGlvblR5cGUsXG4gICAgY2hpbGRDb21wb25lbnRzLFxuICAgIGh0dHBNb3VudHM6IHt9LFxuICAgIGV4cG9ydHM6IHNlcmlhbGl6ZUV4cG9ydFRyZWUodGhpcy5fZXhwb3J0VHJlZSlcbiAgfTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZUV4cG9ydFRyZWUodHJlZSkge1xuICBjb25zdCBicmFuY2ggPSBbXTtcbiAgZm9yIChjb25zdCBba2V5LCBjaGlsZF0gb2YgT2JqZWN0LmVudHJpZXModHJlZSkpIHtcbiAgICBsZXQgbm9kZTtcbiAgICBpZiAodHlwZW9mIGNoaWxkID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBub2RlID0geyB0eXBlOiBcImxlYWZcIiwgbGVhZjogY2hpbGQgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZSA9IHNlcmlhbGl6ZUV4cG9ydFRyZWUoY2hpbGQpO1xuICAgIH1cbiAgICBicmFuY2gucHVzaChba2V5LCBub2RlXSk7XG4gIH1cbiAgcmV0dXJuIHsgdHlwZTogXCJicmFuY2hcIiwgYnJhbmNoIH07XG59XG5mdW5jdGlvbiBzZXJpYWxpemVDaGlsZENvbXBvbmVudHMoY2hpbGRDb21wb25lbnRzKSB7XG4gIHJldHVybiBjaGlsZENvbXBvbmVudHMubWFwKChbbmFtZSwgZGVmaW5pdGlvbiwgcF0pID0+IHtcbiAgICBsZXQgYXJncyA9IG51bGw7XG4gICAgaWYgKHAgIT09IG51bGwpIHtcbiAgICAgIGFyZ3MgPSBbXTtcbiAgICAgIGZvciAoY29uc3QgW25hbWUyLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocCkpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgICAgICBhcmdzLnB1c2goW1xuICAgICAgICAgICAgbmFtZTIsXG4gICAgICAgICAgICB7IHR5cGU6IFwidmFsdWVcIiwgdmFsdWU6IEpTT04uc3RyaW5naWZ5KGNvbnZleFRvSnNvbih2YWx1ZSkpIH1cbiAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwYXRoID0gZGVmaW5pdGlvbi5jb21wb25lbnREZWZpbml0aW9uUGF0aDtcbiAgICBpZiAoIXBhdGgpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwibm8gLmNvbXBvbmVudFBhdGggZm9yIGNvbXBvbmVudCBkZWZpbml0aW9uIFwiICsgSlNPTi5zdHJpbmdpZnkoZGVmaW5pdGlvbiwgbnVsbCwgMilcbiAgICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWUsXG4gICAgICBwYXRoLFxuICAgICAgYXJnc1xuICAgIH07XG4gIH0pO1xufVxuZnVuY3Rpb24gZXhwb3J0Q29tcG9uZW50Rm9yQW5hbHlzaXMoKSB7XG4gIGNvbnN0IGFyZ3MgPSBPYmplY3QuZW50cmllcyhcbiAgICB0aGlzLl9hcmdzXG4gICkubWFwKChbbmFtZSwgdmFsaWRhdG9yXSkgPT4gW1xuICAgIG5hbWUsXG4gICAge1xuICAgICAgdHlwZTogXCJ2YWx1ZVwiLFxuICAgICAgdmFsdWU6IEpTT04uc3RyaW5naWZ5KHZhbGlkYXRvci5qc29uKVxuICAgIH1cbiAgXSk7XG4gIGNvbnN0IGRlZmluaXRpb25UeXBlID0ge1xuICAgIHR5cGU6IFwiY2hpbGRDb21wb25lbnRcIixcbiAgICBuYW1lOiB0aGlzLl9uYW1lLFxuICAgIGFyZ3NcbiAgfTtcbiAgY29uc3QgY2hpbGRDb21wb25lbnRzID0gc2VyaWFsaXplQ2hpbGRDb21wb25lbnRzKHRoaXMuX2NoaWxkQ29tcG9uZW50cyk7XG4gIHJldHVybiB7XG4gICAgbmFtZTogdGhpcy5fbmFtZSxcbiAgICBkZWZpbml0aW9uVHlwZSxcbiAgICBjaGlsZENvbXBvbmVudHMsXG4gICAgaHR0cE1vdW50czoge30sXG4gICAgZXhwb3J0czogc2VyaWFsaXplRXhwb3J0VHJlZSh0aGlzLl9leHBvcnRUcmVlKVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZUNvbXBvbmVudChuYW1lKSB7XG4gIGNvbnN0IHJldCA9IHtcbiAgICBfaXNSb290OiBmYWxzZSxcbiAgICBfbmFtZTogbmFtZSxcbiAgICBfYXJnczoge30sXG4gICAgX2NoaWxkQ29tcG9uZW50czogW10sXG4gICAgX2V4cG9ydFRyZWU6IHt9LFxuICAgIF9vbkluaXRDYWxsYmFja3M6IHt9LFxuICAgIGV4cG9ydDogZXhwb3J0Q29tcG9uZW50Rm9yQW5hbHlzaXMsXG4gICAgdXNlLFxuICAgIC8vIHByZXRlbmQgdG8gY29uZm9ybSB0byBDb21wb25lbnREZWZpbml0aW9uLCB3aGljaCB0ZW1wb3JhcmlseSBleHBlY3RzIF9fYXJnc1xuICAgIC4uLnt9XG4gIH07XG4gIHJldHVybiByZXQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lQXBwKCkge1xuICBjb25zdCByZXQgPSB7XG4gICAgX2lzUm9vdDogdHJ1ZSxcbiAgICBfY2hpbGRDb21wb25lbnRzOiBbXSxcbiAgICBfZXhwb3J0VHJlZToge30sXG4gICAgZXhwb3J0OiBleHBvcnRBcHBGb3JBbmFseXNpcyxcbiAgICB1c2VcbiAgfTtcbiAgcmV0dXJuIHJldDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjdXJyZW50U3lzdGVtVWRmSW5Db21wb25lbnQoY29tcG9uZW50SWQpIHtcbiAgcmV0dXJuIHtcbiAgICBbdG9SZWZlcmVuY2VQYXRoXTogYF9yZWZlcmVuY2UvY3VycmVudFN5c3RlbVVkZkluQ29tcG9uZW50LyR7Y29tcG9uZW50SWR9YFxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQ2hpbGRDb21wb25lbnRzKHJvb3QsIHBhdGhQYXJ0cykge1xuICBjb25zdCBoYW5kbGVyID0ge1xuICAgIGdldChfLCBwcm9wKSB7XG4gICAgICBpZiAodHlwZW9mIHByb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY29uc3QgbmV3UGFydHMgPSBbLi4ucGF0aFBhcnRzLCBwcm9wXTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkQ29tcG9uZW50cyhyb290LCBuZXdQYXJ0cyk7XG4gICAgICB9IGVsc2UgaWYgKHByb3AgPT09IHRvUmVmZXJlbmNlUGF0aCkge1xuICAgICAgICBpZiAocGF0aFBhcnRzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICBjb25zdCBmb3VuZCA9IFtyb290LCAuLi5wYXRoUGFydHNdLmpvaW4oXCIuXCIpO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBBUEkgcGF0aCBpcyBleHBlY3RlZCB0byBiZSBvZiB0aGUgZm9ybSBcXGAke3Jvb3R9LmNoaWxkQ29tcG9uZW50LmZ1bmN0aW9uTmFtZVxcYC4gRm91bmQ6IFxcYCR7Zm91bmR9XFxgYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGBfcmVmZXJlbmNlL2NoaWxkQ29tcG9uZW50L2AgKyBwYXRoUGFydHMuam9pbihcIi9cIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIG5ldyBQcm94eSh7fSwgaGFuZGxlcik7XG59XG5leHBvcnQgY29uc3QgY29tcG9uZW50c0dlbmVyaWMgPSAoKSA9PiBjcmVhdGVDaGlsZENvbXBvbmVudHMoXCJjb21wb25lbnRzXCIsIFtdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19kZWZOb3JtYWxQcm9wIiwib2JqIiwia2V5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfX3B1YmxpY0ZpZWxkIiwiY29udmV4VG9Kc29uIiwidmVyc2lvbiIsInBlcmZvcm1Bc3luY1N5c2NhbGwiLCJnZXRGdW5jdGlvbkFkZHJlc3MiLCJzZXRSZWZlcmVuY2VQYXRoIiwidG9SZWZlcmVuY2VQYXRoIiwiY3JlYXRlRnVuY3Rpb25IYW5kbGUiLCJmdW5jdGlvblJlZmVyZW5jZSIsImFkZHJlc3MiLCJJbnN0YWxsZWRDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsImRlZmluaXRpb24iLCJuYW1lIiwiX2RlZmluaXRpb24iLCJfbmFtZSIsImV4cG9ydHMiLCJjcmVhdGVFeHBvcnRzIiwicGF0aFBhcnRzIiwiaGFuZGxlciIsImdldCIsIl8iLCJwcm9wIiwibmV3UGFydHMiLCJyZWZlcmVuY2UiLCJwYXJ0IiwiUHJveHkiLCJ1c2UiLCJvcHRpb25zIiwiaW1wb3J0ZWRDb21wb25lbnREZWZpbml0aW9uIiwiY29tcG9uZW50RGVmaW5pdGlvblBhdGgiLCJFcnJvciIsImRlZmF1bHROYW1lIiwic3BsaXQiLCJwb3AiLCJfY2hpbGRDb21wb25lbnRzIiwicHVzaCIsImV4cG9ydEFwcEZvckFuYWx5c2lzIiwiZGVmaW5pdGlvblR5cGUiLCJ0eXBlIiwiY2hpbGRDb21wb25lbnRzIiwic2VyaWFsaXplQ2hpbGRDb21wb25lbnRzIiwiaHR0cE1vdW50cyIsInNlcmlhbGl6ZUV4cG9ydFRyZWUiLCJfZXhwb3J0VHJlZSIsInRyZWUiLCJicmFuY2giLCJjaGlsZCIsImVudHJpZXMiLCJub2RlIiwibGVhZiIsIm1hcCIsInAiLCJhcmdzIiwibmFtZTIiLCJKU09OIiwic3RyaW5naWZ5IiwicGF0aCIsImV4cG9ydENvbXBvbmVudEZvckFuYWx5c2lzIiwiX2FyZ3MiLCJ2YWxpZGF0b3IiLCJqc29uIiwiZGVmaW5lQ29tcG9uZW50IiwicmV0IiwiX2lzUm9vdCIsIl9vbkluaXRDYWxsYmFja3MiLCJleHBvcnQiLCJkZWZpbmVBcHAiLCJjdXJyZW50U3lzdGVtVWRmSW5Db21wb25lbnQiLCJjb21wb25lbnRJZCIsImNyZWF0ZUNoaWxkQ29tcG9uZW50cyIsInJvb3QiLCJsZW5ndGgiLCJmb3VuZCIsImpvaW4iLCJjb21wb25lbnRzR2VuZXJpYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/components/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/components/paths.js":
/*!*****************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/components/paths.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractReferencePath: () => (/* binding */ extractReferencePath),\n/* harmony export */   getFunctionAddress: () => (/* binding */ getFunctionAddress),\n/* harmony export */   isFunctionHandle: () => (/* binding */ isFunctionHandle),\n/* harmony export */   setReferencePath: () => (/* binding */ setReferencePath),\n/* harmony export */   toReferencePath: () => (/* binding */ toReferencePath)\n/* harmony export */ });\n/* harmony import */ var _functionName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functionName.js */ \"(ssr)/./node_modules/convex/dist/esm/server/functionName.js\");\n\n\nconst toReferencePath = Symbol.for(\"toReferencePath\");\nfunction setReferencePath(obj, value) {\n    obj[toReferencePath] = value;\n}\nfunction extractReferencePath(reference) {\n    return reference[toReferencePath] ?? null;\n}\nfunction isFunctionHandle(s) {\n    return s.startsWith(\"function://\");\n}\nfunction getFunctionAddress(functionReference) {\n    let functionAddress;\n    if (typeof functionReference === \"string\") {\n        if (isFunctionHandle(functionReference)) {\n            functionAddress = {\n                functionHandle: functionReference\n            };\n        } else {\n            functionAddress = {\n                name: functionReference\n            };\n        }\n    } else if (functionReference[_functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName]) {\n        functionAddress = {\n            name: functionReference[_functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName]\n        };\n    } else {\n        const referencePath = extractReferencePath(functionReference);\n        if (!referencePath) {\n            throw new Error(`${functionReference} is not a functionReference`);\n        }\n        functionAddress = {\n            reference: referencePath\n        };\n    }\n    return functionAddress;\n} //# sourceMappingURL=paths.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9jb21wb25lbnRzL3BhdGhzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFhO0FBQ3FDO0FBQzNDLE1BQU1DLGtCQUFrQkMsT0FBT0MsR0FBRyxDQUFDLG1CQUFtQjtBQUN0RCxTQUFTQyxpQkFBaUJDLEdBQUcsRUFBRUMsS0FBSztJQUN6Q0QsR0FBRyxDQUFDSixnQkFBZ0IsR0FBR0s7QUFDekI7QUFDTyxTQUFTQyxxQkFBcUJDLFNBQVM7SUFDNUMsT0FBT0EsU0FBUyxDQUFDUCxnQkFBZ0IsSUFBSTtBQUN2QztBQUNPLFNBQVNRLGlCQUFpQkMsQ0FBQztJQUNoQyxPQUFPQSxFQUFFQyxVQUFVLENBQUM7QUFDdEI7QUFDTyxTQUFTQyxtQkFBbUJDLGlCQUFpQjtJQUNsRCxJQUFJQztJQUNKLElBQUksT0FBT0Qsc0JBQXNCLFVBQVU7UUFDekMsSUFBSUosaUJBQWlCSSxvQkFBb0I7WUFDdkNDLGtCQUFrQjtnQkFBRUMsZ0JBQWdCRjtZQUFrQjtRQUN4RCxPQUFPO1lBQ0xDLGtCQUFrQjtnQkFBRUUsTUFBTUg7WUFBa0I7UUFDOUM7SUFDRixPQUFPLElBQUlBLGlCQUFpQixDQUFDYiwwREFBWUEsQ0FBQyxFQUFFO1FBQzFDYyxrQkFBa0I7WUFBRUUsTUFBTUgsaUJBQWlCLENBQUNiLDBEQUFZQSxDQUFDO1FBQUM7SUFDNUQsT0FBTztRQUNMLE1BQU1pQixnQkFBZ0JWLHFCQUFxQk07UUFDM0MsSUFBSSxDQUFDSSxlQUFlO1lBQ2xCLE1BQU0sSUFBSUMsTUFBTSxDQUFDLEVBQUVMLGtCQUFrQiwyQkFBMkIsQ0FBQztRQUNuRTtRQUNBQyxrQkFBa0I7WUFBRU4sV0FBV1M7UUFBYztJQUMvQztJQUNBLE9BQU9IO0FBQ1QsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmFzb3JfY2xvbmUvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9jb21wb25lbnRzL3BhdGhzLmpzPzAyZTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBmdW5jdGlvbk5hbWUgfSBmcm9tIFwiLi4vZnVuY3Rpb25OYW1lLmpzXCI7XG5leHBvcnQgY29uc3QgdG9SZWZlcmVuY2VQYXRoID0gU3ltYm9sLmZvcihcInRvUmVmZXJlbmNlUGF0aFwiKTtcbmV4cG9ydCBmdW5jdGlvbiBzZXRSZWZlcmVuY2VQYXRoKG9iaiwgdmFsdWUpIHtcbiAgb2JqW3RvUmVmZXJlbmNlUGF0aF0gPSB2YWx1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0UmVmZXJlbmNlUGF0aChyZWZlcmVuY2UpIHtcbiAgcmV0dXJuIHJlZmVyZW5jZVt0b1JlZmVyZW5jZVBhdGhdID8/IG51bGw7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbkhhbmRsZShzKSB7XG4gIHJldHVybiBzLnN0YXJ0c1dpdGgoXCJmdW5jdGlvbjovL1wiKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRGdW5jdGlvbkFkZHJlc3MoZnVuY3Rpb25SZWZlcmVuY2UpIHtcbiAgbGV0IGZ1bmN0aW9uQWRkcmVzcztcbiAgaWYgKHR5cGVvZiBmdW5jdGlvblJlZmVyZW5jZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIGlmIChpc0Z1bmN0aW9uSGFuZGxlKGZ1bmN0aW9uUmVmZXJlbmNlKSkge1xuICAgICAgZnVuY3Rpb25BZGRyZXNzID0geyBmdW5jdGlvbkhhbmRsZTogZnVuY3Rpb25SZWZlcmVuY2UgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnVuY3Rpb25BZGRyZXNzID0geyBuYW1lOiBmdW5jdGlvblJlZmVyZW5jZSB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChmdW5jdGlvblJlZmVyZW5jZVtmdW5jdGlvbk5hbWVdKSB7XG4gICAgZnVuY3Rpb25BZGRyZXNzID0geyBuYW1lOiBmdW5jdGlvblJlZmVyZW5jZVtmdW5jdGlvbk5hbWVdIH07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcmVmZXJlbmNlUGF0aCA9IGV4dHJhY3RSZWZlcmVuY2VQYXRoKGZ1bmN0aW9uUmVmZXJlbmNlKTtcbiAgICBpZiAoIXJlZmVyZW5jZVBhdGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtmdW5jdGlvblJlZmVyZW5jZX0gaXMgbm90IGEgZnVuY3Rpb25SZWZlcmVuY2VgKTtcbiAgICB9XG4gICAgZnVuY3Rpb25BZGRyZXNzID0geyByZWZlcmVuY2U6IHJlZmVyZW5jZVBhdGggfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb25BZGRyZXNzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGF0aHMuanMubWFwXG4iXSwibmFtZXMiOlsiZnVuY3Rpb25OYW1lIiwidG9SZWZlcmVuY2VQYXRoIiwiU3ltYm9sIiwiZm9yIiwic2V0UmVmZXJlbmNlUGF0aCIsIm9iaiIsInZhbHVlIiwiZXh0cmFjdFJlZmVyZW5jZVBhdGgiLCJyZWZlcmVuY2UiLCJpc0Z1bmN0aW9uSGFuZGxlIiwicyIsInN0YXJ0c1dpdGgiLCJnZXRGdW5jdGlvbkFkZHJlc3MiLCJmdW5jdGlvblJlZmVyZW5jZSIsImZ1bmN0aW9uQWRkcmVzcyIsImZ1bmN0aW9uSGFuZGxlIiwibmFtZSIsInJlZmVyZW5jZVBhdGgiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/components/paths.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/cron.js":
/*!*****************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/cron.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Crons: () => (/* binding */ Crons),\n/* harmony export */   cronJobs: () => (/* binding */ cronJobs)\n/* harmony export */ });\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../server/api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\nconst DAYS_OF_WEEK = [\n    \"sunday\",\n    \"monday\",\n    \"tuesday\",\n    \"wednesday\",\n    \"thursday\",\n    \"friday\",\n    \"saturday\"\n];\nconst cronJobs = ()=>new Crons();\nfunction validateIntervalNumber(n) {\n    if (!Number.isInteger(n) || n <= 0) {\n        throw new Error(\"Interval must be an integer greater than 0\");\n    }\n}\nfunction validatedDayOfMonth(n) {\n    if (!Number.isInteger(n) || n < 1 || n > 31) {\n        throw new Error(\"Day of month must be an integer from 1 to 31\");\n    }\n    return n;\n}\nfunction validatedDayOfWeek(s) {\n    if (typeof s !== \"string\" || !DAYS_OF_WEEK.includes(s)) {\n        throw new Error('Day of week must be a string like \"monday\".');\n    }\n    return s;\n}\nfunction validatedHourOfDay(n) {\n    if (!Number.isInteger(n) || n < 0 || n > 23) {\n        throw new Error(\"Hour of day must be an integer from 0 to 23\");\n    }\n    return n;\n}\nfunction validatedMinuteOfHour(n) {\n    if (!Number.isInteger(n) || n < 0 || n > 59) {\n        throw new Error(\"Minute of hour must be an integer from 0 to 59\");\n    }\n    return n;\n}\nfunction validatedCronString(s) {\n    return s;\n}\nfunction validatedCronIdentifier(s) {\n    if (!s.match(/^[ -~]*$/)) {\n        throw new Error(`Invalid cron identifier ${s}: use ASCII letters that are not control characters`);\n    }\n    return s;\n}\nclass Crons {\n    constructor(){\n        __publicField(this, \"crons\");\n        __publicField(this, \"isCrons\");\n        this.isCrons = true;\n        this.crons = {};\n    }\n    /** @internal */ schedule(cronIdentifier, schedule, functionReference, args) {\n        const cronArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args);\n        validatedCronIdentifier(cronIdentifier);\n        if (cronIdentifier in this.crons) {\n            throw new Error(`Cron identifier registered twice: ${cronIdentifier}`);\n        }\n        this.crons[cronIdentifier] = {\n            name: (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(functionReference),\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_2__.convexToJson)(cronArgs)\n            ],\n            schedule\n        };\n    }\n    /**\n   * Schedule a mutation or action to run at some interval.\n   *\n   * ```js\n   * crons.interval(\"Clear presence data\", {seconds: 30}, api.presence.clear);\n   * ```\n   *\n   * @param identifier - A unique name for this scheduled job.\n   * @param schedule - The time between runs for this scheduled job.\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   * @param args - The arguments to the function.\n   */ interval(cronIdentifier, schedule, functionReference, ...args) {\n        const s = schedule;\n        const hasSeconds = +(\"seconds\" in s && s.seconds !== void 0);\n        const hasMinutes = +(\"minutes\" in s && s.minutes !== void 0);\n        const hasHours = +(\"hours\" in s && s.hours !== void 0);\n        const total = hasSeconds + hasMinutes + hasHours;\n        if (total !== 1) {\n            throw new Error(\"Must specify one of seconds, minutes, or hours\");\n        }\n        if (hasSeconds) {\n            validateIntervalNumber(schedule.seconds);\n        } else if (hasMinutes) {\n            validateIntervalNumber(schedule.minutes);\n        } else if (hasHours) {\n            validateIntervalNumber(schedule.hours);\n        }\n        this.schedule(cronIdentifier, {\n            ...schedule,\n            type: \"interval\"\n        }, functionReference, ...args);\n    }\n    /**\n   * Schedule a mutation or action to run on an hourly basis.\n   *\n   * ```js\n   * crons.hourly(\n   *   \"Reset high scores\",\n   *   {\n   *     minuteUTC: 30,\n   *   },\n   *   api.scores.reset\n   * )\n   * ```\n   *\n   * @param cronIdentifier - A unique name for this scheduled job.\n   * @param schedule - What time (UTC) each day to run this function.\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   * @param args - The arguments to the function.\n   */ hourly(cronIdentifier, schedule, functionReference, ...args) {\n        const minuteUTC = validatedMinuteOfHour(schedule.minuteUTC);\n        this.schedule(cronIdentifier, {\n            minuteUTC,\n            type: \"hourly\"\n        }, functionReference, ...args);\n    }\n    /**\n   * Schedule a mutation or action to run on a daily basis.\n   *\n   * ```js\n   * crons.daily(\n   *   \"Reset high scores\",\n   *   {\n   *     hourUTC: 17, // (9:30am Pacific/10:30am Daylight Savings Pacific)\n   *     minuteUTC: 30,\n   *   },\n   *   api.scores.reset\n   * )\n   * ```\n   *\n   * @param cronIdentifier - A unique name for this scheduled job.\n   * @param schedule - What time (UTC) each day to run this function.\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   * @param args - The arguments to the function.\n   */ daily(cronIdentifier, schedule, functionReference, ...args) {\n        const hourUTC = validatedHourOfDay(schedule.hourUTC);\n        const minuteUTC = validatedMinuteOfHour(schedule.minuteUTC);\n        this.schedule(cronIdentifier, {\n            hourUTC,\n            minuteUTC,\n            type: \"daily\"\n        }, functionReference, ...args);\n    }\n    /**\n   * Schedule a mutation or action to run on a weekly basis.\n   *\n   * ```js\n   * crons.weekly(\n   *   \"Weekly re-engagement email\",\n   *   {\n   *     dayOfWeek: \"Tuesday\",\n   *     hourUTC: 17, // (9:30am Pacific/10:30am Daylight Savings Pacific)\n   *     minuteUTC: 30,\n   *   },\n   *   api.emails.send\n   * )\n   * ```\n   *\n   * @param cronIdentifier - A unique name for this scheduled job.\n   * @param schedule - What day and time (UTC) each week to run this function.\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   */ weekly(cronIdentifier, schedule, functionReference, ...args) {\n        const dayOfWeek = validatedDayOfWeek(schedule.dayOfWeek);\n        const hourUTC = validatedHourOfDay(schedule.hourUTC);\n        const minuteUTC = validatedMinuteOfHour(schedule.minuteUTC);\n        this.schedule(cronIdentifier, {\n            dayOfWeek,\n            hourUTC,\n            minuteUTC,\n            type: \"weekly\"\n        }, functionReference, ...args);\n    }\n    /**\n   * Schedule a mutation or action to run on a monthly basis.\n   *\n   * Note that some months have fewer days than others, so e.g. a function\n   * scheduled to run on the 30th will not run in February.\n   *\n   * ```js\n   * crons.monthly(\n   *   \"Bill customers at \",\n   *   {\n   *     hourUTC: 17, // (9:30am Pacific/10:30am Daylight Savings Pacific)\n   *     minuteUTC: 30,\n   *     day: 1,\n   *   },\n   *   api.billing.billCustomers\n   * )\n   * ```\n   *\n   * @param cronIdentifier - A unique name for this scheduled job.\n   * @param schedule - What day and time (UTC) each month to run this function.\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   * @param args - The arguments to the function.\n   */ monthly(cronIdentifier, schedule, functionReference, ...args) {\n        const day = validatedDayOfMonth(schedule.day);\n        const hourUTC = validatedHourOfDay(schedule.hourUTC);\n        const minuteUTC = validatedMinuteOfHour(schedule.minuteUTC);\n        this.schedule(cronIdentifier, {\n            day,\n            hourUTC,\n            minuteUTC,\n            type: \"monthly\"\n        }, functionReference, ...args);\n    }\n    /**\n   * Schedule a mutation or action to run on a recurring basis.\n   *\n   * Like the unix command `cron`, Sunday is 0, Monday is 1, etc.\n   *\n   * ```\n   *  ┌─ minute (0 - 59)\n   *  │ ┌─ hour (0 - 23)\n   *  │ │ ┌─ day of the month (1 - 31)\n   *  │ │ │ ┌─ month (1 - 12)\n   *  │ │ │ │ ┌─ day of the week (0 - 6) (Sunday to Saturday)\n   * \"* * * * *\"\n   * ```\n   *\n   * @param cronIdentifier - A unique name for this scheduled job.\n   * @param cron - Cron string like `\"15 7 * * *\"` (Every day at 7:15 UTC)\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   * @param args - The arguments to the function.\n   */ cron(cronIdentifier, cron, functionReference, ...args) {\n        const c = validatedCronString(cron);\n        this.schedule(cronIdentifier, {\n            cron: c,\n            type: \"cron\"\n        }, functionReference, ...args);\n    }\n    /** @internal */ export() {\n        return JSON.stringify(this.crons);\n    }\n} //# sourceMappingURL=cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/cron.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/database.js":
/*!*********************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/database.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n //# sourceMappingURL=database.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9kYXRhYmFzZS5qcyIsIm1hcHBpbmdzIjoiO0FBQWEsQ0FDYixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmFzb3JfY2xvbmUvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9kYXRhYmFzZS5qcz9jOWE3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YWJhc2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/database.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/filter_builder.js":
/*!***************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/filter_builder.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Expression: () => (/* binding */ Expression)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nclass Expression {\n    /**\n   * @internal\n   */ constructor(){\n        // Property for nominal type support.\n        __publicField(this, \"_isExpression\");\n        // Property to distinguish expressions by the type they resolve to.\n        __publicField(this, \"_value\");\n    }\n} //# sourceMappingURL=filter_builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9maWx0ZXJfYnVpbGRlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWE7QUFDYixJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLGtCQUFrQixDQUFDQyxLQUFLQyxLQUFLQyxRQUFVRCxPQUFPRCxNQUFNSixVQUFVSSxLQUFLQyxLQUFLO1FBQUVFLFlBQVk7UUFBTUMsY0FBYztRQUFNQyxVQUFVO1FBQU1IO0lBQU0sS0FBS0YsR0FBRyxDQUFDQyxJQUFJLEdBQUdDO0FBQzFKLElBQUlJLGdCQUFnQixDQUFDTixLQUFLQyxLQUFLQyxRQUFVSCxnQkFBZ0JDLEtBQUssT0FBT0MsUUFBUSxXQUFXQSxNQUFNLEtBQUtBLEtBQUtDO0FBQ2pHLE1BQU1LO0lBQ1g7O0dBRUMsR0FDREMsYUFBYztRQUNaLHFDQUFxQztRQUNyQ0YsY0FBYyxJQUFJLEVBQUU7UUFDcEIsbUVBQW1FO1FBQ25FQSxjQUFjLElBQUksRUFBRTtJQUN0QjtBQUNGLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhc29yX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9zZXJ2ZXIvZmlsdGVyX2J1aWxkZXIuanM/YmMyZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19wdWJsaWNGaWVsZCA9IChvYmosIGtleSwgdmFsdWUpID0+IF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvbiB7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIFByb3BlcnR5IGZvciBub21pbmFsIHR5cGUgc3VwcG9ydC5cbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiX2lzRXhwcmVzc2lvblwiKTtcbiAgICAvLyBQcm9wZXJ0eSB0byBkaXN0aW5ndWlzaCBleHByZXNzaW9ucyBieSB0aGUgdHlwZSB0aGV5IHJlc29sdmUgdG8uXG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIl92YWx1ZVwiKTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyX2J1aWxkZXIuanMubWFwXG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fcHVibGljRmllbGQiLCJFeHByZXNzaW9uIiwiY29uc3RydWN0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/filter_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/functionName.js":
/*!*************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/functionName.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   functionName: () => (/* binding */ functionName)\n/* harmony export */ });\n\nconst functionName = Symbol.for(\"functionName\"); //# sourceMappingURL=functionName.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9mdW5jdGlvbk5hbWUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFhO0FBQ04sTUFBTUEsZUFBZUMsT0FBT0MsR0FBRyxDQUFDLGdCQUFnQixDQUN2RCx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmFzb3JfY2xvbmUvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9mdW5jdGlvbk5hbWUuanM/N2IyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydCBjb25zdCBmdW5jdGlvbk5hbWUgPSBTeW1ib2wuZm9yKFwiZnVuY3Rpb25OYW1lXCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnVuY3Rpb25OYW1lLmpzLm1hcFxuIl0sIm5hbWVzIjpbImZ1bmN0aW9uTmFtZSIsIlN5bWJvbCIsImZvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/functionName.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/actions_impl.js":
/*!******************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/actions_impl.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setupActionCalls: () => (/* binding */ setupActionCalls)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _components_paths_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/paths.js */ \"(ssr)/./node_modules/convex/dist/esm/server/components/paths.js\");\n\n\n\n\n\n\nfunction syscallArgs(requestId, functionReference, args) {\n    const address = (0,_components_paths_js__WEBPACK_IMPORTED_MODULE_4__.getFunctionAddress)(functionReference);\n    return {\n        ...address,\n        args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)((0,_common_index_js__WEBPACK_IMPORTED_MODULE_3__.parseArgs)(args)),\n        version: _index_js__WEBPACK_IMPORTED_MODULE_1__.version,\n        requestId\n    };\n}\nfunction setupActionCalls(requestId) {\n    return {\n        runQuery: async (query, args)=>{\n            const result = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/actions/query\", syscallArgs(requestId, query, args));\n            return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(result);\n        },\n        runMutation: async (mutation, args)=>{\n            const result = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/actions/mutation\", syscallArgs(requestId, mutation, args));\n            return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(result);\n        },\n        runAction: async (action, args)=>{\n            const result = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/actions/action\", syscallArgs(requestId, action, args));\n            return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(result);\n        }\n    };\n} //# sourceMappingURL=actions_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL2FjdGlvbnNfaW1wbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBYTtBQUNzRDtBQUMxQjtBQUNVO0FBQ0Q7QUFDVTtBQUM1RCxTQUFTTSxZQUFZQyxTQUFTLEVBQUVDLGlCQUFpQixFQUFFQyxJQUFJO0lBQ3JELE1BQU1DLFVBQVVMLHdFQUFrQkEsQ0FBQ0c7SUFDbkMsT0FBTztRQUNMLEdBQUdFLE9BQU87UUFDVkQsTUFBTVQsOERBQVlBLENBQUNJLDJEQUFTQSxDQUFDSztRQUM3QlAsT0FBT0EsZ0RBQUFBO1FBQ1BLO0lBQ0Y7QUFDRjtBQUNPLFNBQVNJLGlCQUFpQkosU0FBUztJQUN4QyxPQUFPO1FBQ0xLLFVBQVUsT0FBT0MsT0FBT0o7WUFDdEIsTUFBTUssU0FBUyxNQUFNWCxnRUFBbUJBLENBQ3RDLHFCQUNBRyxZQUFZQyxXQUFXTSxPQUFPSjtZQUVoQyxPQUFPUiw4REFBWUEsQ0FBQ2E7UUFDdEI7UUFDQUMsYUFBYSxPQUFPQyxVQUFVUDtZQUM1QixNQUFNSyxTQUFTLE1BQU1YLGdFQUFtQkEsQ0FDdEMsd0JBQ0FHLFlBQVlDLFdBQVdTLFVBQVVQO1lBRW5DLE9BQU9SLDhEQUFZQSxDQUFDYTtRQUN0QjtRQUNBRyxXQUFXLE9BQU9DLFFBQVFUO1lBQ3hCLE1BQU1LLFNBQVMsTUFBTVgsZ0VBQW1CQSxDQUN0QyxzQkFDQUcsWUFBWUMsV0FBV1csUUFBUVQ7WUFFakMsT0FBT1IsOERBQVlBLENBQUNhO1FBQ3RCO0lBQ0Y7QUFDRixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYXNvcl9jbG9uZS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvYWN0aW9uc19pbXBsLmpzPzAzYzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBjb252ZXhUb0pzb24sIGpzb25Ub0NvbnZleCB9IGZyb20gXCIuLi8uLi92YWx1ZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi4vLi4vaW5kZXguanNcIjtcbmltcG9ydCB7IHBlcmZvcm1Bc3luY1N5c2NhbGwgfSBmcm9tIFwiLi9zeXNjYWxsLmpzXCI7XG5pbXBvcnQgeyBwYXJzZUFyZ3MgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXRGdW5jdGlvbkFkZHJlc3MgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9wYXRocy5qc1wiO1xuZnVuY3Rpb24gc3lzY2FsbEFyZ3MocmVxdWVzdElkLCBmdW5jdGlvblJlZmVyZW5jZSwgYXJncykge1xuICBjb25zdCBhZGRyZXNzID0gZ2V0RnVuY3Rpb25BZGRyZXNzKGZ1bmN0aW9uUmVmZXJlbmNlKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5hZGRyZXNzLFxuICAgIGFyZ3M6IGNvbnZleFRvSnNvbihwYXJzZUFyZ3MoYXJncykpLFxuICAgIHZlcnNpb24sXG4gICAgcmVxdWVzdElkXG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0dXBBY3Rpb25DYWxscyhyZXF1ZXN0SWQpIHtcbiAgcmV0dXJuIHtcbiAgICBydW5RdWVyeTogYXN5bmMgKHF1ZXJ5LCBhcmdzKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwZXJmb3JtQXN5bmNTeXNjYWxsKFxuICAgICAgICBcIjEuMC9hY3Rpb25zL3F1ZXJ5XCIsXG4gICAgICAgIHN5c2NhbGxBcmdzKHJlcXVlc3RJZCwgcXVlcnksIGFyZ3MpXG4gICAgICApO1xuICAgICAgcmV0dXJuIGpzb25Ub0NvbnZleChyZXN1bHQpO1xuICAgIH0sXG4gICAgcnVuTXV0YXRpb246IGFzeW5jIChtdXRhdGlvbiwgYXJncykgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcbiAgICAgICAgXCIxLjAvYWN0aW9ucy9tdXRhdGlvblwiLFxuICAgICAgICBzeXNjYWxsQXJncyhyZXF1ZXN0SWQsIG11dGF0aW9uLCBhcmdzKVxuICAgICAgKTtcbiAgICAgIHJldHVybiBqc29uVG9Db252ZXgocmVzdWx0KTtcbiAgICB9LFxuICAgIHJ1bkFjdGlvbjogYXN5bmMgKGFjdGlvbiwgYXJncykgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcbiAgICAgICAgXCIxLjAvYWN0aW9ucy9hY3Rpb25cIixcbiAgICAgICAgc3lzY2FsbEFyZ3MocmVxdWVzdElkLCBhY3Rpb24sIGFyZ3MpXG4gICAgICApO1xuICAgICAgcmV0dXJuIGpzb25Ub0NvbnZleChyZXN1bHQpO1xuICAgIH1cbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjdGlvbnNfaW1wbC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJjb252ZXhUb0pzb24iLCJqc29uVG9Db252ZXgiLCJ2ZXJzaW9uIiwicGVyZm9ybUFzeW5jU3lzY2FsbCIsInBhcnNlQXJncyIsImdldEZ1bmN0aW9uQWRkcmVzcyIsInN5c2NhbGxBcmdzIiwicmVxdWVzdElkIiwiZnVuY3Rpb25SZWZlcmVuY2UiLCJhcmdzIiwiYWRkcmVzcyIsInNldHVwQWN0aW9uQ2FsbHMiLCJydW5RdWVyeSIsInF1ZXJ5IiwicmVzdWx0IiwicnVuTXV0YXRpb24iLCJtdXRhdGlvbiIsInJ1bkFjdGlvbiIsImFjdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/actions_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/authentication_impl.js":
/*!*************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/authentication_impl.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setupAuth: () => (/* binding */ setupAuth)\n/* harmony export */ });\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n\n\nfunction setupAuth(requestId) {\n    return {\n        getUserIdentity: async ()=>{\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_0__.performAsyncSyscall)(\"1.0/getUserIdentity\", {\n                requestId\n            });\n        }\n    };\n} //# sourceMappingURL=authentication_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL2F1dGhlbnRpY2F0aW9uX2ltcGwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBYTtBQUNzQztBQUM1QyxTQUFTQyxVQUFVQyxTQUFTO0lBQ2pDLE9BQU87UUFDTEMsaUJBQWlCO1lBQ2YsT0FBTyxNQUFNSCxnRUFBbUJBLENBQUMsdUJBQXVCO2dCQUN0REU7WUFDRjtRQUNGO0lBQ0Y7QUFDRixFQUNBLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYXNvcl9jbG9uZS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvYXV0aGVudGljYXRpb25faW1wbC5qcz82ODk0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgcGVyZm9ybUFzeW5jU3lzY2FsbCB9IGZyb20gXCIuL3N5c2NhbGwuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBzZXR1cEF1dGgocmVxdWVzdElkKSB7XG4gIHJldHVybiB7XG4gICAgZ2V0VXNlcklkZW50aXR5OiBhc3luYyAoKSA9PiB7XG4gICAgICByZXR1cm4gYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9nZXRVc2VySWRlbnRpdHlcIiwge1xuICAgICAgICByZXF1ZXN0SWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGhlbnRpY2F0aW9uX2ltcGwuanMubWFwXG4iXSwibmFtZXMiOlsicGVyZm9ybUFzeW5jU3lzY2FsbCIsInNldHVwQXV0aCIsInJlcXVlc3RJZCIsImdldFVzZXJJZGVudGl0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/authentication_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/database_impl.js":
/*!*******************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/database_impl.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setupReader: () => (/* binding */ setupReader),\n/* harmony export */   setupWriter: () => (/* binding */ setupWriter)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n/* harmony import */ var _query_impl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/query_impl.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/validate.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../values/value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n\n\n\n\n\n\n\nasync function get(id, isSystem) {\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(id, 1, \"get\", \"id\");\n    if (typeof id !== \"string\") {\n        throw new Error(`Invalid argument \\`id\\` for \\`db.get\\`, expected string but got '${typeof id}': ${id}`);\n    }\n    const args = {\n        id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id),\n        isSystem,\n        version: _index_js__WEBPACK_IMPORTED_MODULE_4__.version\n    };\n    const syscallJSON = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/get\", args);\n    return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(syscallJSON);\n}\nfunction setupReader() {\n    const reader = (isSystem = false)=>{\n        return {\n            get: async (id)=>{\n                return await get(id, isSystem);\n            },\n            query: (tableName)=>{\n                return new TableReader(tableName, isSystem).query();\n            },\n            normalizeId: (tableName, id)=>{\n                (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(tableName, 1, \"normalizeId\", \"tableName\");\n                (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(id, 2, \"normalizeId\", \"id\");\n                const accessingSystemTable = tableName.startsWith(\"_\");\n                if (accessingSystemTable !== isSystem) {\n                    throw new Error(`${accessingSystemTable ? \"System\" : \"User\"} tables can only be accessed from db.${isSystem ? \"\" : \"system.\"}normalizeId().`);\n                }\n                const syscallJSON = (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performSyscall)(\"1.0/db/normalizeId\", {\n                    table: tableName,\n                    idString: id\n                });\n                const syscallResult = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(syscallJSON);\n                return syscallResult.id;\n            },\n            // We set the system reader on the next line\n            system: null,\n            table: (tableName)=>{\n                return new TableReader(tableName, isSystem);\n            }\n        };\n    };\n    const { system: _, ...rest } = reader(true);\n    const r = reader();\n    r.system = rest;\n    return r;\n}\nasync function insert(tableName, value) {\n    if (tableName.startsWith(\"_\")) {\n        throw new Error(\"System tables (prefixed with `_`) are read-only.\");\n    }\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(tableName, 1, \"insert\", \"table\");\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(value, 2, \"insert\", \"value\");\n    const syscallJSON = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/insert\", {\n        table: tableName,\n        value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(value)\n    });\n    const syscallResult = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(syscallJSON);\n    return syscallResult._id;\n}\nasync function patch(id, value) {\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(id, 1, \"patch\", \"id\");\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(value, 2, \"patch\", \"value\");\n    await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/shallowMerge\", {\n        id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id),\n        value: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_5__.patchValueToJson)(value)\n    });\n}\nasync function replace(id, value) {\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(id, 1, \"replace\", \"id\");\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(value, 2, \"replace\", \"value\");\n    await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/replace\", {\n        id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id),\n        value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(value)\n    });\n}\nasync function delete_(id) {\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(id, 1, \"delete\", \"id\");\n    await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/remove\", {\n        id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id)\n    });\n}\nfunction setupWriter() {\n    const reader = setupReader();\n    return {\n        get: reader.get,\n        query: reader.query,\n        normalizeId: reader.normalizeId,\n        system: reader.system,\n        insert: async (table, value)=>{\n            return await insert(table, value);\n        },\n        patch: async (id, value)=>{\n            return await patch(id, value);\n        },\n        replace: async (id, value)=>{\n            return await replace(id, value);\n        },\n        delete: async (id)=>{\n            return await delete_(id);\n        },\n        table: (tableName)=>{\n            return new TableWriter(tableName, false);\n        }\n    };\n}\nclass TableReader {\n    constructor(tableName, isSystem){\n        this.tableName = tableName;\n        this.isSystem = isSystem;\n    }\n    async get(id) {\n        return get(id, this.isSystem);\n    }\n    query() {\n        const accessingSystemTable = this.tableName.startsWith(\"_\");\n        if (accessingSystemTable !== this.isSystem) {\n            throw new Error(`${accessingSystemTable ? \"System\" : \"User\"} tables can only be accessed from db.${this.isSystem ? \"\" : \"system.\"}query().`);\n        }\n        return new _query_impl_js__WEBPACK_IMPORTED_MODULE_2__.QueryInitializerImpl(this.tableName);\n    }\n}\nclass TableWriter extends TableReader {\n    async insert(value) {\n        return insert(this.tableName, value);\n    }\n    async patch(id, value) {\n        return patch(id, value);\n    }\n    async replace(id, value) {\n        return replace(id, value);\n    }\n    async delete(id) {\n        return delete_(id);\n    }\n} //# sourceMappingURL=database_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL2RhdGFiYXNlX2ltcGwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBYTtBQUlrQjtBQUNvQztBQUNaO0FBQ1g7QUFDSDtBQUNnQjtBQUN6RCxlQUFlUSxJQUFJQyxFQUFFLEVBQUVDLFFBQVE7SUFDN0JMLHlEQUFXQSxDQUFDSSxJQUFJLEdBQUcsT0FBTztJQUMxQixJQUFJLE9BQU9BLE9BQU8sVUFBVTtRQUMxQixNQUFNLElBQUlFLE1BQ1IsQ0FBQyxpRUFBaUUsRUFBRSxPQUFPRixHQUFHLEdBQUcsRUFBRUEsR0FBRyxDQUFDO0lBRTNGO0lBQ0EsTUFBTUcsT0FBTztRQUNYSCxJQUFJVCw4REFBWUEsQ0FBQ1M7UUFDakJDO1FBQ0FKLE9BQU9BLGdEQUFBQTtJQUNUO0lBQ0EsTUFBTU8sY0FBYyxNQUFNWCxnRUFBbUJBLENBQUMsV0FBV1U7SUFDekQsT0FBT1gsOERBQVlBLENBQUNZO0FBQ3RCO0FBQ08sU0FBU0M7SUFDZCxNQUFNQyxTQUFTLENBQUNMLFdBQVcsS0FBSztRQUM5QixPQUFPO1lBQ0xGLEtBQUssT0FBT0M7Z0JBQ1YsT0FBTyxNQUFNRCxJQUFJQyxJQUFJQztZQUN2QjtZQUNBTSxPQUFPLENBQUNDO2dCQUNOLE9BQU8sSUFBSUMsWUFBWUQsV0FBV1AsVUFBVU0sS0FBSztZQUNuRDtZQUNBRyxhQUFhLENBQUNGLFdBQVdSO2dCQUN2QkoseURBQVdBLENBQUNZLFdBQVcsR0FBRyxlQUFlO2dCQUN6Q1oseURBQVdBLENBQUNJLElBQUksR0FBRyxlQUFlO2dCQUNsQyxNQUFNVyx1QkFBdUJILFVBQVVJLFVBQVUsQ0FBQztnQkFDbEQsSUFBSUQseUJBQXlCVixVQUFVO29CQUNyQyxNQUFNLElBQUlDLE1BQ1IsQ0FBQyxFQUFFUyx1QkFBdUIsV0FBVyxPQUFPLHFDQUFxQyxFQUFFVixXQUFXLEtBQUssVUFBVSxjQUFjLENBQUM7Z0JBRWhJO2dCQUNBLE1BQU1HLGNBQWNWLDJEQUFjQSxDQUFDLHNCQUFzQjtvQkFDdkRtQixPQUFPTDtvQkFDUE0sVUFBVWQ7Z0JBQ1o7Z0JBQ0EsTUFBTWUsZ0JBQWdCdkIsOERBQVlBLENBQUNZO2dCQUNuQyxPQUFPVyxjQUFjZixFQUFFO1lBQ3pCO1lBQ0EsNENBQTRDO1lBQzVDZ0IsUUFBUTtZQUNSSCxPQUFPLENBQUNMO2dCQUNOLE9BQU8sSUFBSUMsWUFBWUQsV0FBV1A7WUFDcEM7UUFDRjtJQUNGO0lBQ0EsTUFBTSxFQUFFZSxRQUFRQyxDQUFDLEVBQUUsR0FBR0MsTUFBTSxHQUFHWixPQUFPO0lBQ3RDLE1BQU1hLElBQUliO0lBQ1ZhLEVBQUVILE1BQU0sR0FBR0U7SUFDWCxPQUFPQztBQUNUO0FBQ0EsZUFBZUMsT0FBT1osU0FBUyxFQUFFYSxLQUFLO0lBQ3BDLElBQUliLFVBQVVJLFVBQVUsQ0FBQyxNQUFNO1FBQzdCLE1BQU0sSUFBSVYsTUFBTTtJQUNsQjtJQUNBTix5REFBV0EsQ0FBQ1ksV0FBVyxHQUFHLFVBQVU7SUFDcENaLHlEQUFXQSxDQUFDeUIsT0FBTyxHQUFHLFVBQVU7SUFDaEMsTUFBTWpCLGNBQWMsTUFBTVgsZ0VBQW1CQSxDQUFDLGNBQWM7UUFDMURvQixPQUFPTDtRQUNQYSxPQUFPOUIsOERBQVlBLENBQUM4QjtJQUN0QjtJQUNBLE1BQU1OLGdCQUFnQnZCLDhEQUFZQSxDQUFDWTtJQUNuQyxPQUFPVyxjQUFjTyxHQUFHO0FBQzFCO0FBQ0EsZUFBZUMsTUFBTXZCLEVBQUUsRUFBRXFCLEtBQUs7SUFDNUJ6Qix5REFBV0EsQ0FBQ0ksSUFBSSxHQUFHLFNBQVM7SUFDNUJKLHlEQUFXQSxDQUFDeUIsT0FBTyxHQUFHLFNBQVM7SUFDL0IsTUFBTTVCLGdFQUFtQkEsQ0FBQyxvQkFBb0I7UUFDNUNPLElBQUlULDhEQUFZQSxDQUFDUztRQUNqQnFCLE9BQU92QixrRUFBZ0JBLENBQUN1QjtJQUMxQjtBQUNGO0FBQ0EsZUFBZUcsUUFBUXhCLEVBQUUsRUFBRXFCLEtBQUs7SUFDOUJ6Qix5REFBV0EsQ0FBQ0ksSUFBSSxHQUFHLFdBQVc7SUFDOUJKLHlEQUFXQSxDQUFDeUIsT0FBTyxHQUFHLFdBQVc7SUFDakMsTUFBTTVCLGdFQUFtQkEsQ0FBQyxlQUFlO1FBQ3ZDTyxJQUFJVCw4REFBWUEsQ0FBQ1M7UUFDakJxQixPQUFPOUIsOERBQVlBLENBQUM4QjtJQUN0QjtBQUNGO0FBQ0EsZUFBZUksUUFBUXpCLEVBQUU7SUFDdkJKLHlEQUFXQSxDQUFDSSxJQUFJLEdBQUcsVUFBVTtJQUM3QixNQUFNUCxnRUFBbUJBLENBQUMsY0FBYztRQUFFTyxJQUFJVCw4REFBWUEsQ0FBQ1M7SUFBSTtBQUNqRTtBQUNPLFNBQVMwQjtJQUNkLE1BQU1wQixTQUFTRDtJQUNmLE9BQU87UUFDTE4sS0FBS08sT0FBT1AsR0FBRztRQUNmUSxPQUFPRCxPQUFPQyxLQUFLO1FBQ25CRyxhQUFhSixPQUFPSSxXQUFXO1FBQy9CTSxRQUFRVixPQUFPVSxNQUFNO1FBQ3JCSSxRQUFRLE9BQU9QLE9BQU9RO1lBQ3BCLE9BQU8sTUFBTUQsT0FBT1AsT0FBT1E7UUFDN0I7UUFDQUUsT0FBTyxPQUFPdkIsSUFBSXFCO1lBQ2hCLE9BQU8sTUFBTUUsTUFBTXZCLElBQUlxQjtRQUN6QjtRQUNBRyxTQUFTLE9BQU94QixJQUFJcUI7WUFDbEIsT0FBTyxNQUFNRyxRQUFReEIsSUFBSXFCO1FBQzNCO1FBQ0FNLFFBQVEsT0FBTzNCO1lBQ2IsT0FBTyxNQUFNeUIsUUFBUXpCO1FBQ3ZCO1FBQ0FhLE9BQU8sQ0FBQ0w7WUFDTixPQUFPLElBQUlvQixZQUFZcEIsV0FBVztRQUNwQztJQUNGO0FBQ0Y7QUFDQSxNQUFNQztJQUNKb0IsWUFBWXJCLFNBQVMsRUFBRVAsUUFBUSxDQUFFO1FBQy9CLElBQUksQ0FBQ08sU0FBUyxHQUFHQTtRQUNqQixJQUFJLENBQUNQLFFBQVEsR0FBR0E7SUFDbEI7SUFDQSxNQUFNRixJQUFJQyxFQUFFLEVBQUU7UUFDWixPQUFPRCxJQUFJQyxJQUFJLElBQUksQ0FBQ0MsUUFBUTtJQUM5QjtJQUNBTSxRQUFRO1FBQ04sTUFBTUksdUJBQXVCLElBQUksQ0FBQ0gsU0FBUyxDQUFDSSxVQUFVLENBQUM7UUFDdkQsSUFBSUQseUJBQXlCLElBQUksQ0FBQ1YsUUFBUSxFQUFFO1lBQzFDLE1BQU0sSUFBSUMsTUFDUixDQUFDLEVBQUVTLHVCQUF1QixXQUFXLE9BQU8scUNBQXFDLEVBQUUsSUFBSSxDQUFDVixRQUFRLEdBQUcsS0FBSyxVQUFVLFFBQVEsQ0FBQztRQUUvSDtRQUNBLE9BQU8sSUFBSU4sZ0VBQW9CQSxDQUFDLElBQUksQ0FBQ2EsU0FBUztJQUNoRDtBQUNGO0FBQ0EsTUFBTW9CLG9CQUFvQm5CO0lBQ3hCLE1BQU1XLE9BQU9DLEtBQUssRUFBRTtRQUNsQixPQUFPRCxPQUFPLElBQUksQ0FBQ1osU0FBUyxFQUFFYTtJQUNoQztJQUNBLE1BQU1FLE1BQU12QixFQUFFLEVBQUVxQixLQUFLLEVBQUU7UUFDckIsT0FBT0UsTUFBTXZCLElBQUlxQjtJQUNuQjtJQUNBLE1BQU1HLFFBQVF4QixFQUFFLEVBQUVxQixLQUFLLEVBQUU7UUFDdkIsT0FBT0csUUFBUXhCLElBQUlxQjtJQUNyQjtJQUNBLE1BQU1NLE9BQU8zQixFQUFFLEVBQUU7UUFDZixPQUFPeUIsUUFBUXpCO0lBQ2pCO0FBQ0YsRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmFzb3JfY2xvbmUvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL2RhdGFiYXNlX2ltcGwuanM/YjY3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7XG4gIGNvbnZleFRvSnNvbixcbiAganNvblRvQ29udmV4XG59IGZyb20gXCIuLi8uLi92YWx1ZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IHBlcmZvcm1Bc3luY1N5c2NhbGwsIHBlcmZvcm1TeXNjYWxsIH0gZnJvbSBcIi4vc3lzY2FsbC5qc1wiO1xuaW1wb3J0IHsgUXVlcnlJbml0aWFsaXplckltcGwgfSBmcm9tIFwiLi9xdWVyeV9pbXBsLmpzXCI7XG5pbXBvcnQgeyB2YWxpZGF0ZUFyZyB9IGZyb20gXCIuL3ZhbGlkYXRlLmpzXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4uLy4uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBwYXRjaFZhbHVlVG9Kc29uIH0gZnJvbSBcIi4uLy4uL3ZhbHVlcy92YWx1ZS5qc1wiO1xuYXN5bmMgZnVuY3Rpb24gZ2V0KGlkLCBpc1N5c3RlbSkge1xuICB2YWxpZGF0ZUFyZyhpZCwgMSwgXCJnZXRcIiwgXCJpZFwiKTtcbiAgaWYgKHR5cGVvZiBpZCAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBJbnZhbGlkIGFyZ3VtZW50IFxcYGlkXFxgIGZvciBcXGBkYi5nZXRcXGAsIGV4cGVjdGVkIHN0cmluZyBidXQgZ290ICcke3R5cGVvZiBpZH0nOiAke2lkfWBcbiAgICApO1xuICB9XG4gIGNvbnN0IGFyZ3MgPSB7XG4gICAgaWQ6IGNvbnZleFRvSnNvbihpZCksXG4gICAgaXNTeXN0ZW0sXG4gICAgdmVyc2lvblxuICB9O1xuICBjb25zdCBzeXNjYWxsSlNPTiA9IGF3YWl0IHBlcmZvcm1Bc3luY1N5c2NhbGwoXCIxLjAvZ2V0XCIsIGFyZ3MpO1xuICByZXR1cm4ganNvblRvQ29udmV4KHN5c2NhbGxKU09OKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFJlYWRlcigpIHtcbiAgY29uc3QgcmVhZGVyID0gKGlzU3lzdGVtID0gZmFsc2UpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0OiBhc3luYyAoaWQpID0+IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGdldChpZCwgaXNTeXN0ZW0pO1xuICAgICAgfSxcbiAgICAgIHF1ZXJ5OiAodGFibGVOYW1lKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgVGFibGVSZWFkZXIodGFibGVOYW1lLCBpc1N5c3RlbSkucXVlcnkoKTtcbiAgICAgIH0sXG4gICAgICBub3JtYWxpemVJZDogKHRhYmxlTmFtZSwgaWQpID0+IHtcbiAgICAgICAgdmFsaWRhdGVBcmcodGFibGVOYW1lLCAxLCBcIm5vcm1hbGl6ZUlkXCIsIFwidGFibGVOYW1lXCIpO1xuICAgICAgICB2YWxpZGF0ZUFyZyhpZCwgMiwgXCJub3JtYWxpemVJZFwiLCBcImlkXCIpO1xuICAgICAgICBjb25zdCBhY2Nlc3NpbmdTeXN0ZW1UYWJsZSA9IHRhYmxlTmFtZS5zdGFydHNXaXRoKFwiX1wiKTtcbiAgICAgICAgaWYgKGFjY2Vzc2luZ1N5c3RlbVRhYmxlICE9PSBpc1N5c3RlbSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGAke2FjY2Vzc2luZ1N5c3RlbVRhYmxlID8gXCJTeXN0ZW1cIiA6IFwiVXNlclwifSB0YWJsZXMgY2FuIG9ubHkgYmUgYWNjZXNzZWQgZnJvbSBkYi4ke2lzU3lzdGVtID8gXCJcIiA6IFwic3lzdGVtLlwifW5vcm1hbGl6ZUlkKCkuYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3lzY2FsbEpTT04gPSBwZXJmb3JtU3lzY2FsbChcIjEuMC9kYi9ub3JtYWxpemVJZFwiLCB7XG4gICAgICAgICAgdGFibGU6IHRhYmxlTmFtZSxcbiAgICAgICAgICBpZFN0cmluZzogaWRcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHN5c2NhbGxSZXN1bHQgPSBqc29uVG9Db252ZXgoc3lzY2FsbEpTT04pO1xuICAgICAgICByZXR1cm4gc3lzY2FsbFJlc3VsdC5pZDtcbiAgICAgIH0sXG4gICAgICAvLyBXZSBzZXQgdGhlIHN5c3RlbSByZWFkZXIgb24gdGhlIG5leHQgbGluZVxuICAgICAgc3lzdGVtOiBudWxsLFxuICAgICAgdGFibGU6ICh0YWJsZU5hbWUpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBUYWJsZVJlYWRlcih0YWJsZU5hbWUsIGlzU3lzdGVtKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICBjb25zdCB7IHN5c3RlbTogXywgLi4ucmVzdCB9ID0gcmVhZGVyKHRydWUpO1xuICBjb25zdCByID0gcmVhZGVyKCk7XG4gIHIuc3lzdGVtID0gcmVzdDtcbiAgcmV0dXJuIHI7XG59XG5hc3luYyBmdW5jdGlvbiBpbnNlcnQodGFibGVOYW1lLCB2YWx1ZSkge1xuICBpZiAodGFibGVOYW1lLnN0YXJ0c1dpdGgoXCJfXCIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3lzdGVtIHRhYmxlcyAocHJlZml4ZWQgd2l0aCBgX2ApIGFyZSByZWFkLW9ubHkuXCIpO1xuICB9XG4gIHZhbGlkYXRlQXJnKHRhYmxlTmFtZSwgMSwgXCJpbnNlcnRcIiwgXCJ0YWJsZVwiKTtcbiAgdmFsaWRhdGVBcmcodmFsdWUsIDIsIFwiaW5zZXJ0XCIsIFwidmFsdWVcIik7XG4gIGNvbnN0IHN5c2NhbGxKU09OID0gYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9pbnNlcnRcIiwge1xuICAgIHRhYmxlOiB0YWJsZU5hbWUsXG4gICAgdmFsdWU6IGNvbnZleFRvSnNvbih2YWx1ZSlcbiAgfSk7XG4gIGNvbnN0IHN5c2NhbGxSZXN1bHQgPSBqc29uVG9Db252ZXgoc3lzY2FsbEpTT04pO1xuICByZXR1cm4gc3lzY2FsbFJlc3VsdC5faWQ7XG59XG5hc3luYyBmdW5jdGlvbiBwYXRjaChpZCwgdmFsdWUpIHtcbiAgdmFsaWRhdGVBcmcoaWQsIDEsIFwicGF0Y2hcIiwgXCJpZFwiKTtcbiAgdmFsaWRhdGVBcmcodmFsdWUsIDIsIFwicGF0Y2hcIiwgXCJ2YWx1ZVwiKTtcbiAgYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9zaGFsbG93TWVyZ2VcIiwge1xuICAgIGlkOiBjb252ZXhUb0pzb24oaWQpLFxuICAgIHZhbHVlOiBwYXRjaFZhbHVlVG9Kc29uKHZhbHVlKVxuICB9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHJlcGxhY2UoaWQsIHZhbHVlKSB7XG4gIHZhbGlkYXRlQXJnKGlkLCAxLCBcInJlcGxhY2VcIiwgXCJpZFwiKTtcbiAgdmFsaWRhdGVBcmcodmFsdWUsIDIsIFwicmVwbGFjZVwiLCBcInZhbHVlXCIpO1xuICBhd2FpdCBwZXJmb3JtQXN5bmNTeXNjYWxsKFwiMS4wL3JlcGxhY2VcIiwge1xuICAgIGlkOiBjb252ZXhUb0pzb24oaWQpLFxuICAgIHZhbHVlOiBjb252ZXhUb0pzb24odmFsdWUpXG4gIH0pO1xufVxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlXyhpZCkge1xuICB2YWxpZGF0ZUFyZyhpZCwgMSwgXCJkZWxldGVcIiwgXCJpZFwiKTtcbiAgYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9yZW1vdmVcIiwgeyBpZDogY29udmV4VG9Kc29uKGlkKSB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFdyaXRlcigpIHtcbiAgY29uc3QgcmVhZGVyID0gc2V0dXBSZWFkZXIoKTtcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IHJlYWRlci5nZXQsXG4gICAgcXVlcnk6IHJlYWRlci5xdWVyeSxcbiAgICBub3JtYWxpemVJZDogcmVhZGVyLm5vcm1hbGl6ZUlkLFxuICAgIHN5c3RlbTogcmVhZGVyLnN5c3RlbSxcbiAgICBpbnNlcnQ6IGFzeW5jICh0YWJsZSwgdmFsdWUpID0+IHtcbiAgICAgIHJldHVybiBhd2FpdCBpbnNlcnQodGFibGUsIHZhbHVlKTtcbiAgICB9LFxuICAgIHBhdGNoOiBhc3luYyAoaWQsIHZhbHVlKSA9PiB7XG4gICAgICByZXR1cm4gYXdhaXQgcGF0Y2goaWQsIHZhbHVlKTtcbiAgICB9LFxuICAgIHJlcGxhY2U6IGFzeW5jIChpZCwgdmFsdWUpID0+IHtcbiAgICAgIHJldHVybiBhd2FpdCByZXBsYWNlKGlkLCB2YWx1ZSk7XG4gICAgfSxcbiAgICBkZWxldGU6IGFzeW5jIChpZCkgPT4ge1xuICAgICAgcmV0dXJuIGF3YWl0IGRlbGV0ZV8oaWQpO1xuICAgIH0sXG4gICAgdGFibGU6ICh0YWJsZU5hbWUpID0+IHtcbiAgICAgIHJldHVybiBuZXcgVGFibGVXcml0ZXIodGFibGVOYW1lLCBmYWxzZSk7XG4gICAgfVxuICB9O1xufVxuY2xhc3MgVGFibGVSZWFkZXIge1xuICBjb25zdHJ1Y3Rvcih0YWJsZU5hbWUsIGlzU3lzdGVtKSB7XG4gICAgdGhpcy50YWJsZU5hbWUgPSB0YWJsZU5hbWU7XG4gICAgdGhpcy5pc1N5c3RlbSA9IGlzU3lzdGVtO1xuICB9XG4gIGFzeW5jIGdldChpZCkge1xuICAgIHJldHVybiBnZXQoaWQsIHRoaXMuaXNTeXN0ZW0pO1xuICB9XG4gIHF1ZXJ5KCkge1xuICAgIGNvbnN0IGFjY2Vzc2luZ1N5c3RlbVRhYmxlID0gdGhpcy50YWJsZU5hbWUuc3RhcnRzV2l0aChcIl9cIik7XG4gICAgaWYgKGFjY2Vzc2luZ1N5c3RlbVRhYmxlICE9PSB0aGlzLmlzU3lzdGVtKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGAke2FjY2Vzc2luZ1N5c3RlbVRhYmxlID8gXCJTeXN0ZW1cIiA6IFwiVXNlclwifSB0YWJsZXMgY2FuIG9ubHkgYmUgYWNjZXNzZWQgZnJvbSBkYi4ke3RoaXMuaXNTeXN0ZW0gPyBcIlwiIDogXCJzeXN0ZW0uXCJ9cXVlcnkoKS5gXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFF1ZXJ5SW5pdGlhbGl6ZXJJbXBsKHRoaXMudGFibGVOYW1lKTtcbiAgfVxufVxuY2xhc3MgVGFibGVXcml0ZXIgZXh0ZW5kcyBUYWJsZVJlYWRlciB7XG4gIGFzeW5jIGluc2VydCh2YWx1ZSkge1xuICAgIHJldHVybiBpbnNlcnQodGhpcy50YWJsZU5hbWUsIHZhbHVlKTtcbiAgfVxuICBhc3luYyBwYXRjaChpZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gcGF0Y2goaWQsIHZhbHVlKTtcbiAgfVxuICBhc3luYyByZXBsYWNlKGlkLCB2YWx1ZSkge1xuICAgIHJldHVybiByZXBsYWNlKGlkLCB2YWx1ZSk7XG4gIH1cbiAgYXN5bmMgZGVsZXRlKGlkKSB7XG4gICAgcmV0dXJuIGRlbGV0ZV8oaWQpO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhYmFzZV9pbXBsLmpzLm1hcFxuIl0sIm5hbWVzIjpbImNvbnZleFRvSnNvbiIsImpzb25Ub0NvbnZleCIsInBlcmZvcm1Bc3luY1N5c2NhbGwiLCJwZXJmb3JtU3lzY2FsbCIsIlF1ZXJ5SW5pdGlhbGl6ZXJJbXBsIiwidmFsaWRhdGVBcmciLCJ2ZXJzaW9uIiwicGF0Y2hWYWx1ZVRvSnNvbiIsImdldCIsImlkIiwiaXNTeXN0ZW0iLCJFcnJvciIsImFyZ3MiLCJzeXNjYWxsSlNPTiIsInNldHVwUmVhZGVyIiwicmVhZGVyIiwicXVlcnkiLCJ0YWJsZU5hbWUiLCJUYWJsZVJlYWRlciIsIm5vcm1hbGl6ZUlkIiwiYWNjZXNzaW5nU3lzdGVtVGFibGUiLCJzdGFydHNXaXRoIiwidGFibGUiLCJpZFN0cmluZyIsInN5c2NhbGxSZXN1bHQiLCJzeXN0ZW0iLCJfIiwicmVzdCIsInIiLCJpbnNlcnQiLCJ2YWx1ZSIsIl9pZCIsInBhdGNoIiwicmVwbGFjZSIsImRlbGV0ZV8iLCJzZXR1cFdyaXRlciIsImRlbGV0ZSIsIlRhYmxlV3JpdGVyIiwiY29uc3RydWN0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/database_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/filter_builder_impl.js":
/*!*************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/filter_builder_impl.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExpressionImpl: () => (/* binding */ ExpressionImpl),\n/* harmony export */   filterBuilderImpl: () => (/* binding */ filterBuilderImpl),\n/* harmony export */   serializeExpression: () => (/* binding */ serializeExpression)\n/* harmony export */ });\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n/* harmony import */ var _filter_builder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../filter_builder.js */ \"(ssr)/./node_modules/convex/dist/esm/server/filter_builder.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\nclass ExpressionImpl extends _filter_builder_js__WEBPACK_IMPORTED_MODULE_1__.Expression {\n    constructor(inner){\n        super();\n        __publicField(this, \"inner\");\n        this.inner = inner;\n    }\n    serialize() {\n        return this.inner;\n    }\n}\nfunction serializeExpression(expr) {\n    if (expr instanceof ExpressionImpl) {\n        return expr.serialize();\n    } else {\n        return {\n            $literal: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_0__.convexOrUndefinedToJson)(expr)\n        };\n    }\n}\nconst filterBuilderImpl = {\n    //  Comparisons  /////////////////////////////////////////////////////////////\n    eq (l, r) {\n        return new ExpressionImpl({\n            $eq: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    neq (l, r) {\n        return new ExpressionImpl({\n            $neq: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    lt (l, r) {\n        return new ExpressionImpl({\n            $lt: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    lte (l, r) {\n        return new ExpressionImpl({\n            $lte: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    gt (l, r) {\n        return new ExpressionImpl({\n            $gt: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    gte (l, r) {\n        return new ExpressionImpl({\n            $gte: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    //  Arithmetic  //////////////////////////////////////////////////////////////\n    add (l, r) {\n        return new ExpressionImpl({\n            $add: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    sub (l, r) {\n        return new ExpressionImpl({\n            $sub: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    mul (l, r) {\n        return new ExpressionImpl({\n            $mul: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    div (l, r) {\n        return new ExpressionImpl({\n            $div: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    mod (l, r) {\n        return new ExpressionImpl({\n            $mod: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    neg (x) {\n        return new ExpressionImpl({\n            $neg: serializeExpression(x)\n        });\n    },\n    //  Logic  ///////////////////////////////////////////////////////////////////\n    and (...exprs) {\n        return new ExpressionImpl({\n            $and: exprs.map(serializeExpression)\n        });\n    },\n    or (...exprs) {\n        return new ExpressionImpl({\n            $or: exprs.map(serializeExpression)\n        });\n    },\n    not (x) {\n        return new ExpressionImpl({\n            $not: serializeExpression(x)\n        });\n    },\n    //  Other  ///////////////////////////////////////////////////////////////////\n    field (fieldPath) {\n        return new ExpressionImpl({\n            $field: fieldPath\n        });\n    }\n}; //# sourceMappingURL=filter_builder_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL2ZpbHRlcl9idWlsZGVyX2ltcGwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBYTtBQUNiLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1KLFVBQVVJLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksZ0JBQWdCLENBQUNOLEtBQUtDLEtBQUtDLFFBQVVILGdCQUFnQkMsS0FBSyxPQUFPQyxRQUFRLFdBQVdBLE1BQU0sS0FBS0EsS0FBS0M7QUFDeEM7QUFHbEM7QUFDdkIsTUFBTU8sdUJBQXVCRCwwREFBVUE7SUFDNUNFLFlBQVlDLEtBQUssQ0FBRTtRQUNqQixLQUFLO1FBQ0xMLGNBQWMsSUFBSSxFQUFFO1FBQ3BCLElBQUksQ0FBQ0ssS0FBSyxHQUFHQTtJQUNmO0lBQ0FDLFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQ0QsS0FBSztJQUNuQjtBQUNGO0FBQ08sU0FBU0Usb0JBQW9CQyxJQUFJO0lBQ3RDLElBQUlBLGdCQUFnQkwsZ0JBQWdCO1FBQ2xDLE9BQU9LLEtBQUtGLFNBQVM7SUFDdkIsT0FBTztRQUNMLE9BQU87WUFBRUcsVUFBVVIseUVBQXVCQSxDQUFDTztRQUFNO0lBQ25EO0FBQ0Y7QUFDTyxNQUFNRSxvQkFBb0I7SUFDL0IsOEVBQThFO0lBQzlFQyxJQUFHQyxDQUFDLEVBQUVDLENBQUM7UUFDTCxPQUFPLElBQUlWLGVBQWU7WUFDeEJXLEtBQUs7Z0JBQUNQLG9CQUFvQks7Z0JBQUlMLG9CQUFvQk07YUFBRztRQUN2RDtJQUNGO0lBQ0FFLEtBQUlILENBQUMsRUFBRUMsQ0FBQztRQUNOLE9BQU8sSUFBSVYsZUFBZTtZQUN4QmEsTUFBTTtnQkFBQ1Qsb0JBQW9CSztnQkFBSUwsb0JBQW9CTTthQUFHO1FBQ3hEO0lBQ0Y7SUFDQUksSUFBR0wsQ0FBQyxFQUFFQyxDQUFDO1FBQ0wsT0FBTyxJQUFJVixlQUFlO1lBQ3hCZSxLQUFLO2dCQUFDWCxvQkFBb0JLO2dCQUFJTCxvQkFBb0JNO2FBQUc7UUFDdkQ7SUFDRjtJQUNBTSxLQUFJUCxDQUFDLEVBQUVDLENBQUM7UUFDTixPQUFPLElBQUlWLGVBQWU7WUFDeEJpQixNQUFNO2dCQUFDYixvQkFBb0JLO2dCQUFJTCxvQkFBb0JNO2FBQUc7UUFDeEQ7SUFDRjtJQUNBUSxJQUFHVCxDQUFDLEVBQUVDLENBQUM7UUFDTCxPQUFPLElBQUlWLGVBQWU7WUFDeEJtQixLQUFLO2dCQUFDZixvQkFBb0JLO2dCQUFJTCxvQkFBb0JNO2FBQUc7UUFDdkQ7SUFDRjtJQUNBVSxLQUFJWCxDQUFDLEVBQUVDLENBQUM7UUFDTixPQUFPLElBQUlWLGVBQWU7WUFDeEJxQixNQUFNO2dCQUFDakIsb0JBQW9CSztnQkFBSUwsb0JBQW9CTTthQUFHO1FBQ3hEO0lBQ0Y7SUFDQSw4RUFBOEU7SUFDOUVZLEtBQUliLENBQUMsRUFBRUMsQ0FBQztRQUNOLE9BQU8sSUFBSVYsZUFBZTtZQUN4QnVCLE1BQU07Z0JBQUNuQixvQkFBb0JLO2dCQUFJTCxvQkFBb0JNO2FBQUc7UUFDeEQ7SUFDRjtJQUNBYyxLQUFJZixDQUFDLEVBQUVDLENBQUM7UUFDTixPQUFPLElBQUlWLGVBQWU7WUFDeEJ5QixNQUFNO2dCQUFDckIsb0JBQW9CSztnQkFBSUwsb0JBQW9CTTthQUFHO1FBQ3hEO0lBQ0Y7SUFDQWdCLEtBQUlqQixDQUFDLEVBQUVDLENBQUM7UUFDTixPQUFPLElBQUlWLGVBQWU7WUFDeEIyQixNQUFNO2dCQUFDdkIsb0JBQW9CSztnQkFBSUwsb0JBQW9CTTthQUFHO1FBQ3hEO0lBQ0Y7SUFDQWtCLEtBQUluQixDQUFDLEVBQUVDLENBQUM7UUFDTixPQUFPLElBQUlWLGVBQWU7WUFDeEI2QixNQUFNO2dCQUFDekIsb0JBQW9CSztnQkFBSUwsb0JBQW9CTTthQUFHO1FBQ3hEO0lBQ0Y7SUFDQW9CLEtBQUlyQixDQUFDLEVBQUVDLENBQUM7UUFDTixPQUFPLElBQUlWLGVBQWU7WUFDeEIrQixNQUFNO2dCQUFDM0Isb0JBQW9CSztnQkFBSUwsb0JBQW9CTTthQUFHO1FBQ3hEO0lBQ0Y7SUFDQXNCLEtBQUlDLENBQUM7UUFDSCxPQUFPLElBQUlqQyxlQUFlO1lBQUVrQyxNQUFNOUIsb0JBQW9CNkI7UUFBRztJQUMzRDtJQUNBLDhFQUE4RTtJQUM5RUUsS0FBSSxHQUFHQyxLQUFLO1FBQ1YsT0FBTyxJQUFJcEMsZUFBZTtZQUFFcUMsTUFBTUQsTUFBTUUsR0FBRyxDQUFDbEM7UUFBcUI7SUFDbkU7SUFDQW1DLElBQUcsR0FBR0gsS0FBSztRQUNULE9BQU8sSUFBSXBDLGVBQWU7WUFBRXdDLEtBQUtKLE1BQU1FLEdBQUcsQ0FBQ2xDO1FBQXFCO0lBQ2xFO0lBQ0FxQyxLQUFJUixDQUFDO1FBQ0gsT0FBTyxJQUFJakMsZUFBZTtZQUFFMEMsTUFBTXRDLG9CQUFvQjZCO1FBQUc7SUFDM0Q7SUFDQSw4RUFBOEU7SUFDOUVVLE9BQU1DLFNBQVM7UUFDYixPQUFPLElBQUk1QyxlQUFlO1lBQUU2QyxRQUFRRDtRQUFVO0lBQ2hEO0FBQ0YsRUFBRSxDQUNGLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYXNvcl9jbG9uZS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvZmlsdGVyX2J1aWxkZXJfaW1wbC5qcz9kYjZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4gX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbmltcG9ydCB7IGNvbnZleE9yVW5kZWZpbmVkVG9Kc29uIH0gZnJvbSBcIi4uLy4uL3ZhbHVlcy92YWx1ZS5qc1wiO1xuaW1wb3J0IHtcbiAgRXhwcmVzc2lvblxufSBmcm9tIFwiLi4vZmlsdGVyX2J1aWxkZXIuanNcIjtcbmV4cG9ydCBjbGFzcyBFeHByZXNzaW9uSW1wbCBleHRlbmRzIEV4cHJlc3Npb24ge1xuICBjb25zdHJ1Y3Rvcihpbm5lcikge1xuICAgIHN1cGVyKCk7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImlubmVyXCIpO1xuICAgIHRoaXMuaW5uZXIgPSBpbm5lcjtcbiAgfVxuICBzZXJpYWxpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5uZXI7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVFeHByZXNzaW9uKGV4cHIpIHtcbiAgaWYgKGV4cHIgaW5zdGFuY2VvZiBFeHByZXNzaW9uSW1wbCkge1xuICAgIHJldHVybiBleHByLnNlcmlhbGl6ZSgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7ICRsaXRlcmFsOiBjb252ZXhPclVuZGVmaW5lZFRvSnNvbihleHByKSB9O1xuICB9XG59XG5leHBvcnQgY29uc3QgZmlsdGVyQnVpbGRlckltcGwgPSB7XG4gIC8vICBDb21wYXJpc29ucyAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBlcShsLCByKSB7XG4gICAgcmV0dXJuIG5ldyBFeHByZXNzaW9uSW1wbCh7XG4gICAgICAkZXE6IFtzZXJpYWxpemVFeHByZXNzaW9uKGwpLCBzZXJpYWxpemVFeHByZXNzaW9uKHIpXVxuICAgIH0pO1xuICB9LFxuICBuZXEobCwgcikge1xuICAgIHJldHVybiBuZXcgRXhwcmVzc2lvbkltcGwoe1xuICAgICAgJG5lcTogW3NlcmlhbGl6ZUV4cHJlc3Npb24obCksIHNlcmlhbGl6ZUV4cHJlc3Npb24ocildXG4gICAgfSk7XG4gIH0sXG4gIGx0KGwsIHIpIHtcbiAgICByZXR1cm4gbmV3IEV4cHJlc3Npb25JbXBsKHtcbiAgICAgICRsdDogW3NlcmlhbGl6ZUV4cHJlc3Npb24obCksIHNlcmlhbGl6ZUV4cHJlc3Npb24ocildXG4gICAgfSk7XG4gIH0sXG4gIGx0ZShsLCByKSB7XG4gICAgcmV0dXJuIG5ldyBFeHByZXNzaW9uSW1wbCh7XG4gICAgICAkbHRlOiBbc2VyaWFsaXplRXhwcmVzc2lvbihsKSwgc2VyaWFsaXplRXhwcmVzc2lvbihyKV1cbiAgICB9KTtcbiAgfSxcbiAgZ3QobCwgcikge1xuICAgIHJldHVybiBuZXcgRXhwcmVzc2lvbkltcGwoe1xuICAgICAgJGd0OiBbc2VyaWFsaXplRXhwcmVzc2lvbihsKSwgc2VyaWFsaXplRXhwcmVzc2lvbihyKV1cbiAgICB9KTtcbiAgfSxcbiAgZ3RlKGwsIHIpIHtcbiAgICByZXR1cm4gbmV3IEV4cHJlc3Npb25JbXBsKHtcbiAgICAgICRndGU6IFtzZXJpYWxpemVFeHByZXNzaW9uKGwpLCBzZXJpYWxpemVFeHByZXNzaW9uKHIpXVxuICAgIH0pO1xuICB9LFxuICAvLyAgQXJpdGhtZXRpYyAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgYWRkKGwsIHIpIHtcbiAgICByZXR1cm4gbmV3IEV4cHJlc3Npb25JbXBsKHtcbiAgICAgICRhZGQ6IFtzZXJpYWxpemVFeHByZXNzaW9uKGwpLCBzZXJpYWxpemVFeHByZXNzaW9uKHIpXVxuICAgIH0pO1xuICB9LFxuICBzdWIobCwgcikge1xuICAgIHJldHVybiBuZXcgRXhwcmVzc2lvbkltcGwoe1xuICAgICAgJHN1YjogW3NlcmlhbGl6ZUV4cHJlc3Npb24obCksIHNlcmlhbGl6ZUV4cHJlc3Npb24ocildXG4gICAgfSk7XG4gIH0sXG4gIG11bChsLCByKSB7XG4gICAgcmV0dXJuIG5ldyBFeHByZXNzaW9uSW1wbCh7XG4gICAgICAkbXVsOiBbc2VyaWFsaXplRXhwcmVzc2lvbihsKSwgc2VyaWFsaXplRXhwcmVzc2lvbihyKV1cbiAgICB9KTtcbiAgfSxcbiAgZGl2KGwsIHIpIHtcbiAgICByZXR1cm4gbmV3IEV4cHJlc3Npb25JbXBsKHtcbiAgICAgICRkaXY6IFtzZXJpYWxpemVFeHByZXNzaW9uKGwpLCBzZXJpYWxpemVFeHByZXNzaW9uKHIpXVxuICAgIH0pO1xuICB9LFxuICBtb2QobCwgcikge1xuICAgIHJldHVybiBuZXcgRXhwcmVzc2lvbkltcGwoe1xuICAgICAgJG1vZDogW3NlcmlhbGl6ZUV4cHJlc3Npb24obCksIHNlcmlhbGl6ZUV4cHJlc3Npb24ocildXG4gICAgfSk7XG4gIH0sXG4gIG5lZyh4KSB7XG4gICAgcmV0dXJuIG5ldyBFeHByZXNzaW9uSW1wbCh7ICRuZWc6IHNlcmlhbGl6ZUV4cHJlc3Npb24oeCkgfSk7XG4gIH0sXG4gIC8vICBMb2dpYyAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBhbmQoLi4uZXhwcnMpIHtcbiAgICByZXR1cm4gbmV3IEV4cHJlc3Npb25JbXBsKHsgJGFuZDogZXhwcnMubWFwKHNlcmlhbGl6ZUV4cHJlc3Npb24pIH0pO1xuICB9LFxuICBvciguLi5leHBycykge1xuICAgIHJldHVybiBuZXcgRXhwcmVzc2lvbkltcGwoeyAkb3I6IGV4cHJzLm1hcChzZXJpYWxpemVFeHByZXNzaW9uKSB9KTtcbiAgfSxcbiAgbm90KHgpIHtcbiAgICByZXR1cm4gbmV3IEV4cHJlc3Npb25JbXBsKHsgJG5vdDogc2VyaWFsaXplRXhwcmVzc2lvbih4KSB9KTtcbiAgfSxcbiAgLy8gIE90aGVyICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIGZpZWxkKGZpZWxkUGF0aCkge1xuICAgIHJldHVybiBuZXcgRXhwcmVzc2lvbkltcGwoeyAkZmllbGQ6IGZpZWxkUGF0aCB9KTtcbiAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlcl9idWlsZGVyX2ltcGwuanMubWFwXG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fcHVibGljRmllbGQiLCJjb252ZXhPclVuZGVmaW5lZFRvSnNvbiIsIkV4cHJlc3Npb24iLCJFeHByZXNzaW9uSW1wbCIsImNvbnN0cnVjdG9yIiwiaW5uZXIiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVFeHByZXNzaW9uIiwiZXhwciIsIiRsaXRlcmFsIiwiZmlsdGVyQnVpbGRlckltcGwiLCJlcSIsImwiLCJyIiwiJGVxIiwibmVxIiwiJG5lcSIsImx0IiwiJGx0IiwibHRlIiwiJGx0ZSIsImd0IiwiJGd0IiwiZ3RlIiwiJGd0ZSIsImFkZCIsIiRhZGQiLCJzdWIiLCIkc3ViIiwibXVsIiwiJG11bCIsImRpdiIsIiRkaXYiLCJtb2QiLCIkbW9kIiwibmVnIiwieCIsIiRuZWciLCJhbmQiLCJleHBycyIsIiRhbmQiLCJtYXAiLCJvciIsIiRvciIsIm5vdCIsIiRub3QiLCJmaWVsZCIsImZpZWxkUGF0aCIsIiRmaWVsZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/filter_builder_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/index_range_builder_impl.js":
/*!******************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/index_range_builder_impl.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IndexRangeBuilderImpl: () => (/* binding */ IndexRangeBuilderImpl)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../values/value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n/* harmony import */ var _index_range_builder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../index_range_builder.js */ \"(ssr)/./node_modules/convex/dist/esm/server/index_range_builder.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\nclass IndexRangeBuilderImpl extends _index_range_builder_js__WEBPACK_IMPORTED_MODULE_2__.IndexRange {\n    constructor(rangeExpressions){\n        super();\n        __publicField(this, \"rangeExpressions\");\n        __publicField(this, \"isConsumed\");\n        this.rangeExpressions = rangeExpressions;\n        this.isConsumed = false;\n    }\n    static new() {\n        return new IndexRangeBuilderImpl([]);\n    }\n    consume() {\n        if (this.isConsumed) {\n            throw new Error(\"IndexRangeBuilder has already been used! Chain your method calls like `q => q.eq(...).eq(...)`. See https://docs.convex.dev/using/indexes\");\n        }\n        this.isConsumed = true;\n    }\n    eq(fieldName, value) {\n        this.consume();\n        return new IndexRangeBuilderImpl(this.rangeExpressions.concat({\n            type: \"Eq\",\n            fieldPath: fieldName,\n            value: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_1__.convexOrUndefinedToJson)(value)\n        }));\n    }\n    gt(fieldName, value) {\n        this.consume();\n        return new IndexRangeBuilderImpl(this.rangeExpressions.concat({\n            type: \"Gt\",\n            fieldPath: fieldName,\n            value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(value)\n        }));\n    }\n    gte(fieldName, value) {\n        this.consume();\n        return new IndexRangeBuilderImpl(this.rangeExpressions.concat({\n            type: \"Gte\",\n            fieldPath: fieldName,\n            value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(value)\n        }));\n    }\n    lt(fieldName, value) {\n        this.consume();\n        return new IndexRangeBuilderImpl(this.rangeExpressions.concat({\n            type: \"Lt\",\n            fieldPath: fieldName,\n            value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(value)\n        }));\n    }\n    lte(fieldName, value) {\n        this.consume();\n        return new IndexRangeBuilderImpl(this.rangeExpressions.concat({\n            type: \"Lte\",\n            fieldPath: fieldName,\n            value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(value)\n        }));\n    }\n    export() {\n        this.consume();\n        return this.rangeExpressions;\n    }\n} //# sourceMappingURL=index_range_builder_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL2luZGV4X3JhbmdlX2J1aWxkZXJfaW1wbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWE7QUFDYixJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLGtCQUFrQixDQUFDQyxLQUFLQyxLQUFLQyxRQUFVRCxPQUFPRCxNQUFNSixVQUFVSSxLQUFLQyxLQUFLO1FBQUVFLFlBQVk7UUFBTUMsY0FBYztRQUFNQyxVQUFVO1FBQU1IO0lBQU0sS0FBS0YsR0FBRyxDQUFDQyxJQUFJLEdBQUdDO0FBQzFKLElBQUlJLGdCQUFnQixDQUFDTixLQUFLQyxLQUFLQyxRQUFVSCxnQkFBZ0JDLEtBQUssT0FBT0MsUUFBUSxXQUFXQSxNQUFNLEtBQUtBLEtBQUtDO0FBQ25EO0FBQ1c7QUFHN0I7QUFDNUIsTUFBTVEsOEJBQThCRCwrREFBVUE7SUFDbkRFLFlBQVlDLGdCQUFnQixDQUFFO1FBQzVCLEtBQUs7UUFDTE4sY0FBYyxJQUFJLEVBQUU7UUFDcEJBLGNBQWMsSUFBSSxFQUFFO1FBQ3BCLElBQUksQ0FBQ00sZ0JBQWdCLEdBQUdBO1FBQ3hCLElBQUksQ0FBQ0MsVUFBVSxHQUFHO0lBQ3BCO0lBQ0EsT0FBT0MsTUFBTTtRQUNYLE9BQU8sSUFBSUosc0JBQXNCLEVBQUU7SUFDckM7SUFDQUssVUFBVTtRQUNSLElBQUksSUFBSSxDQUFDRixVQUFVLEVBQUU7WUFDbkIsTUFBTSxJQUFJRyxNQUNSO1FBRUo7UUFDQSxJQUFJLENBQUNILFVBQVUsR0FBRztJQUNwQjtJQUNBSSxHQUFHQyxTQUFTLEVBQUVoQixLQUFLLEVBQUU7UUFDbkIsSUFBSSxDQUFDYSxPQUFPO1FBQ1osT0FBTyxJQUFJTCxzQkFDVCxJQUFJLENBQUNFLGdCQUFnQixDQUFDTyxNQUFNLENBQUM7WUFDM0JDLE1BQU07WUFDTkMsV0FBV0g7WUFDWGhCLE9BQU9NLHlFQUF1QkEsQ0FBQ047UUFDakM7SUFFSjtJQUNBb0IsR0FBR0osU0FBUyxFQUFFaEIsS0FBSyxFQUFFO1FBQ25CLElBQUksQ0FBQ2EsT0FBTztRQUNaLE9BQU8sSUFBSUwsc0JBQ1QsSUFBSSxDQUFDRSxnQkFBZ0IsQ0FBQ08sTUFBTSxDQUFDO1lBQzNCQyxNQUFNO1lBQ05DLFdBQVdIO1lBQ1hoQixPQUFPSyw4REFBWUEsQ0FBQ0w7UUFDdEI7SUFFSjtJQUNBcUIsSUFBSUwsU0FBUyxFQUFFaEIsS0FBSyxFQUFFO1FBQ3BCLElBQUksQ0FBQ2EsT0FBTztRQUNaLE9BQU8sSUFBSUwsc0JBQ1QsSUFBSSxDQUFDRSxnQkFBZ0IsQ0FBQ08sTUFBTSxDQUFDO1lBQzNCQyxNQUFNO1lBQ05DLFdBQVdIO1lBQ1hoQixPQUFPSyw4REFBWUEsQ0FBQ0w7UUFDdEI7SUFFSjtJQUNBc0IsR0FBR04sU0FBUyxFQUFFaEIsS0FBSyxFQUFFO1FBQ25CLElBQUksQ0FBQ2EsT0FBTztRQUNaLE9BQU8sSUFBSUwsc0JBQ1QsSUFBSSxDQUFDRSxnQkFBZ0IsQ0FBQ08sTUFBTSxDQUFDO1lBQzNCQyxNQUFNO1lBQ05DLFdBQVdIO1lBQ1hoQixPQUFPSyw4REFBWUEsQ0FBQ0w7UUFDdEI7SUFFSjtJQUNBdUIsSUFBSVAsU0FBUyxFQUFFaEIsS0FBSyxFQUFFO1FBQ3BCLElBQUksQ0FBQ2EsT0FBTztRQUNaLE9BQU8sSUFBSUwsc0JBQ1QsSUFBSSxDQUFDRSxnQkFBZ0IsQ0FBQ08sTUFBTSxDQUFDO1lBQzNCQyxNQUFNO1lBQ05DLFdBQVdIO1lBQ1hoQixPQUFPSyw4REFBWUEsQ0FBQ0w7UUFDdEI7SUFFSjtJQUNBd0IsU0FBUztRQUNQLElBQUksQ0FBQ1gsT0FBTztRQUNaLE9BQU8sSUFBSSxDQUFDSCxnQkFBZ0I7SUFDOUI7QUFDRixFQUNBLG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYXNvcl9jbG9uZS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvaW5kZXhfcmFuZ2VfYnVpbGRlcl9pbXBsLmpzPzE2ODciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBfX2RlZk5vcm1hbFByb3Aob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xuaW1wb3J0IHsgY29udmV4VG9Kc29uIH0gZnJvbSBcIi4uLy4uL3ZhbHVlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgY29udmV4T3JVbmRlZmluZWRUb0pzb24gfSBmcm9tIFwiLi4vLi4vdmFsdWVzL3ZhbHVlLmpzXCI7XG5pbXBvcnQge1xuICBJbmRleFJhbmdlXG59IGZyb20gXCIuLi9pbmRleF9yYW5nZV9idWlsZGVyLmpzXCI7XG5leHBvcnQgY2xhc3MgSW5kZXhSYW5nZUJ1aWxkZXJJbXBsIGV4dGVuZHMgSW5kZXhSYW5nZSB7XG4gIGNvbnN0cnVjdG9yKHJhbmdlRXhwcmVzc2lvbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJyYW5nZUV4cHJlc3Npb25zXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJpc0NvbnN1bWVkXCIpO1xuICAgIHRoaXMucmFuZ2VFeHByZXNzaW9ucyA9IHJhbmdlRXhwcmVzc2lvbnM7XG4gICAgdGhpcy5pc0NvbnN1bWVkID0gZmFsc2U7XG4gIH1cbiAgc3RhdGljIG5ldygpIHtcbiAgICByZXR1cm4gbmV3IEluZGV4UmFuZ2VCdWlsZGVySW1wbChbXSk7XG4gIH1cbiAgY29uc3VtZSgpIHtcbiAgICBpZiAodGhpcy5pc0NvbnN1bWVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiSW5kZXhSYW5nZUJ1aWxkZXIgaGFzIGFscmVhZHkgYmVlbiB1c2VkISBDaGFpbiB5b3VyIG1ldGhvZCBjYWxscyBsaWtlIGBxID0+IHEuZXEoLi4uKS5lcSguLi4pYC4gU2VlIGh0dHBzOi8vZG9jcy5jb252ZXguZGV2L3VzaW5nL2luZGV4ZXNcIlxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5pc0NvbnN1bWVkID0gdHJ1ZTtcbiAgfVxuICBlcShmaWVsZE5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5jb25zdW1lKCk7XG4gICAgcmV0dXJuIG5ldyBJbmRleFJhbmdlQnVpbGRlckltcGwoXG4gICAgICB0aGlzLnJhbmdlRXhwcmVzc2lvbnMuY29uY2F0KHtcbiAgICAgICAgdHlwZTogXCJFcVwiLFxuICAgICAgICBmaWVsZFBhdGg6IGZpZWxkTmFtZSxcbiAgICAgICAgdmFsdWU6IGNvbnZleE9yVW5kZWZpbmVkVG9Kc29uKHZhbHVlKVxuICAgICAgfSlcbiAgICApO1xuICB9XG4gIGd0KGZpZWxkTmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICByZXR1cm4gbmV3IEluZGV4UmFuZ2VCdWlsZGVySW1wbChcbiAgICAgIHRoaXMucmFuZ2VFeHByZXNzaW9ucy5jb25jYXQoe1xuICAgICAgICB0eXBlOiBcIkd0XCIsXG4gICAgICAgIGZpZWxkUGF0aDogZmllbGROYW1lLFxuICAgICAgICB2YWx1ZTogY29udmV4VG9Kc29uKHZhbHVlKVxuICAgICAgfSlcbiAgICApO1xuICB9XG4gIGd0ZShmaWVsZE5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5jb25zdW1lKCk7XG4gICAgcmV0dXJuIG5ldyBJbmRleFJhbmdlQnVpbGRlckltcGwoXG4gICAgICB0aGlzLnJhbmdlRXhwcmVzc2lvbnMuY29uY2F0KHtcbiAgICAgICAgdHlwZTogXCJHdGVcIixcbiAgICAgICAgZmllbGRQYXRoOiBmaWVsZE5hbWUsXG4gICAgICAgIHZhbHVlOiBjb252ZXhUb0pzb24odmFsdWUpXG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgbHQoZmllbGROYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMuY29uc3VtZSgpO1xuICAgIHJldHVybiBuZXcgSW5kZXhSYW5nZUJ1aWxkZXJJbXBsKFxuICAgICAgdGhpcy5yYW5nZUV4cHJlc3Npb25zLmNvbmNhdCh7XG4gICAgICAgIHR5cGU6IFwiTHRcIixcbiAgICAgICAgZmllbGRQYXRoOiBmaWVsZE5hbWUsXG4gICAgICAgIHZhbHVlOiBjb252ZXhUb0pzb24odmFsdWUpXG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgbHRlKGZpZWxkTmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICByZXR1cm4gbmV3IEluZGV4UmFuZ2VCdWlsZGVySW1wbChcbiAgICAgIHRoaXMucmFuZ2VFeHByZXNzaW9ucy5jb25jYXQoe1xuICAgICAgICB0eXBlOiBcIkx0ZVwiLFxuICAgICAgICBmaWVsZFBhdGg6IGZpZWxkTmFtZSxcbiAgICAgICAgdmFsdWU6IGNvbnZleFRvSnNvbih2YWx1ZSlcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuICBleHBvcnQoKSB7XG4gICAgdGhpcy5jb25zdW1lKCk7XG4gICAgcmV0dXJuIHRoaXMucmFuZ2VFeHByZXNzaW9ucztcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXhfcmFuZ2VfYnVpbGRlcl9pbXBsLmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19kZWZOb3JtYWxQcm9wIiwib2JqIiwia2V5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfX3B1YmxpY0ZpZWxkIiwiY29udmV4VG9Kc29uIiwiY29udmV4T3JVbmRlZmluZWRUb0pzb24iLCJJbmRleFJhbmdlIiwiSW5kZXhSYW5nZUJ1aWxkZXJJbXBsIiwiY29uc3RydWN0b3IiLCJyYW5nZUV4cHJlc3Npb25zIiwiaXNDb25zdW1lZCIsIm5ldyIsImNvbnN1bWUiLCJFcnJvciIsImVxIiwiZmllbGROYW1lIiwiY29uY2F0IiwidHlwZSIsImZpZWxkUGF0aCIsImd0IiwiZ3RlIiwibHQiLCJsdGUiLCJleHBvcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/index_range_builder_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/query_impl.js":
/*!****************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/query_impl.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryImpl: () => (/* binding */ QueryImpl),\n/* harmony export */   QueryInitializerImpl: () => (/* binding */ QueryInitializerImpl)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n/* harmony import */ var _filter_builder_impl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./filter_builder_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/filter_builder_impl.js\");\n/* harmony import */ var _index_range_builder_impl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index_range_builder_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/index_range_builder_impl.js\");\n/* harmony import */ var _search_filter_builder_impl_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./search_filter_builder_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/search_filter_builder_impl.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/validate.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\n\n\nclass QueryInitializerImpl {\n    constructor(tableName){\n        __publicField(this, \"tableName\");\n        this.tableName = tableName;\n    }\n    withIndex(indexName, indexRange) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(indexName, 1, \"withIndex\", \"indexName\");\n        let rangeBuilder = _index_range_builder_impl_js__WEBPACK_IMPORTED_MODULE_3__.IndexRangeBuilderImpl.new();\n        if (indexRange !== void 0) {\n            rangeBuilder = indexRange(rangeBuilder);\n        }\n        return new QueryImpl({\n            source: {\n                type: \"IndexRange\",\n                indexName: this.tableName + \".\" + indexName,\n                range: rangeBuilder.export(),\n                order: null\n            },\n            operators: []\n        });\n    }\n    withSearchIndex(indexName, searchFilter) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(indexName, 1, \"withSearchIndex\", \"indexName\");\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(searchFilter, 2, \"withSearchIndex\", \"searchFilter\");\n        const searchFilterBuilder = _search_filter_builder_impl_js__WEBPACK_IMPORTED_MODULE_4__.SearchFilterBuilderImpl.new();\n        return new QueryImpl({\n            source: {\n                type: \"Search\",\n                indexName: this.tableName + \".\" + indexName,\n                filters: searchFilter(searchFilterBuilder).export()\n            },\n            operators: []\n        });\n    }\n    fullTableScan() {\n        return new QueryImpl({\n            source: {\n                type: \"FullTableScan\",\n                tableName: this.tableName,\n                order: null\n            },\n            operators: []\n        });\n    }\n    order(order) {\n        return this.fullTableScan().order(order);\n    }\n    // This is internal API and should not be exposed to developers yet.\n    async count() {\n        const syscallJSON = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/count\", {\n            table: this.tableName\n        });\n        const syscallResult = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(syscallJSON);\n        return syscallResult;\n    }\n    filter(predicate) {\n        return this.fullTableScan().filter(predicate);\n    }\n    limit(n) {\n        return this.fullTableScan().limit(n);\n    }\n    collect() {\n        return this.fullTableScan().collect();\n    }\n    take(n) {\n        return this.fullTableScan().take(n);\n    }\n    paginate(paginationOpts) {\n        return this.fullTableScan().paginate(paginationOpts);\n    }\n    first() {\n        return this.fullTableScan().first();\n    }\n    unique() {\n        return this.fullTableScan().unique();\n    }\n    [Symbol.asyncIterator]() {\n        return this.fullTableScan()[Symbol.asyncIterator]();\n    }\n}\nfunction throwClosedError(type) {\n    throw new Error(type === \"consumed\" ? \"This query is closed and can't emit any more values.\" : \"This query has been chained with another operator and can't be reused.\");\n}\nclass QueryImpl {\n    constructor(query){\n        __publicField(this, \"state\");\n        this.state = {\n            type: \"preparing\",\n            query\n        };\n    }\n    takeQuery() {\n        if (this.state.type !== \"preparing\") {\n            throw new Error(\"A query can only be chained once and can't be chained after iteration begins.\");\n        }\n        const query = this.state.query;\n        this.state = {\n            type: \"closed\"\n        };\n        return query;\n    }\n    startQuery() {\n        if (this.state.type === \"executing\") {\n            throw new Error(\"Iteration can only begin on a query once.\");\n        }\n        if (this.state.type === \"closed\" || this.state.type === \"consumed\") {\n            throwClosedError(this.state.type);\n        }\n        const query = this.state.query;\n        const { queryId } = (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performSyscall)(\"1.0/queryStream\", {\n            query,\n            version: _index_js__WEBPACK_IMPORTED_MODULE_6__.version\n        });\n        this.state = {\n            type: \"executing\",\n            queryId\n        };\n        return queryId;\n    }\n    closeQuery() {\n        if (this.state.type === \"executing\") {\n            const queryId = this.state.queryId;\n            (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performSyscall)(\"1.0/queryCleanup\", {\n                queryId\n            });\n        }\n        this.state = {\n            type: \"consumed\"\n        };\n    }\n    order(order) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(order, 1, \"order\", \"order\");\n        const query = this.takeQuery();\n        if (query.source.type === \"Search\") {\n            throw new Error(\"Search queries must always be in relevance order. Can not set order manually.\");\n        }\n        if (query.source.order !== null) {\n            throw new Error(\"Queries may only specify order at most once\");\n        }\n        query.source.order = order;\n        return new QueryImpl(query);\n    }\n    filter(predicate) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(predicate, 1, \"filter\", \"predicate\");\n        const query = this.takeQuery();\n        query.operators.push({\n            filter: (0,_filter_builder_impl_js__WEBPACK_IMPORTED_MODULE_2__.serializeExpression)(predicate(_filter_builder_impl_js__WEBPACK_IMPORTED_MODULE_2__.filterBuilderImpl))\n        });\n        return new QueryImpl(query);\n    }\n    limit(n) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(n, 1, \"limit\", \"n\");\n        const query = this.takeQuery();\n        query.operators.push({\n            limit: n\n        });\n        return new QueryImpl(query);\n    }\n    [Symbol.asyncIterator]() {\n        this.startQuery();\n        return this;\n    }\n    async next() {\n        if (this.state.type === \"closed\" || this.state.type === \"consumed\") {\n            throwClosedError(this.state.type);\n        }\n        const queryId = this.state.type === \"preparing\" ? this.startQuery() : this.state.queryId;\n        const { value, done } = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/queryStreamNext\", {\n            queryId\n        });\n        if (done) {\n            this.closeQuery();\n        }\n        const convexValue = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(value);\n        return {\n            value: convexValue,\n            done\n        };\n    }\n    return() {\n        this.closeQuery();\n        return Promise.resolve({\n            done: true,\n            value: void 0\n        });\n    }\n    async paginate(paginationOpts) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(paginationOpts, 1, \"paginate\", \"options\");\n        if (typeof paginationOpts?.numItems !== \"number\" || paginationOpts.numItems < 0) {\n            throw new Error(`\\`options.numItems\\` must be a positive number. Received \\`${paginationOpts?.numItems}\\`.`);\n        }\n        const query = this.takeQuery();\n        const pageSize = paginationOpts.numItems;\n        const cursor = paginationOpts.cursor;\n        const endCursor = paginationOpts?.endCursor ?? null;\n        const maximumRowsRead = paginationOpts.maximumRowsRead ?? null;\n        const { page, isDone, continueCursor, splitCursor, pageStatus } = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/queryPage\", {\n            query,\n            cursor,\n            endCursor,\n            pageSize,\n            maximumRowsRead,\n            maximumBytesRead: paginationOpts.maximumBytesRead,\n            version: _index_js__WEBPACK_IMPORTED_MODULE_6__.version\n        });\n        return {\n            page: page.map((json)=>(0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(json)),\n            isDone,\n            continueCursor,\n            splitCursor,\n            pageStatus\n        };\n    }\n    async collect() {\n        const out = [];\n        for await (const item of this){\n            out.push(item);\n        }\n        return out;\n    }\n    async take(n) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(n, 1, \"take\", \"n\");\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArgIsNonNegativeInteger)(n, 1, \"take\", \"n\");\n        return this.limit(n).collect();\n    }\n    async first() {\n        const first_array = await this.take(1);\n        return first_array.length === 0 ? null : first_array[0];\n    }\n    async unique() {\n        const first_two_array = await this.take(2);\n        if (first_two_array.length === 0) {\n            return null;\n        }\n        if (first_two_array.length === 2) {\n            throw new Error(\"unique() query returned more than one result\");\n        }\n        return first_two_array[0];\n    }\n} //# sourceMappingURL=query_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL3F1ZXJ5X2ltcGwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQWE7QUFDYixJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLGtCQUFrQixDQUFDQyxLQUFLQyxLQUFLQyxRQUFVRCxPQUFPRCxNQUFNSixVQUFVSSxLQUFLQyxLQUFLO1FBQUVFLFlBQVk7UUFBTUMsY0FBYztRQUFNQyxVQUFVO1FBQU1IO0lBQU0sS0FBS0YsR0FBRyxDQUFDQyxJQUFJLEdBQUdDO0FBQzFKLElBQUlJLGdCQUFnQixDQUFDTixLQUFLQyxLQUFLQyxRQUFVSCxnQkFBZ0JDLEtBQUssT0FBT0MsUUFBUSxXQUFXQSxNQUFNLEtBQUtBLEtBQUtDO0FBQ25EO0FBQ2M7QUFJakM7QUFHSztBQUdFO0FBQ29DO0FBQ3BDO0FBQ2xDLE1BQU1lO0lBQ1hDLFlBQVlDLFNBQVMsQ0FBRTtRQUNyQmIsY0FBYyxJQUFJLEVBQUU7UUFDcEIsSUFBSSxDQUFDYSxTQUFTLEdBQUdBO0lBQ25CO0lBQ0FDLFVBQVVDLFNBQVMsRUFBRUMsVUFBVSxFQUFFO1FBQy9CUix5REFBV0EsQ0FBQ08sV0FBVyxHQUFHLGFBQWE7UUFDdkMsSUFBSUUsZUFBZVgsK0VBQXFCQSxDQUFDWSxHQUFHO1FBQzVDLElBQUlGLGVBQWUsS0FBSyxHQUFHO1lBQ3pCQyxlQUFlRCxXQUFXQztRQUM1QjtRQUNBLE9BQU8sSUFBSUUsVUFBVTtZQUNuQkMsUUFBUTtnQkFDTkMsTUFBTTtnQkFDTk4sV0FBVyxJQUFJLENBQUNGLFNBQVMsR0FBRyxNQUFNRTtnQkFDbENPLE9BQU9MLGFBQWFNLE1BQU07Z0JBQzFCQyxPQUFPO1lBQ1Q7WUFDQUMsV0FBVyxFQUFFO1FBQ2Y7SUFDRjtJQUNBQyxnQkFBZ0JYLFNBQVMsRUFBRVksWUFBWSxFQUFFO1FBQ3ZDbkIseURBQVdBLENBQUNPLFdBQVcsR0FBRyxtQkFBbUI7UUFDN0NQLHlEQUFXQSxDQUFDbUIsY0FBYyxHQUFHLG1CQUFtQjtRQUNoRCxNQUFNQyxzQkFBc0JyQixtRkFBdUJBLENBQUNXLEdBQUc7UUFDdkQsT0FBTyxJQUFJQyxVQUFVO1lBQ25CQyxRQUFRO2dCQUNOQyxNQUFNO2dCQUNOTixXQUFXLElBQUksQ0FBQ0YsU0FBUyxHQUFHLE1BQU1FO2dCQUNsQ2MsU0FBU0YsYUFBYUMscUJBQXFCTCxNQUFNO1lBQ25EO1lBQ0FFLFdBQVcsRUFBRTtRQUNmO0lBQ0Y7SUFDQUssZ0JBQWdCO1FBQ2QsT0FBTyxJQUFJWCxVQUFVO1lBQ25CQyxRQUFRO2dCQUNOQyxNQUFNO2dCQUNOUixXQUFXLElBQUksQ0FBQ0EsU0FBUztnQkFDekJXLE9BQU87WUFDVDtZQUNBQyxXQUFXLEVBQUU7UUFDZjtJQUNGO0lBQ0FELE1BQU1BLEtBQUssRUFBRTtRQUNYLE9BQU8sSUFBSSxDQUFDTSxhQUFhLEdBQUdOLEtBQUssQ0FBQ0E7SUFDcEM7SUFDQSxvRUFBb0U7SUFDcEUsTUFBTU8sUUFBUTtRQUNaLE1BQU1DLGNBQWMsTUFBTTlCLGdFQUFtQkEsQ0FBQyxhQUFhO1lBQ3pEK0IsT0FBTyxJQUFJLENBQUNwQixTQUFTO1FBQ3ZCO1FBQ0EsTUFBTXFCLGdCQUFnQmpDLDhEQUFZQSxDQUFDK0I7UUFDbkMsT0FBT0U7SUFDVDtJQUNBQyxPQUFPQyxTQUFTLEVBQUU7UUFDaEIsT0FBTyxJQUFJLENBQUNOLGFBQWEsR0FBR0ssTUFBTSxDQUFDQztJQUNyQztJQUNBQyxNQUFNQyxDQUFDLEVBQUU7UUFDUCxPQUFPLElBQUksQ0FBQ1IsYUFBYSxHQUFHTyxLQUFLLENBQUNDO0lBQ3BDO0lBQ0FDLFVBQVU7UUFDUixPQUFPLElBQUksQ0FBQ1QsYUFBYSxHQUFHUyxPQUFPO0lBQ3JDO0lBQ0FDLEtBQUtGLENBQUMsRUFBRTtRQUNOLE9BQU8sSUFBSSxDQUFDUixhQUFhLEdBQUdVLElBQUksQ0FBQ0Y7SUFDbkM7SUFDQUcsU0FBU0MsY0FBYyxFQUFFO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDWixhQUFhLEdBQUdXLFFBQVEsQ0FBQ0M7SUFDdkM7SUFDQUMsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDYixhQUFhLEdBQUdhLEtBQUs7SUFDbkM7SUFDQUMsU0FBUztRQUNQLE9BQU8sSUFBSSxDQUFDZCxhQUFhLEdBQUdjLE1BQU07SUFDcEM7SUFDQSxDQUFDQyxPQUFPQyxhQUFhLENBQUMsR0FBRztRQUN2QixPQUFPLElBQUksQ0FBQ2hCLGFBQWEsRUFBRSxDQUFDZSxPQUFPQyxhQUFhLENBQUM7SUFDbkQ7QUFDRjtBQUNBLFNBQVNDLGlCQUFpQjFCLElBQUk7SUFDNUIsTUFBTSxJQUFJMkIsTUFDUjNCLFNBQVMsYUFBYSx5REFBeUQ7QUFFbkY7QUFDTyxNQUFNRjtJQUNYUCxZQUFZcUMsS0FBSyxDQUFFO1FBQ2pCakQsY0FBYyxJQUFJLEVBQUU7UUFDcEIsSUFBSSxDQUFDa0QsS0FBSyxHQUFHO1lBQUU3QixNQUFNO1lBQWE0QjtRQUFNO0lBQzFDO0lBQ0FFLFlBQVk7UUFDVixJQUFJLElBQUksQ0FBQ0QsS0FBSyxDQUFDN0IsSUFBSSxLQUFLLGFBQWE7WUFDbkMsTUFBTSxJQUFJMkIsTUFDUjtRQUVKO1FBQ0EsTUFBTUMsUUFBUSxJQUFJLENBQUNDLEtBQUssQ0FBQ0QsS0FBSztRQUM5QixJQUFJLENBQUNDLEtBQUssR0FBRztZQUFFN0IsTUFBTTtRQUFTO1FBQzlCLE9BQU80QjtJQUNUO0lBQ0FHLGFBQWE7UUFDWCxJQUFJLElBQUksQ0FBQ0YsS0FBSyxDQUFDN0IsSUFBSSxLQUFLLGFBQWE7WUFDbkMsTUFBTSxJQUFJMkIsTUFBTTtRQUNsQjtRQUNBLElBQUksSUFBSSxDQUFDRSxLQUFLLENBQUM3QixJQUFJLEtBQUssWUFBWSxJQUFJLENBQUM2QixLQUFLLENBQUM3QixJQUFJLEtBQUssWUFBWTtZQUNsRTBCLGlCQUFpQixJQUFJLENBQUNHLEtBQUssQ0FBQzdCLElBQUk7UUFDbEM7UUFDQSxNQUFNNEIsUUFBUSxJQUFJLENBQUNDLEtBQUssQ0FBQ0QsS0FBSztRQUM5QixNQUFNLEVBQUVJLE9BQU8sRUFBRSxHQUFHbEQsMkRBQWNBLENBQUMsbUJBQW1CO1lBQUU4QztZQUFPdkMsT0FBT0EsZ0RBQUFBO1FBQUM7UUFDdkUsSUFBSSxDQUFDd0MsS0FBSyxHQUFHO1lBQUU3QixNQUFNO1lBQWFnQztRQUFRO1FBQzFDLE9BQU9BO0lBQ1Q7SUFDQUMsYUFBYTtRQUNYLElBQUksSUFBSSxDQUFDSixLQUFLLENBQUM3QixJQUFJLEtBQUssYUFBYTtZQUNuQyxNQUFNZ0MsVUFBVSxJQUFJLENBQUNILEtBQUssQ0FBQ0csT0FBTztZQUNsQ2xELDJEQUFjQSxDQUFDLG9CQUFvQjtnQkFBRWtEO1lBQVE7UUFDL0M7UUFDQSxJQUFJLENBQUNILEtBQUssR0FBRztZQUFFN0IsTUFBTTtRQUFXO0lBQ2xDO0lBQ0FHLE1BQU1BLEtBQUssRUFBRTtRQUNYaEIseURBQVdBLENBQUNnQixPQUFPLEdBQUcsU0FBUztRQUMvQixNQUFNeUIsUUFBUSxJQUFJLENBQUNFLFNBQVM7UUFDNUIsSUFBSUYsTUFBTTdCLE1BQU0sQ0FBQ0MsSUFBSSxLQUFLLFVBQVU7WUFDbEMsTUFBTSxJQUFJMkIsTUFDUjtRQUVKO1FBQ0EsSUFBSUMsTUFBTTdCLE1BQU0sQ0FBQ0ksS0FBSyxLQUFLLE1BQU07WUFDL0IsTUFBTSxJQUFJd0IsTUFBTTtRQUNsQjtRQUNBQyxNQUFNN0IsTUFBTSxDQUFDSSxLQUFLLEdBQUdBO1FBQ3JCLE9BQU8sSUFBSUwsVUFBVThCO0lBQ3ZCO0lBQ0FkLE9BQU9DLFNBQVMsRUFBRTtRQUNoQjVCLHlEQUFXQSxDQUFDNEIsV0FBVyxHQUFHLFVBQVU7UUFDcEMsTUFBTWEsUUFBUSxJQUFJLENBQUNFLFNBQVM7UUFDNUJGLE1BQU14QixTQUFTLENBQUM4QixJQUFJLENBQUM7WUFDbkJwQixRQUFROUIsNEVBQW1CQSxDQUFDK0IsVUFBVWhDLHNFQUFpQkE7UUFDekQ7UUFDQSxPQUFPLElBQUllLFVBQVU4QjtJQUN2QjtJQUNBWixNQUFNQyxDQUFDLEVBQUU7UUFDUDlCLHlEQUFXQSxDQUFDOEIsR0FBRyxHQUFHLFNBQVM7UUFDM0IsTUFBTVcsUUFBUSxJQUFJLENBQUNFLFNBQVM7UUFDNUJGLE1BQU14QixTQUFTLENBQUM4QixJQUFJLENBQUM7WUFBRWxCLE9BQU9DO1FBQUU7UUFDaEMsT0FBTyxJQUFJbkIsVUFBVThCO0lBQ3ZCO0lBQ0EsQ0FBQ0osT0FBT0MsYUFBYSxDQUFDLEdBQUc7UUFDdkIsSUFBSSxDQUFDTSxVQUFVO1FBQ2YsT0FBTyxJQUFJO0lBQ2I7SUFDQSxNQUFNSSxPQUFPO1FBQ1gsSUFBSSxJQUFJLENBQUNOLEtBQUssQ0FBQzdCLElBQUksS0FBSyxZQUFZLElBQUksQ0FBQzZCLEtBQUssQ0FBQzdCLElBQUksS0FBSyxZQUFZO1lBQ2xFMEIsaUJBQWlCLElBQUksQ0FBQ0csS0FBSyxDQUFDN0IsSUFBSTtRQUNsQztRQUNBLE1BQU1nQyxVQUFVLElBQUksQ0FBQ0gsS0FBSyxDQUFDN0IsSUFBSSxLQUFLLGNBQWMsSUFBSSxDQUFDK0IsVUFBVSxLQUFLLElBQUksQ0FBQ0YsS0FBSyxDQUFDRyxPQUFPO1FBQ3hGLE1BQU0sRUFBRXpELEtBQUssRUFBRTZELElBQUksRUFBRSxHQUFHLE1BQU12RCxnRUFBbUJBLENBQUMsdUJBQXVCO1lBQ3ZFbUQ7UUFDRjtRQUNBLElBQUlJLE1BQU07WUFDUixJQUFJLENBQUNILFVBQVU7UUFDakI7UUFDQSxNQUFNSSxjQUFjekQsOERBQVlBLENBQUNMO1FBQ2pDLE9BQU87WUFBRUEsT0FBTzhEO1lBQWFEO1FBQUs7SUFDcEM7SUFDQUUsU0FBUztRQUNQLElBQUksQ0FBQ0wsVUFBVTtRQUNmLE9BQU9NLFFBQVFDLE9BQU8sQ0FBQztZQUFFSixNQUFNO1lBQU03RCxPQUFPLEtBQUs7UUFBRTtJQUNyRDtJQUNBLE1BQU02QyxTQUFTQyxjQUFjLEVBQUU7UUFDN0JsQyx5REFBV0EsQ0FBQ2tDLGdCQUFnQixHQUFHLFlBQVk7UUFDM0MsSUFBSSxPQUFPQSxnQkFBZ0JvQixhQUFhLFlBQVlwQixlQUFlb0IsUUFBUSxHQUFHLEdBQUc7WUFDL0UsTUFBTSxJQUFJZCxNQUNSLENBQUMsMkRBQTJELEVBQUVOLGdCQUFnQm9CLFNBQVMsR0FBRyxDQUFDO1FBRS9GO1FBQ0EsTUFBTWIsUUFBUSxJQUFJLENBQUNFLFNBQVM7UUFDNUIsTUFBTVksV0FBV3JCLGVBQWVvQixRQUFRO1FBQ3hDLE1BQU1FLFNBQVN0QixlQUFlc0IsTUFBTTtRQUNwQyxNQUFNQyxZQUFZdkIsZ0JBQWdCdUIsYUFBYTtRQUMvQyxNQUFNQyxrQkFBa0J4QixlQUFld0IsZUFBZSxJQUFJO1FBQzFELE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLGNBQWMsRUFBRUMsV0FBVyxFQUFFQyxVQUFVLEVBQUUsR0FBRyxNQUFNckUsZ0VBQW1CQSxDQUFDLGlCQUFpQjtZQUMzRytDO1lBQ0FlO1lBQ0FDO1lBQ0FGO1lBQ0FHO1lBQ0FNLGtCQUFrQjlCLGVBQWU4QixnQkFBZ0I7WUFDakQ5RCxPQUFPQSxnREFBQUE7UUFDVDtRQUNBLE9BQU87WUFDTHlELE1BQU1BLEtBQUtNLEdBQUcsQ0FBQyxDQUFDQyxPQUFTekUsOERBQVlBLENBQUN5RTtZQUN0Q047WUFDQUM7WUFDQUM7WUFDQUM7UUFDRjtJQUNGO0lBQ0EsTUFBTWhDLFVBQVU7UUFDZCxNQUFNb0MsTUFBTSxFQUFFO1FBQ2QsV0FBVyxNQUFNQyxRQUFRLElBQUksQ0FBRTtZQUM3QkQsSUFBSXBCLElBQUksQ0FBQ3FCO1FBQ1g7UUFDQSxPQUFPRDtJQUNUO0lBQ0EsTUFBTW5DLEtBQUtGLENBQUMsRUFBRTtRQUNaOUIseURBQVdBLENBQUM4QixHQUFHLEdBQUcsUUFBUTtRQUMxQjdCLDZFQUErQkEsQ0FBQzZCLEdBQUcsR0FBRyxRQUFRO1FBQzlDLE9BQU8sSUFBSSxDQUFDRCxLQUFLLENBQUNDLEdBQUdDLE9BQU87SUFDOUI7SUFDQSxNQUFNSSxRQUFRO1FBQ1osTUFBTWtDLGNBQWMsTUFBTSxJQUFJLENBQUNyQyxJQUFJLENBQUM7UUFDcEMsT0FBT3FDLFlBQVlDLE1BQU0sS0FBSyxJQUFJLE9BQU9ELFdBQVcsQ0FBQyxFQUFFO0lBQ3pEO0lBQ0EsTUFBTWpDLFNBQVM7UUFDYixNQUFNbUMsa0JBQWtCLE1BQU0sSUFBSSxDQUFDdkMsSUFBSSxDQUFDO1FBQ3hDLElBQUl1QyxnQkFBZ0JELE1BQU0sS0FBSyxHQUFHO1lBQ2hDLE9BQU87UUFDVDtRQUNBLElBQUlDLGdCQUFnQkQsTUFBTSxLQUFLLEdBQUc7WUFDaEMsTUFBTSxJQUFJOUIsTUFBTTtRQUNsQjtRQUNBLE9BQU8rQixlQUFlLENBQUMsRUFBRTtJQUMzQjtBQUNGLEVBQ0Esc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhc29yX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9zZXJ2ZXIvaW1wbC9xdWVyeV9pbXBsLmpzP2RkM2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBfX2RlZk5vcm1hbFByb3Aob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xuaW1wb3J0IHsganNvblRvQ29udmV4IH0gZnJvbSBcIi4uLy4uL3ZhbHVlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgcGVyZm9ybUFzeW5jU3lzY2FsbCwgcGVyZm9ybVN5c2NhbGwgfSBmcm9tIFwiLi9zeXNjYWxsLmpzXCI7XG5pbXBvcnQge1xuICBmaWx0ZXJCdWlsZGVySW1wbCxcbiAgc2VyaWFsaXplRXhwcmVzc2lvblxufSBmcm9tIFwiLi9maWx0ZXJfYnVpbGRlcl9pbXBsLmpzXCI7XG5pbXBvcnQge1xuICBJbmRleFJhbmdlQnVpbGRlckltcGxcbn0gZnJvbSBcIi4vaW5kZXhfcmFuZ2VfYnVpbGRlcl9pbXBsLmpzXCI7XG5pbXBvcnQge1xuICBTZWFyY2hGaWx0ZXJCdWlsZGVySW1wbFxufSBmcm9tIFwiLi9zZWFyY2hfZmlsdGVyX2J1aWxkZXJfaW1wbC5qc1wiO1xuaW1wb3J0IHsgdmFsaWRhdGVBcmcsIHZhbGlkYXRlQXJnSXNOb25OZWdhdGl2ZUludGVnZXIgfSBmcm9tIFwiLi92YWxpZGF0ZS5qc1wiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuLi8uLi9pbmRleC5qc1wiO1xuZXhwb3J0IGNsYXNzIFF1ZXJ5SW5pdGlhbGl6ZXJJbXBsIHtcbiAgY29uc3RydWN0b3IodGFibGVOYW1lKSB7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInRhYmxlTmFtZVwiKTtcbiAgICB0aGlzLnRhYmxlTmFtZSA9IHRhYmxlTmFtZTtcbiAgfVxuICB3aXRoSW5kZXgoaW5kZXhOYW1lLCBpbmRleFJhbmdlKSB7XG4gICAgdmFsaWRhdGVBcmcoaW5kZXhOYW1lLCAxLCBcIndpdGhJbmRleFwiLCBcImluZGV4TmFtZVwiKTtcbiAgICBsZXQgcmFuZ2VCdWlsZGVyID0gSW5kZXhSYW5nZUJ1aWxkZXJJbXBsLm5ldygpO1xuICAgIGlmIChpbmRleFJhbmdlICE9PSB2b2lkIDApIHtcbiAgICAgIHJhbmdlQnVpbGRlciA9IGluZGV4UmFuZ2UocmFuZ2VCdWlsZGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBRdWVyeUltcGwoe1xuICAgICAgc291cmNlOiB7XG4gICAgICAgIHR5cGU6IFwiSW5kZXhSYW5nZVwiLFxuICAgICAgICBpbmRleE5hbWU6IHRoaXMudGFibGVOYW1lICsgXCIuXCIgKyBpbmRleE5hbWUsXG4gICAgICAgIHJhbmdlOiByYW5nZUJ1aWxkZXIuZXhwb3J0KCksXG4gICAgICAgIG9yZGVyOiBudWxsXG4gICAgICB9LFxuICAgICAgb3BlcmF0b3JzOiBbXVxuICAgIH0pO1xuICB9XG4gIHdpdGhTZWFyY2hJbmRleChpbmRleE5hbWUsIHNlYXJjaEZpbHRlcikge1xuICAgIHZhbGlkYXRlQXJnKGluZGV4TmFtZSwgMSwgXCJ3aXRoU2VhcmNoSW5kZXhcIiwgXCJpbmRleE5hbWVcIik7XG4gICAgdmFsaWRhdGVBcmcoc2VhcmNoRmlsdGVyLCAyLCBcIndpdGhTZWFyY2hJbmRleFwiLCBcInNlYXJjaEZpbHRlclwiKTtcbiAgICBjb25zdCBzZWFyY2hGaWx0ZXJCdWlsZGVyID0gU2VhcmNoRmlsdGVyQnVpbGRlckltcGwubmV3KCk7XG4gICAgcmV0dXJuIG5ldyBRdWVyeUltcGwoe1xuICAgICAgc291cmNlOiB7XG4gICAgICAgIHR5cGU6IFwiU2VhcmNoXCIsXG4gICAgICAgIGluZGV4TmFtZTogdGhpcy50YWJsZU5hbWUgKyBcIi5cIiArIGluZGV4TmFtZSxcbiAgICAgICAgZmlsdGVyczogc2VhcmNoRmlsdGVyKHNlYXJjaEZpbHRlckJ1aWxkZXIpLmV4cG9ydCgpXG4gICAgICB9LFxuICAgICAgb3BlcmF0b3JzOiBbXVxuICAgIH0pO1xuICB9XG4gIGZ1bGxUYWJsZVNjYW4oKSB7XG4gICAgcmV0dXJuIG5ldyBRdWVyeUltcGwoe1xuICAgICAgc291cmNlOiB7XG4gICAgICAgIHR5cGU6IFwiRnVsbFRhYmxlU2NhblwiLFxuICAgICAgICB0YWJsZU5hbWU6IHRoaXMudGFibGVOYW1lLFxuICAgICAgICBvcmRlcjogbnVsbFxuICAgICAgfSxcbiAgICAgIG9wZXJhdG9yczogW11cbiAgICB9KTtcbiAgfVxuICBvcmRlcihvcmRlcikge1xuICAgIHJldHVybiB0aGlzLmZ1bGxUYWJsZVNjYW4oKS5vcmRlcihvcmRlcik7XG4gIH1cbiAgLy8gVGhpcyBpcyBpbnRlcm5hbCBBUEkgYW5kIHNob3VsZCBub3QgYmUgZXhwb3NlZCB0byBkZXZlbG9wZXJzIHlldC5cbiAgYXN5bmMgY291bnQoKSB7XG4gICAgY29uc3Qgc3lzY2FsbEpTT04gPSBhd2FpdCBwZXJmb3JtQXN5bmNTeXNjYWxsKFwiMS4wL2NvdW50XCIsIHtcbiAgICAgIHRhYmxlOiB0aGlzLnRhYmxlTmFtZVxuICAgIH0pO1xuICAgIGNvbnN0IHN5c2NhbGxSZXN1bHQgPSBqc29uVG9Db252ZXgoc3lzY2FsbEpTT04pO1xuICAgIHJldHVybiBzeXNjYWxsUmVzdWx0O1xuICB9XG4gIGZpbHRlcihwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gdGhpcy5mdWxsVGFibGVTY2FuKCkuZmlsdGVyKHByZWRpY2F0ZSk7XG4gIH1cbiAgbGltaXQobikge1xuICAgIHJldHVybiB0aGlzLmZ1bGxUYWJsZVNjYW4oKS5saW1pdChuKTtcbiAgfVxuICBjb2xsZWN0KCkge1xuICAgIHJldHVybiB0aGlzLmZ1bGxUYWJsZVNjYW4oKS5jb2xsZWN0KCk7XG4gIH1cbiAgdGFrZShuKSB7XG4gICAgcmV0dXJuIHRoaXMuZnVsbFRhYmxlU2NhbigpLnRha2Uobik7XG4gIH1cbiAgcGFnaW5hdGUocGFnaW5hdGlvbk9wdHMpIHtcbiAgICByZXR1cm4gdGhpcy5mdWxsVGFibGVTY2FuKCkucGFnaW5hdGUocGFnaW5hdGlvbk9wdHMpO1xuICB9XG4gIGZpcnN0KCkge1xuICAgIHJldHVybiB0aGlzLmZ1bGxUYWJsZVNjYW4oKS5maXJzdCgpO1xuICB9XG4gIHVuaXF1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5mdWxsVGFibGVTY2FuKCkudW5pcXVlKCk7XG4gIH1cbiAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gdGhpcy5mdWxsVGFibGVTY2FuKClbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHRocm93Q2xvc2VkRXJyb3IodHlwZSkge1xuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgdHlwZSA9PT0gXCJjb25zdW1lZFwiID8gXCJUaGlzIHF1ZXJ5IGlzIGNsb3NlZCBhbmQgY2FuJ3QgZW1pdCBhbnkgbW9yZSB2YWx1ZXMuXCIgOiBcIlRoaXMgcXVlcnkgaGFzIGJlZW4gY2hhaW5lZCB3aXRoIGFub3RoZXIgb3BlcmF0b3IgYW5kIGNhbid0IGJlIHJldXNlZC5cIlxuICApO1xufVxuZXhwb3J0IGNsYXNzIFF1ZXJ5SW1wbCB7XG4gIGNvbnN0cnVjdG9yKHF1ZXJ5KSB7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInN0YXRlXCIpO1xuICAgIHRoaXMuc3RhdGUgPSB7IHR5cGU6IFwicHJlcGFyaW5nXCIsIHF1ZXJ5IH07XG4gIH1cbiAgdGFrZVF1ZXJ5KCkge1xuICAgIGlmICh0aGlzLnN0YXRlLnR5cGUgIT09IFwicHJlcGFyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJBIHF1ZXJ5IGNhbiBvbmx5IGJlIGNoYWluZWQgb25jZSBhbmQgY2FuJ3QgYmUgY2hhaW5lZCBhZnRlciBpdGVyYXRpb24gYmVnaW5zLlwiXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBxdWVyeSA9IHRoaXMuc3RhdGUucXVlcnk7XG4gICAgdGhpcy5zdGF0ZSA9IHsgdHlwZTogXCJjbG9zZWRcIiB9O1xuICAgIHJldHVybiBxdWVyeTtcbiAgfVxuICBzdGFydFF1ZXJ5KCkge1xuICAgIGlmICh0aGlzLnN0YXRlLnR5cGUgPT09IFwiZXhlY3V0aW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkl0ZXJhdGlvbiBjYW4gb25seSBiZWdpbiBvbiBhIHF1ZXJ5IG9uY2UuXCIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZS50eXBlID09PSBcImNsb3NlZFwiIHx8IHRoaXMuc3RhdGUudHlwZSA9PT0gXCJjb25zdW1lZFwiKSB7XG4gICAgICB0aHJvd0Nsb3NlZEVycm9yKHRoaXMuc3RhdGUudHlwZSk7XG4gICAgfVxuICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5zdGF0ZS5xdWVyeTtcbiAgICBjb25zdCB7IHF1ZXJ5SWQgfSA9IHBlcmZvcm1TeXNjYWxsKFwiMS4wL3F1ZXJ5U3RyZWFtXCIsIHsgcXVlcnksIHZlcnNpb24gfSk7XG4gICAgdGhpcy5zdGF0ZSA9IHsgdHlwZTogXCJleGVjdXRpbmdcIiwgcXVlcnlJZCB9O1xuICAgIHJldHVybiBxdWVyeUlkO1xuICB9XG4gIGNsb3NlUXVlcnkoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUudHlwZSA9PT0gXCJleGVjdXRpbmdcIikge1xuICAgICAgY29uc3QgcXVlcnlJZCA9IHRoaXMuc3RhdGUucXVlcnlJZDtcbiAgICAgIHBlcmZvcm1TeXNjYWxsKFwiMS4wL3F1ZXJ5Q2xlYW51cFwiLCB7IHF1ZXJ5SWQgfSk7XG4gICAgfVxuICAgIHRoaXMuc3RhdGUgPSB7IHR5cGU6IFwiY29uc3VtZWRcIiB9O1xuICB9XG4gIG9yZGVyKG9yZGVyKSB7XG4gICAgdmFsaWRhdGVBcmcob3JkZXIsIDEsIFwib3JkZXJcIiwgXCJvcmRlclwiKTtcbiAgICBjb25zdCBxdWVyeSA9IHRoaXMudGFrZVF1ZXJ5KCk7XG4gICAgaWYgKHF1ZXJ5LnNvdXJjZS50eXBlID09PSBcIlNlYXJjaFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiU2VhcmNoIHF1ZXJpZXMgbXVzdCBhbHdheXMgYmUgaW4gcmVsZXZhbmNlIG9yZGVyLiBDYW4gbm90IHNldCBvcmRlciBtYW51YWxseS5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHF1ZXJ5LnNvdXJjZS5vcmRlciAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUXVlcmllcyBtYXkgb25seSBzcGVjaWZ5IG9yZGVyIGF0IG1vc3Qgb25jZVwiKTtcbiAgICB9XG4gICAgcXVlcnkuc291cmNlLm9yZGVyID0gb3JkZXI7XG4gICAgcmV0dXJuIG5ldyBRdWVyeUltcGwocXVlcnkpO1xuICB9XG4gIGZpbHRlcihwcmVkaWNhdGUpIHtcbiAgICB2YWxpZGF0ZUFyZyhwcmVkaWNhdGUsIDEsIFwiZmlsdGVyXCIsIFwicHJlZGljYXRlXCIpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy50YWtlUXVlcnkoKTtcbiAgICBxdWVyeS5vcGVyYXRvcnMucHVzaCh7XG4gICAgICBmaWx0ZXI6IHNlcmlhbGl6ZUV4cHJlc3Npb24ocHJlZGljYXRlKGZpbHRlckJ1aWxkZXJJbXBsKSlcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IFF1ZXJ5SW1wbChxdWVyeSk7XG4gIH1cbiAgbGltaXQobikge1xuICAgIHZhbGlkYXRlQXJnKG4sIDEsIFwibGltaXRcIiwgXCJuXCIpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy50YWtlUXVlcnkoKTtcbiAgICBxdWVyeS5vcGVyYXRvcnMucHVzaCh7IGxpbWl0OiBuIH0pO1xuICAgIHJldHVybiBuZXcgUXVlcnlJbXBsKHF1ZXJ5KTtcbiAgfVxuICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIHRoaXMuc3RhcnRRdWVyeSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGFzeW5jIG5leHQoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUudHlwZSA9PT0gXCJjbG9zZWRcIiB8fCB0aGlzLnN0YXRlLnR5cGUgPT09IFwiY29uc3VtZWRcIikge1xuICAgICAgdGhyb3dDbG9zZWRFcnJvcih0aGlzLnN0YXRlLnR5cGUpO1xuICAgIH1cbiAgICBjb25zdCBxdWVyeUlkID0gdGhpcy5zdGF0ZS50eXBlID09PSBcInByZXBhcmluZ1wiID8gdGhpcy5zdGFydFF1ZXJ5KCkgOiB0aGlzLnN0YXRlLnF1ZXJ5SWQ7XG4gICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9xdWVyeVN0cmVhbU5leHRcIiwge1xuICAgICAgcXVlcnlJZFxuICAgIH0pO1xuICAgIGlmIChkb25lKSB7XG4gICAgICB0aGlzLmNsb3NlUXVlcnkoKTtcbiAgICB9XG4gICAgY29uc3QgY29udmV4VmFsdWUgPSBqc29uVG9Db252ZXgodmFsdWUpO1xuICAgIHJldHVybiB7IHZhbHVlOiBjb252ZXhWYWx1ZSwgZG9uZSB9O1xuICB9XG4gIHJldHVybigpIHtcbiAgICB0aGlzLmNsb3NlUXVlcnkoKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHZvaWQgMCB9KTtcbiAgfVxuICBhc3luYyBwYWdpbmF0ZShwYWdpbmF0aW9uT3B0cykge1xuICAgIHZhbGlkYXRlQXJnKHBhZ2luYXRpb25PcHRzLCAxLCBcInBhZ2luYXRlXCIsIFwib3B0aW9uc1wiKTtcbiAgICBpZiAodHlwZW9mIHBhZ2luYXRpb25PcHRzPy5udW1JdGVtcyAhPT0gXCJudW1iZXJcIiB8fCBwYWdpbmF0aW9uT3B0cy5udW1JdGVtcyA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFxcYG9wdGlvbnMubnVtSXRlbXNcXGAgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlci4gUmVjZWl2ZWQgXFxgJHtwYWdpbmF0aW9uT3B0cz8ubnVtSXRlbXN9XFxgLmBcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy50YWtlUXVlcnkoKTtcbiAgICBjb25zdCBwYWdlU2l6ZSA9IHBhZ2luYXRpb25PcHRzLm51bUl0ZW1zO1xuICAgIGNvbnN0IGN1cnNvciA9IHBhZ2luYXRpb25PcHRzLmN1cnNvcjtcbiAgICBjb25zdCBlbmRDdXJzb3IgPSBwYWdpbmF0aW9uT3B0cz8uZW5kQ3Vyc29yID8/IG51bGw7XG4gICAgY29uc3QgbWF4aW11bVJvd3NSZWFkID0gcGFnaW5hdGlvbk9wdHMubWF4aW11bVJvd3NSZWFkID8/IG51bGw7XG4gICAgY29uc3QgeyBwYWdlLCBpc0RvbmUsIGNvbnRpbnVlQ3Vyc29yLCBzcGxpdEN1cnNvciwgcGFnZVN0YXR1cyB9ID0gYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9xdWVyeVBhZ2VcIiwge1xuICAgICAgcXVlcnksXG4gICAgICBjdXJzb3IsXG4gICAgICBlbmRDdXJzb3IsXG4gICAgICBwYWdlU2l6ZSxcbiAgICAgIG1heGltdW1Sb3dzUmVhZCxcbiAgICAgIG1heGltdW1CeXRlc1JlYWQ6IHBhZ2luYXRpb25PcHRzLm1heGltdW1CeXRlc1JlYWQsXG4gICAgICB2ZXJzaW9uXG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhZ2U6IHBhZ2UubWFwKChqc29uKSA9PiBqc29uVG9Db252ZXgoanNvbikpLFxuICAgICAgaXNEb25lLFxuICAgICAgY29udGludWVDdXJzb3IsXG4gICAgICBzcGxpdEN1cnNvcixcbiAgICAgIHBhZ2VTdGF0dXNcbiAgICB9O1xuICB9XG4gIGFzeW5jIGNvbGxlY3QoKSB7XG4gICAgY29uc3Qgb3V0ID0gW107XG4gICAgZm9yIGF3YWl0IChjb25zdCBpdGVtIG9mIHRoaXMpIHtcbiAgICAgIG91dC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9XG4gIGFzeW5jIHRha2Uobikge1xuICAgIHZhbGlkYXRlQXJnKG4sIDEsIFwidGFrZVwiLCBcIm5cIik7XG4gICAgdmFsaWRhdGVBcmdJc05vbk5lZ2F0aXZlSW50ZWdlcihuLCAxLCBcInRha2VcIiwgXCJuXCIpO1xuICAgIHJldHVybiB0aGlzLmxpbWl0KG4pLmNvbGxlY3QoKTtcbiAgfVxuICBhc3luYyBmaXJzdCgpIHtcbiAgICBjb25zdCBmaXJzdF9hcnJheSA9IGF3YWl0IHRoaXMudGFrZSgxKTtcbiAgICByZXR1cm4gZmlyc3RfYXJyYXkubGVuZ3RoID09PSAwID8gbnVsbCA6IGZpcnN0X2FycmF5WzBdO1xuICB9XG4gIGFzeW5jIHVuaXF1ZSgpIHtcbiAgICBjb25zdCBmaXJzdF90d29fYXJyYXkgPSBhd2FpdCB0aGlzLnRha2UoMik7XG4gICAgaWYgKGZpcnN0X3R3b19hcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoZmlyc3RfdHdvX2FycmF5Lmxlbmd0aCA9PT0gMikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5pcXVlKCkgcXVlcnkgcmV0dXJuZWQgbW9yZSB0aGFuIG9uZSByZXN1bHRcIik7XG4gICAgfVxuICAgIHJldHVybiBmaXJzdF90d29fYXJyYXlbMF07XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5X2ltcGwuanMubWFwXG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fcHVibGljRmllbGQiLCJqc29uVG9Db252ZXgiLCJwZXJmb3JtQXN5bmNTeXNjYWxsIiwicGVyZm9ybVN5c2NhbGwiLCJmaWx0ZXJCdWlsZGVySW1wbCIsInNlcmlhbGl6ZUV4cHJlc3Npb24iLCJJbmRleFJhbmdlQnVpbGRlckltcGwiLCJTZWFyY2hGaWx0ZXJCdWlsZGVySW1wbCIsInZhbGlkYXRlQXJnIiwidmFsaWRhdGVBcmdJc05vbk5lZ2F0aXZlSW50ZWdlciIsInZlcnNpb24iLCJRdWVyeUluaXRpYWxpemVySW1wbCIsImNvbnN0cnVjdG9yIiwidGFibGVOYW1lIiwid2l0aEluZGV4IiwiaW5kZXhOYW1lIiwiaW5kZXhSYW5nZSIsInJhbmdlQnVpbGRlciIsIm5ldyIsIlF1ZXJ5SW1wbCIsInNvdXJjZSIsInR5cGUiLCJyYW5nZSIsImV4cG9ydCIsIm9yZGVyIiwib3BlcmF0b3JzIiwid2l0aFNlYXJjaEluZGV4Iiwic2VhcmNoRmlsdGVyIiwic2VhcmNoRmlsdGVyQnVpbGRlciIsImZpbHRlcnMiLCJmdWxsVGFibGVTY2FuIiwiY291bnQiLCJzeXNjYWxsSlNPTiIsInRhYmxlIiwic3lzY2FsbFJlc3VsdCIsImZpbHRlciIsInByZWRpY2F0ZSIsImxpbWl0IiwibiIsImNvbGxlY3QiLCJ0YWtlIiwicGFnaW5hdGUiLCJwYWdpbmF0aW9uT3B0cyIsImZpcnN0IiwidW5pcXVlIiwiU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRocm93Q2xvc2VkRXJyb3IiLCJFcnJvciIsInF1ZXJ5Iiwic3RhdGUiLCJ0YWtlUXVlcnkiLCJzdGFydFF1ZXJ5IiwicXVlcnlJZCIsImNsb3NlUXVlcnkiLCJwdXNoIiwibmV4dCIsImRvbmUiLCJjb252ZXhWYWx1ZSIsInJldHVybiIsIlByb21pc2UiLCJyZXNvbHZlIiwibnVtSXRlbXMiLCJwYWdlU2l6ZSIsImN1cnNvciIsImVuZEN1cnNvciIsIm1heGltdW1Sb3dzUmVhZCIsInBhZ2UiLCJpc0RvbmUiLCJjb250aW51ZUN1cnNvciIsInNwbGl0Q3Vyc29yIiwicGFnZVN0YXR1cyIsIm1heGltdW1CeXRlc1JlYWQiLCJtYXAiLCJqc29uIiwib3V0IiwiaXRlbSIsImZpcnN0X2FycmF5IiwibGVuZ3RoIiwiZmlyc3RfdHdvX2FycmF5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/query_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/registration_impl.js":
/*!***********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/registration_impl.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   actionGeneric: () => (/* binding */ actionGeneric),\n/* harmony export */   httpActionGeneric: () => (/* binding */ httpActionGeneric),\n/* harmony export */   internalActionGeneric: () => (/* binding */ internalActionGeneric),\n/* harmony export */   internalMutationGeneric: () => (/* binding */ internalMutationGeneric),\n/* harmony export */   internalQueryGeneric: () => (/* binding */ internalQueryGeneric),\n/* harmony export */   invokeFunction: () => (/* binding */ invokeFunction),\n/* harmony export */   mutationGeneric: () => (/* binding */ mutationGeneric),\n/* harmony export */   queryGeneric: () => (/* binding */ queryGeneric),\n/* harmony export */   validateReturnValue: () => (/* binding */ validateReturnValue)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _actions_impl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./actions_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/actions_impl.js\");\n/* harmony import */ var _vector_search_impl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vector_search_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/vector_search_impl.js\");\n/* harmony import */ var _authentication_impl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./authentication_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/authentication_impl.js\");\n/* harmony import */ var _database_impl_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./database_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/database_impl.js\");\n/* harmony import */ var _query_impl_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./query_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/query_impl.js\");\n/* harmony import */ var _scheduler_impl_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scheduler_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/scheduler_impl.js\");\n/* harmony import */ var _storage_impl_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./storage_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/storage_impl.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n/* harmony import */ var _values_validator_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../values/validator.js */ \"(ssr)/./node_modules/convex/dist/esm/values/validator.js\");\n/* harmony import */ var _components_paths_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../components/paths.js */ \"(ssr)/./node_modules/convex/dist/esm/server/components/paths.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nasync function invokeMutation(func, argsStr) {\n    const requestId = \"\";\n    const args = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(JSON.parse(argsStr));\n    const mutationCtx = {\n        db: (0,_database_impl_js__WEBPACK_IMPORTED_MODULE_4__.setupWriter)(),\n        auth: (0,_authentication_impl_js__WEBPACK_IMPORTED_MODULE_3__.setupAuth)(requestId),\n        storage: (0,_storage_impl_js__WEBPACK_IMPORTED_MODULE_7__.setupStorageWriter)(requestId),\n        scheduler: (0,_scheduler_impl_js__WEBPACK_IMPORTED_MODULE_6__.setupMutationScheduler)(),\n        runQuery: (reference, args2)=>runUdf(\"query\", reference, args2),\n        runMutation: (reference, args2)=>runUdf(\"mutation\", reference, args2)\n    };\n    const result = await invokeFunction(func, mutationCtx, args);\n    validateReturnValue(result);\n    return JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(result === void 0 ? null : result));\n}\nfunction validateReturnValue(v2) {\n    if (v2 instanceof _query_impl_js__WEBPACK_IMPORTED_MODULE_5__.QueryInitializerImpl || v2 instanceof _query_impl_js__WEBPACK_IMPORTED_MODULE_5__.QueryImpl) {\n        throw new Error(\"Return value is a Query. Results must be retrieved with `.collect()`, `.take(n), `.unique()`, or `.first()`.\");\n    }\n}\nasync function invokeFunction(func, ctx, args) {\n    let result;\n    try {\n        result = await Promise.resolve(func(ctx, ...args));\n    } catch (thrown) {\n        throw serializeConvexErrorData(thrown);\n    }\n    return result;\n}\nfunction dontCallDirectly(funcType, handler) {\n    return (ctx, args)=>{\n        globalThis.console.warn(`Convex functions should not directly call other Convex functions. Consider calling a helper function instead. e.g. \\`export const foo = ${funcType}(...); await foo(ctx);\\` is not supported. See https://docs.convex.dev/production/best-practices/#use-helper-functions-to-write-shared-code`);\n        return handler(ctx, args);\n    };\n}\nfunction serializeConvexErrorData(thrown) {\n    if (typeof thrown === \"object\" && thrown !== null && Symbol.for(\"ConvexError\") in thrown) {\n        const error = thrown;\n        error.data = JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(error.data === void 0 ? null : error.data));\n        error.ConvexErrorSymbol = Symbol.for(\"ConvexError\");\n        return error;\n    } else {\n        return thrown;\n    }\n}\nfunction assertNotBrowser() {\n    if (true) {\n        return;\n    }\n    const isRealBrowser = Object.getOwnPropertyDescriptor(globalThis, \"window\")?.get?.toString().includes(\"[native code]\") ?? false;\n    if (isRealBrowser) {\n        throw new Error(\"Convex functions should not be imported in the browser.\");\n    }\n}\nfunction exportArgs(functionDefinition) {\n    return ()=>{\n        let args = _values_index_js__WEBPACK_IMPORTED_MODULE_0__.v.any();\n        if (typeof functionDefinition === \"object\" && functionDefinition.args !== void 0) {\n            args = (0,_values_validator_js__WEBPACK_IMPORTED_MODULE_10__.asObjectValidator)(functionDefinition.args);\n        }\n        return JSON.stringify(args.json);\n    };\n}\nfunction exportReturns(functionDefinition) {\n    return ()=>{\n        let returns;\n        if (typeof functionDefinition === \"object\" && functionDefinition.returns !== void 0) {\n            returns = (0,_values_validator_js__WEBPACK_IMPORTED_MODULE_10__.asObjectValidator)(functionDefinition.returns);\n        }\n        return JSON.stringify(returns ? returns.json : null);\n    };\n}\nconst mutationGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === \"function\" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly(\"mutation\", handler);\n    assertNotBrowser();\n    func.isMutation = true;\n    func.isPublic = true;\n    func.invokeMutation = (argsStr)=>invokeMutation(handler, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nconst internalMutationGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === \"function\" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly(\"internalMutation\", handler);\n    assertNotBrowser();\n    func.isMutation = true;\n    func.isInternal = true;\n    func.invokeMutation = (argsStr)=>invokeMutation(handler, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nasync function invokeQuery(func, argsStr) {\n    const requestId = \"\";\n    const args = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(JSON.parse(argsStr));\n    const queryCtx = {\n        db: (0,_database_impl_js__WEBPACK_IMPORTED_MODULE_4__.setupReader)(),\n        auth: (0,_authentication_impl_js__WEBPACK_IMPORTED_MODULE_3__.setupAuth)(requestId),\n        storage: (0,_storage_impl_js__WEBPACK_IMPORTED_MODULE_7__.setupStorageReader)(requestId),\n        runQuery: (reference, args2)=>runUdf(\"query\", reference, args2)\n    };\n    const result = await invokeFunction(func, queryCtx, args);\n    validateReturnValue(result);\n    return JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(result === void 0 ? null : result));\n}\nconst queryGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === \"function\" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly(\"query\", handler);\n    assertNotBrowser();\n    func.isQuery = true;\n    func.isPublic = true;\n    func.invokeQuery = (argsStr)=>invokeQuery(handler, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nconst internalQueryGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === \"function\" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly(\"internalQuery\", handler);\n    assertNotBrowser();\n    func.isQuery = true;\n    func.isInternal = true;\n    func.invokeQuery = (argsStr)=>invokeQuery(handler, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nasync function invokeAction(func, requestId, argsStr) {\n    const args = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(JSON.parse(argsStr));\n    const calls = (0,_actions_impl_js__WEBPACK_IMPORTED_MODULE_1__.setupActionCalls)(requestId);\n    const ctx = {\n        ...calls,\n        auth: (0,_authentication_impl_js__WEBPACK_IMPORTED_MODULE_3__.setupAuth)(requestId),\n        scheduler: (0,_scheduler_impl_js__WEBPACK_IMPORTED_MODULE_6__.setupActionScheduler)(requestId),\n        storage: (0,_storage_impl_js__WEBPACK_IMPORTED_MODULE_7__.setupStorageActionWriter)(requestId),\n        vectorSearch: (0,_vector_search_impl_js__WEBPACK_IMPORTED_MODULE_2__.setupActionVectorSearch)(requestId)\n    };\n    const result = await invokeFunction(func, ctx, args);\n    return JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(result === void 0 ? null : result));\n}\nconst actionGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === \"function\" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly(\"action\", handler);\n    assertNotBrowser();\n    func.isAction = true;\n    func.isPublic = true;\n    func.invokeAction = (requestId, argsStr)=>invokeAction(handler, requestId, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nconst internalActionGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === \"function\" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly(\"internalAction\", handler);\n    assertNotBrowser();\n    func.isAction = true;\n    func.isInternal = true;\n    func.invokeAction = (requestId, argsStr)=>invokeAction(handler, requestId, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nasync function invokeHttpAction(func, request) {\n    const requestId = \"\";\n    const calls = (0,_actions_impl_js__WEBPACK_IMPORTED_MODULE_1__.setupActionCalls)(requestId);\n    const ctx = {\n        ...calls,\n        auth: (0,_authentication_impl_js__WEBPACK_IMPORTED_MODULE_3__.setupAuth)(requestId),\n        storage: (0,_storage_impl_js__WEBPACK_IMPORTED_MODULE_7__.setupStorageActionWriter)(requestId),\n        scheduler: (0,_scheduler_impl_js__WEBPACK_IMPORTED_MODULE_6__.setupActionScheduler)(requestId),\n        vectorSearch: (0,_vector_search_impl_js__WEBPACK_IMPORTED_MODULE_2__.setupActionVectorSearch)(requestId)\n    };\n    return await invokeFunction(func, ctx, [\n        request\n    ]);\n}\nconst httpActionGeneric = (func)=>{\n    const q = dontCallDirectly(\"httpAction\", func);\n    assertNotBrowser();\n    q.isHttp = true;\n    q.invokeHttpAction = (request)=>invokeHttpAction(func, request);\n    q._handler = func;\n    return q;\n};\nasync function runUdf(udfType, f, args) {\n    const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_8__.parseArgs)(args);\n    const syscallArgs = {\n        udfType,\n        args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(queryArgs),\n        ...(0,_components_paths_js__WEBPACK_IMPORTED_MODULE_11__.getFunctionAddress)(f)\n    };\n    const result = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_9__.performAsyncSyscall)(\"1.0/runUdf\", syscallArgs);\n    return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(result);\n} //# sourceMappingURL=registration_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/registration_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/scheduler_impl.js":
/*!********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/scheduler_impl.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setupActionScheduler: () => (/* binding */ setupActionScheduler),\n/* harmony export */   setupMutationScheduler: () => (/* binding */ setupMutationScheduler)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/validate.js\");\n/* harmony import */ var _components_paths_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/paths.js */ \"(ssr)/./node_modules/convex/dist/esm/server/components/paths.js\");\n\n\n\n\n\n\n\nfunction setupMutationScheduler() {\n    return {\n        runAfter: async (delayMs, functionReference, args)=>{\n            const syscallArgs = runAfterSyscallArgs(delayMs, functionReference, args);\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/schedule\", syscallArgs);\n        },\n        runAt: async (ms_since_epoch_or_date, functionReference, args)=>{\n            const syscallArgs = runAtSyscallArgs(ms_since_epoch_or_date, functionReference, args);\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/schedule\", syscallArgs);\n        },\n        cancel: async (id)=>{\n            (0,_validate_js__WEBPACK_IMPORTED_MODULE_4__.validateArg)(id, 1, \"cancel\", \"id\");\n            const args = {\n                id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id)\n            };\n            await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/cancel_job\", args);\n        }\n    };\n}\nfunction setupActionScheduler(requestId) {\n    return {\n        runAfter: async (delayMs, functionReference, args)=>{\n            const syscallArgs = {\n                requestId,\n                ...runAfterSyscallArgs(delayMs, functionReference, args)\n            };\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/actions/schedule\", syscallArgs);\n        },\n        runAt: async (ms_since_epoch_or_date, functionReference, args)=>{\n            const syscallArgs = {\n                requestId,\n                ...runAtSyscallArgs(ms_since_epoch_or_date, functionReference, args)\n            };\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/actions/schedule\", syscallArgs);\n        },\n        cancel: async (id)=>{\n            (0,_validate_js__WEBPACK_IMPORTED_MODULE_4__.validateArg)(id, 1, \"cancel\", \"id\");\n            const syscallArgs = {\n                id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id)\n            };\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/actions/cancel_job\", syscallArgs);\n        }\n    };\n}\nfunction runAfterSyscallArgs(delayMs, functionReference, args) {\n    if (typeof delayMs !== \"number\") {\n        throw new Error(\"`delayMs` must be a number\");\n    }\n    if (!isFinite(delayMs)) {\n        throw new Error(\"`delayMs` must be a finite number\");\n    }\n    if (delayMs < 0) {\n        throw new Error(\"`delayMs` must be non-negative\");\n    }\n    const functionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_3__.parseArgs)(args);\n    const address = (0,_components_paths_js__WEBPACK_IMPORTED_MODULE_5__.getFunctionAddress)(functionReference);\n    const ts = (Date.now() + delayMs) / 1e3;\n    return {\n        ...address,\n        ts,\n        args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(functionArgs),\n        version: _index_js__WEBPACK_IMPORTED_MODULE_1__.version\n    };\n}\nfunction runAtSyscallArgs(ms_since_epoch_or_date, functionReference, args) {\n    let ts;\n    if (ms_since_epoch_or_date instanceof Date) {\n        ts = ms_since_epoch_or_date.valueOf() / 1e3;\n    } else if (typeof ms_since_epoch_or_date === \"number\") {\n        ts = ms_since_epoch_or_date / 1e3;\n    } else {\n        throw new Error(\"The invoke time must a Date or a timestamp\");\n    }\n    const address = (0,_components_paths_js__WEBPACK_IMPORTED_MODULE_5__.getFunctionAddress)(functionReference);\n    const functionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_3__.parseArgs)(args);\n    return {\n        ...address,\n        ts,\n        args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(functionArgs),\n        version: _index_js__WEBPACK_IMPORTED_MODULE_1__.version\n    };\n} //# sourceMappingURL=scheduler_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL3NjaGVkdWxlcl9pbXBsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQWE7QUFDd0M7QUFDWjtBQUNVO0FBQ0Q7QUFDTjtBQUNnQjtBQUNyRCxTQUFTTTtJQUNkLE9BQU87UUFDTEMsVUFBVSxPQUFPQyxTQUFTQyxtQkFBbUJDO1lBQzNDLE1BQU1DLGNBQWNDLG9CQUFvQkosU0FBU0MsbUJBQW1CQztZQUNwRSxPQUFPLE1BQU1SLGdFQUFtQkEsQ0FBQyxnQkFBZ0JTO1FBQ25EO1FBQ0FFLE9BQU8sT0FBT0Msd0JBQXdCTCxtQkFBbUJDO1lBQ3ZELE1BQU1DLGNBQWNJLGlCQUNsQkQsd0JBQ0FMLG1CQUNBQztZQUVGLE9BQU8sTUFBTVIsZ0VBQW1CQSxDQUFDLGdCQUFnQlM7UUFDbkQ7UUFDQUssUUFBUSxPQUFPQztZQUNiYix5REFBV0EsQ0FBQ2EsSUFBSSxHQUFHLFVBQVU7WUFDN0IsTUFBTVAsT0FBTztnQkFBRU8sSUFBSWpCLDhEQUFZQSxDQUFDaUI7WUFBSTtZQUNwQyxNQUFNZixnRUFBbUJBLENBQUMsa0JBQWtCUTtRQUM5QztJQUNGO0FBQ0Y7QUFDTyxTQUFTUSxxQkFBcUJDLFNBQVM7SUFDNUMsT0FBTztRQUNMWixVQUFVLE9BQU9DLFNBQVNDLG1CQUFtQkM7WUFDM0MsTUFBTUMsY0FBYztnQkFDbEJRO2dCQUNBLEdBQUdQLG9CQUFvQkosU0FBU0MsbUJBQW1CQyxLQUFLO1lBQzFEO1lBQ0EsT0FBTyxNQUFNUixnRUFBbUJBLENBQUMsd0JBQXdCUztRQUMzRDtRQUNBRSxPQUFPLE9BQU9DLHdCQUF3QkwsbUJBQW1CQztZQUN2RCxNQUFNQyxjQUFjO2dCQUNsQlE7Z0JBQ0EsR0FBR0osaUJBQWlCRCx3QkFBd0JMLG1CQUFtQkMsS0FBSztZQUN0RTtZQUNBLE9BQU8sTUFBTVIsZ0VBQW1CQSxDQUFDLHdCQUF3QlM7UUFDM0Q7UUFDQUssUUFBUSxPQUFPQztZQUNiYix5REFBV0EsQ0FBQ2EsSUFBSSxHQUFHLFVBQVU7WUFDN0IsTUFBTU4sY0FBYztnQkFBRU0sSUFBSWpCLDhEQUFZQSxDQUFDaUI7WUFBSTtZQUMzQyxPQUFPLE1BQU1mLGdFQUFtQkEsQ0FBQywwQkFBMEJTO1FBQzdEO0lBQ0Y7QUFDRjtBQUNBLFNBQVNDLG9CQUFvQkosT0FBTyxFQUFFQyxpQkFBaUIsRUFBRUMsSUFBSTtJQUMzRCxJQUFJLE9BQU9GLFlBQVksVUFBVTtRQUMvQixNQUFNLElBQUlZLE1BQU07SUFDbEI7SUFDQSxJQUFJLENBQUNDLFNBQVNiLFVBQVU7UUFDdEIsTUFBTSxJQUFJWSxNQUFNO0lBQ2xCO0lBQ0EsSUFBSVosVUFBVSxHQUFHO1FBQ2YsTUFBTSxJQUFJWSxNQUFNO0lBQ2xCO0lBQ0EsTUFBTUUsZUFBZW5CLDJEQUFTQSxDQUFDTztJQUMvQixNQUFNYSxVQUFVbEIsd0VBQWtCQSxDQUFDSTtJQUNuQyxNQUFNZSxLQUFLLENBQUNDLEtBQUtDLEdBQUcsS0FBS2xCLE9BQU0sSUFBSztJQUNwQyxPQUFPO1FBQ0wsR0FBR2UsT0FBTztRQUNWQztRQUNBZCxNQUFNViw4REFBWUEsQ0FBQ3NCO1FBQ25CckIsT0FBT0EsZ0RBQUFBO0lBQ1Q7QUFDRjtBQUNBLFNBQVNjLGlCQUFpQkQsc0JBQXNCLEVBQUVMLGlCQUFpQixFQUFFQyxJQUFJO0lBQ3ZFLElBQUljO0lBQ0osSUFBSVYsa0NBQWtDVyxNQUFNO1FBQzFDRCxLQUFLVix1QkFBdUJhLE9BQU8sS0FBSztJQUMxQyxPQUFPLElBQUksT0FBT2IsMkJBQTJCLFVBQVU7UUFDckRVLEtBQUtWLHlCQUF5QjtJQUNoQyxPQUFPO1FBQ0wsTUFBTSxJQUFJTSxNQUFNO0lBQ2xCO0lBQ0EsTUFBTUcsVUFBVWxCLHdFQUFrQkEsQ0FBQ0k7SUFDbkMsTUFBTWEsZUFBZW5CLDJEQUFTQSxDQUFDTztJQUMvQixPQUFPO1FBQ0wsR0FBR2EsT0FBTztRQUNWQztRQUNBZCxNQUFNViw4REFBWUEsQ0FBQ3NCO1FBQ25CckIsT0FBT0EsZ0RBQUFBO0lBQ1Q7QUFDRixFQUNBLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYXNvcl9jbG9uZS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvc2NoZWR1bGVyX2ltcGwuanM/ZWM1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IGNvbnZleFRvSnNvbiB9IGZyb20gXCIuLi8uLi92YWx1ZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tIFwiLi4vLi4vaW5kZXguanNcIjtcbmltcG9ydCB7IHBlcmZvcm1Bc3luY1N5c2NhbGwgfSBmcm9tIFwiLi9zeXNjYWxsLmpzXCI7XG5pbXBvcnQgeyBwYXJzZUFyZ3MgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyB2YWxpZGF0ZUFyZyB9IGZyb20gXCIuL3ZhbGlkYXRlLmpzXCI7XG5pbXBvcnQgeyBnZXRGdW5jdGlvbkFkZHJlc3MgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9wYXRocy5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwTXV0YXRpb25TY2hlZHVsZXIoKSB7XG4gIHJldHVybiB7XG4gICAgcnVuQWZ0ZXI6IGFzeW5jIChkZWxheU1zLCBmdW5jdGlvblJlZmVyZW5jZSwgYXJncykgPT4ge1xuICAgICAgY29uc3Qgc3lzY2FsbEFyZ3MgPSBydW5BZnRlclN5c2NhbGxBcmdzKGRlbGF5TXMsIGZ1bmN0aW9uUmVmZXJlbmNlLCBhcmdzKTtcbiAgICAgIHJldHVybiBhd2FpdCBwZXJmb3JtQXN5bmNTeXNjYWxsKFwiMS4wL3NjaGVkdWxlXCIsIHN5c2NhbGxBcmdzKTtcbiAgICB9LFxuICAgIHJ1bkF0OiBhc3luYyAobXNfc2luY2VfZXBvY2hfb3JfZGF0ZSwgZnVuY3Rpb25SZWZlcmVuY2UsIGFyZ3MpID0+IHtcbiAgICAgIGNvbnN0IHN5c2NhbGxBcmdzID0gcnVuQXRTeXNjYWxsQXJncyhcbiAgICAgICAgbXNfc2luY2VfZXBvY2hfb3JfZGF0ZSxcbiAgICAgICAgZnVuY3Rpb25SZWZlcmVuY2UsXG4gICAgICAgIGFyZ3NcbiAgICAgICk7XG4gICAgICByZXR1cm4gYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9zY2hlZHVsZVwiLCBzeXNjYWxsQXJncyk7XG4gICAgfSxcbiAgICBjYW5jZWw6IGFzeW5jIChpZCkgPT4ge1xuICAgICAgdmFsaWRhdGVBcmcoaWQsIDEsIFwiY2FuY2VsXCIsIFwiaWRcIik7XG4gICAgICBjb25zdCBhcmdzID0geyBpZDogY29udmV4VG9Kc29uKGlkKSB9O1xuICAgICAgYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9jYW5jZWxfam9iXCIsIGFyZ3MpO1xuICAgIH1cbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cEFjdGlvblNjaGVkdWxlcihyZXF1ZXN0SWQpIHtcbiAgcmV0dXJuIHtcbiAgICBydW5BZnRlcjogYXN5bmMgKGRlbGF5TXMsIGZ1bmN0aW9uUmVmZXJlbmNlLCBhcmdzKSA9PiB7XG4gICAgICBjb25zdCBzeXNjYWxsQXJncyA9IHtcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICAuLi5ydW5BZnRlclN5c2NhbGxBcmdzKGRlbGF5TXMsIGZ1bmN0aW9uUmVmZXJlbmNlLCBhcmdzKVxuICAgICAgfTtcbiAgICAgIHJldHVybiBhd2FpdCBwZXJmb3JtQXN5bmNTeXNjYWxsKFwiMS4wL2FjdGlvbnMvc2NoZWR1bGVcIiwgc3lzY2FsbEFyZ3MpO1xuICAgIH0sXG4gICAgcnVuQXQ6IGFzeW5jIChtc19zaW5jZV9lcG9jaF9vcl9kYXRlLCBmdW5jdGlvblJlZmVyZW5jZSwgYXJncykgPT4ge1xuICAgICAgY29uc3Qgc3lzY2FsbEFyZ3MgPSB7XG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgLi4ucnVuQXRTeXNjYWxsQXJncyhtc19zaW5jZV9lcG9jaF9vcl9kYXRlLCBmdW5jdGlvblJlZmVyZW5jZSwgYXJncylcbiAgICAgIH07XG4gICAgICByZXR1cm4gYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9hY3Rpb25zL3NjaGVkdWxlXCIsIHN5c2NhbGxBcmdzKTtcbiAgICB9LFxuICAgIGNhbmNlbDogYXN5bmMgKGlkKSA9PiB7XG4gICAgICB2YWxpZGF0ZUFyZyhpZCwgMSwgXCJjYW5jZWxcIiwgXCJpZFwiKTtcbiAgICAgIGNvbnN0IHN5c2NhbGxBcmdzID0geyBpZDogY29udmV4VG9Kc29uKGlkKSB9O1xuICAgICAgcmV0dXJuIGF3YWl0IHBlcmZvcm1Bc3luY1N5c2NhbGwoXCIxLjAvYWN0aW9ucy9jYW5jZWxfam9iXCIsIHN5c2NhbGxBcmdzKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBydW5BZnRlclN5c2NhbGxBcmdzKGRlbGF5TXMsIGZ1bmN0aW9uUmVmZXJlbmNlLCBhcmdzKSB7XG4gIGlmICh0eXBlb2YgZGVsYXlNcyAhPT0gXCJudW1iZXJcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImBkZWxheU1zYCBtdXN0IGJlIGEgbnVtYmVyXCIpO1xuICB9XG4gIGlmICghaXNGaW5pdGUoZGVsYXlNcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJgZGVsYXlNc2AgbXVzdCBiZSBhIGZpbml0ZSBudW1iZXJcIik7XG4gIH1cbiAgaWYgKGRlbGF5TXMgPCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYGRlbGF5TXNgIG11c3QgYmUgbm9uLW5lZ2F0aXZlXCIpO1xuICB9XG4gIGNvbnN0IGZ1bmN0aW9uQXJncyA9IHBhcnNlQXJncyhhcmdzKTtcbiAgY29uc3QgYWRkcmVzcyA9IGdldEZ1bmN0aW9uQWRkcmVzcyhmdW5jdGlvblJlZmVyZW5jZSk7XG4gIGNvbnN0IHRzID0gKERhdGUubm93KCkgKyBkZWxheU1zKSAvIDFlMztcbiAgcmV0dXJuIHtcbiAgICAuLi5hZGRyZXNzLFxuICAgIHRzLFxuICAgIGFyZ3M6IGNvbnZleFRvSnNvbihmdW5jdGlvbkFyZ3MpLFxuICAgIHZlcnNpb25cbiAgfTtcbn1cbmZ1bmN0aW9uIHJ1bkF0U3lzY2FsbEFyZ3MobXNfc2luY2VfZXBvY2hfb3JfZGF0ZSwgZnVuY3Rpb25SZWZlcmVuY2UsIGFyZ3MpIHtcbiAgbGV0IHRzO1xuICBpZiAobXNfc2luY2VfZXBvY2hfb3JfZGF0ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICB0cyA9IG1zX3NpbmNlX2Vwb2NoX29yX2RhdGUudmFsdWVPZigpIC8gMWUzO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBtc19zaW5jZV9lcG9jaF9vcl9kYXRlID09PSBcIm51bWJlclwiKSB7XG4gICAgdHMgPSBtc19zaW5jZV9lcG9jaF9vcl9kYXRlIC8gMWUzO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBpbnZva2UgdGltZSBtdXN0IGEgRGF0ZSBvciBhIHRpbWVzdGFtcFwiKTtcbiAgfVxuICBjb25zdCBhZGRyZXNzID0gZ2V0RnVuY3Rpb25BZGRyZXNzKGZ1bmN0aW9uUmVmZXJlbmNlKTtcbiAgY29uc3QgZnVuY3Rpb25BcmdzID0gcGFyc2VBcmdzKGFyZ3MpO1xuICByZXR1cm4ge1xuICAgIC4uLmFkZHJlc3MsXG4gICAgdHMsXG4gICAgYXJnczogY29udmV4VG9Kc29uKGZ1bmN0aW9uQXJncyksXG4gICAgdmVyc2lvblxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVyX2ltcGwuanMubWFwXG4iXSwibmFtZXMiOlsiY29udmV4VG9Kc29uIiwidmVyc2lvbiIsInBlcmZvcm1Bc3luY1N5c2NhbGwiLCJwYXJzZUFyZ3MiLCJ2YWxpZGF0ZUFyZyIsImdldEZ1bmN0aW9uQWRkcmVzcyIsInNldHVwTXV0YXRpb25TY2hlZHVsZXIiLCJydW5BZnRlciIsImRlbGF5TXMiLCJmdW5jdGlvblJlZmVyZW5jZSIsImFyZ3MiLCJzeXNjYWxsQXJncyIsInJ1bkFmdGVyU3lzY2FsbEFyZ3MiLCJydW5BdCIsIm1zX3NpbmNlX2Vwb2NoX29yX2RhdGUiLCJydW5BdFN5c2NhbGxBcmdzIiwiY2FuY2VsIiwiaWQiLCJzZXR1cEFjdGlvblNjaGVkdWxlciIsInJlcXVlc3RJZCIsIkVycm9yIiwiaXNGaW5pdGUiLCJmdW5jdGlvbkFyZ3MiLCJhZGRyZXNzIiwidHMiLCJEYXRlIiwibm93IiwidmFsdWVPZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/scheduler_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/search_filter_builder_impl.js":
/*!********************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/search_filter_builder_impl.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SearchFilterBuilderImpl: () => (/* binding */ SearchFilterBuilderImpl)\n/* harmony export */ });\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n/* harmony import */ var _search_filter_builder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../search_filter_builder.js */ \"(ssr)/./node_modules/convex/dist/esm/server/search_filter_builder.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/validate.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\nclass SearchFilterBuilderImpl extends _search_filter_builder_js__WEBPACK_IMPORTED_MODULE_1__.SearchFilter {\n    constructor(filters){\n        super();\n        __publicField(this, \"filters\");\n        __publicField(this, \"isConsumed\");\n        this.filters = filters;\n        this.isConsumed = false;\n    }\n    static new() {\n        return new SearchFilterBuilderImpl([]);\n    }\n    consume() {\n        if (this.isConsumed) {\n            throw new Error(\"SearchFilterBuilder has already been used! Chain your method calls like `q => q.search(...).eq(...)`.\");\n        }\n        this.isConsumed = true;\n    }\n    search(fieldName, query) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_2__.validateArg)(fieldName, 1, \"search\", \"fieldName\");\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_2__.validateArg)(query, 2, \"search\", \"query\");\n        this.consume();\n        return new SearchFilterBuilderImpl(this.filters.concat({\n            type: \"Search\",\n            fieldPath: fieldName,\n            value: query\n        }));\n    }\n    eq(fieldName, value) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_2__.validateArg)(fieldName, 1, \"eq\", \"fieldName\");\n        if (arguments.length !== 2) {\n            (0,_validate_js__WEBPACK_IMPORTED_MODULE_2__.validateArg)(value, 2, \"search\", \"value\");\n        }\n        this.consume();\n        return new SearchFilterBuilderImpl(this.filters.concat({\n            type: \"Eq\",\n            fieldPath: fieldName,\n            value: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_0__.convexOrUndefinedToJson)(value)\n        }));\n    }\n    export() {\n        this.consume();\n        return this.filters;\n    }\n} //# sourceMappingURL=search_filter_builder_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL3NlYXJjaF9maWx0ZXJfYnVpbGRlcl9pbXBsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBYTtBQUNiLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1KLFVBQVVJLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksZ0JBQWdCLENBQUNOLEtBQUtDLEtBQUtDLFFBQVVILGdCQUFnQkMsS0FBSyxPQUFPQyxRQUFRLFdBQVdBLE1BQU0sS0FBS0EsS0FBS0M7QUFDeEM7QUFHM0I7QUFDTztBQUNyQyxNQUFNUSxnQ0FBZ0NGLG1FQUFZQTtJQUN2REcsWUFBWUMsT0FBTyxDQUFFO1FBQ25CLEtBQUs7UUFDTE4sY0FBYyxJQUFJLEVBQUU7UUFDcEJBLGNBQWMsSUFBSSxFQUFFO1FBQ3BCLElBQUksQ0FBQ00sT0FBTyxHQUFHQTtRQUNmLElBQUksQ0FBQ0MsVUFBVSxHQUFHO0lBQ3BCO0lBQ0EsT0FBT0MsTUFBTTtRQUNYLE9BQU8sSUFBSUosd0JBQXdCLEVBQUU7SUFDdkM7SUFDQUssVUFBVTtRQUNSLElBQUksSUFBSSxDQUFDRixVQUFVLEVBQUU7WUFDbkIsTUFBTSxJQUFJRyxNQUNSO1FBRUo7UUFDQSxJQUFJLENBQUNILFVBQVUsR0FBRztJQUNwQjtJQUNBSSxPQUFPQyxTQUFTLEVBQUVDLEtBQUssRUFBRTtRQUN2QlYseURBQVdBLENBQUNTLFdBQVcsR0FBRyxVQUFVO1FBQ3BDVCx5REFBV0EsQ0FBQ1UsT0FBTyxHQUFHLFVBQVU7UUFDaEMsSUFBSSxDQUFDSixPQUFPO1FBQ1osT0FBTyxJQUFJTCx3QkFDVCxJQUFJLENBQUNFLE9BQU8sQ0FBQ1EsTUFBTSxDQUFDO1lBQ2xCQyxNQUFNO1lBQ05DLFdBQVdKO1lBQ1hoQixPQUFPaUI7UUFDVDtJQUVKO0lBQ0FJLEdBQUdMLFNBQVMsRUFBRWhCLEtBQUssRUFBRTtRQUNuQk8seURBQVdBLENBQUNTLFdBQVcsR0FBRyxNQUFNO1FBQ2hDLElBQUlNLFVBQVVDLE1BQU0sS0FBSyxHQUFHO1lBQzFCaEIseURBQVdBLENBQUNQLE9BQU8sR0FBRyxVQUFVO1FBQ2xDO1FBQ0EsSUFBSSxDQUFDYSxPQUFPO1FBQ1osT0FBTyxJQUFJTCx3QkFDVCxJQUFJLENBQUNFLE9BQU8sQ0FBQ1EsTUFBTSxDQUFDO1lBQ2xCQyxNQUFNO1lBQ05DLFdBQVdKO1lBQ1hoQixPQUFPSyx5RUFBdUJBLENBQUNMO1FBQ2pDO0lBRUo7SUFDQXdCLFNBQVM7UUFDUCxJQUFJLENBQUNYLE9BQU87UUFDWixPQUFPLElBQUksQ0FBQ0gsT0FBTztJQUNyQjtBQUNGLEVBQ0Esc0RBQXNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhc29yX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9zZXJ2ZXIvaW1wbC9zZWFyY2hfZmlsdGVyX2J1aWxkZXJfaW1wbC5qcz80ODI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4gX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbmltcG9ydCB7IGNvbnZleE9yVW5kZWZpbmVkVG9Kc29uIH0gZnJvbSBcIi4uLy4uL3ZhbHVlcy92YWx1ZS5qc1wiO1xuaW1wb3J0IHtcbiAgU2VhcmNoRmlsdGVyXG59IGZyb20gXCIuLi9zZWFyY2hfZmlsdGVyX2J1aWxkZXIuanNcIjtcbmltcG9ydCB7IHZhbGlkYXRlQXJnIH0gZnJvbSBcIi4vdmFsaWRhdGUuanNcIjtcbmV4cG9ydCBjbGFzcyBTZWFyY2hGaWx0ZXJCdWlsZGVySW1wbCBleHRlbmRzIFNlYXJjaEZpbHRlciB7XG4gIGNvbnN0cnVjdG9yKGZpbHRlcnMpIHtcbiAgICBzdXBlcigpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJmaWx0ZXJzXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJpc0NvbnN1bWVkXCIpO1xuICAgIHRoaXMuZmlsdGVycyA9IGZpbHRlcnM7XG4gICAgdGhpcy5pc0NvbnN1bWVkID0gZmFsc2U7XG4gIH1cbiAgc3RhdGljIG5ldygpIHtcbiAgICByZXR1cm4gbmV3IFNlYXJjaEZpbHRlckJ1aWxkZXJJbXBsKFtdKTtcbiAgfVxuICBjb25zdW1lKCkge1xuICAgIGlmICh0aGlzLmlzQ29uc3VtZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJTZWFyY2hGaWx0ZXJCdWlsZGVyIGhhcyBhbHJlYWR5IGJlZW4gdXNlZCEgQ2hhaW4geW91ciBtZXRob2QgY2FsbHMgbGlrZSBgcSA9PiBxLnNlYXJjaCguLi4pLmVxKC4uLilgLlwiXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmlzQ29uc3VtZWQgPSB0cnVlO1xuICB9XG4gIHNlYXJjaChmaWVsZE5hbWUsIHF1ZXJ5KSB7XG4gICAgdmFsaWRhdGVBcmcoZmllbGROYW1lLCAxLCBcInNlYXJjaFwiLCBcImZpZWxkTmFtZVwiKTtcbiAgICB2YWxpZGF0ZUFyZyhxdWVyeSwgMiwgXCJzZWFyY2hcIiwgXCJxdWVyeVwiKTtcbiAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICByZXR1cm4gbmV3IFNlYXJjaEZpbHRlckJ1aWxkZXJJbXBsKFxuICAgICAgdGhpcy5maWx0ZXJzLmNvbmNhdCh7XG4gICAgICAgIHR5cGU6IFwiU2VhcmNoXCIsXG4gICAgICAgIGZpZWxkUGF0aDogZmllbGROYW1lLFxuICAgICAgICB2YWx1ZTogcXVlcnlcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuICBlcShmaWVsZE5hbWUsIHZhbHVlKSB7XG4gICAgdmFsaWRhdGVBcmcoZmllbGROYW1lLCAxLCBcImVxXCIsIFwiZmllbGROYW1lXCIpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAyKSB7XG4gICAgICB2YWxpZGF0ZUFyZyh2YWx1ZSwgMiwgXCJzZWFyY2hcIiwgXCJ2YWx1ZVwiKTtcbiAgICB9XG4gICAgdGhpcy5jb25zdW1lKCk7XG4gICAgcmV0dXJuIG5ldyBTZWFyY2hGaWx0ZXJCdWlsZGVySW1wbChcbiAgICAgIHRoaXMuZmlsdGVycy5jb25jYXQoe1xuICAgICAgICB0eXBlOiBcIkVxXCIsXG4gICAgICAgIGZpZWxkUGF0aDogZmllbGROYW1lLFxuICAgICAgICB2YWx1ZTogY29udmV4T3JVbmRlZmluZWRUb0pzb24odmFsdWUpXG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgZXhwb3J0KCkge1xuICAgIHRoaXMuY29uc3VtZSgpO1xuICAgIHJldHVybiB0aGlzLmZpbHRlcnM7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlYXJjaF9maWx0ZXJfYnVpbGRlcl9pbXBsLmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19kZWZOb3JtYWxQcm9wIiwib2JqIiwia2V5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfX3B1YmxpY0ZpZWxkIiwiY29udmV4T3JVbmRlZmluZWRUb0pzb24iLCJTZWFyY2hGaWx0ZXIiLCJ2YWxpZGF0ZUFyZyIsIlNlYXJjaEZpbHRlckJ1aWxkZXJJbXBsIiwiY29uc3RydWN0b3IiLCJmaWx0ZXJzIiwiaXNDb25zdW1lZCIsIm5ldyIsImNvbnN1bWUiLCJFcnJvciIsInNlYXJjaCIsImZpZWxkTmFtZSIsInF1ZXJ5IiwiY29uY2F0IiwidHlwZSIsImZpZWxkUGF0aCIsImVxIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZXhwb3J0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/search_filter_builder_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/storage_impl.js":
/*!******************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/storage_impl.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setupStorageActionWriter: () => (/* binding */ setupStorageActionWriter),\n/* harmony export */   setupStorageReader: () => (/* binding */ setupStorageReader),\n/* harmony export */   setupStorageWriter: () => (/* binding */ setupStorageWriter)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/validate.js\");\n\n\n\n\nfunction setupStorageReader(requestId) {\n    return {\n        getUrl: async (storageId)=>{\n            (0,_validate_js__WEBPACK_IMPORTED_MODULE_2__.validateArg)(storageId, 1, \"getUrl\", \"storageId\");\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/storageGetUrl\", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version,\n                storageId\n            });\n        },\n        getMetadata: async (storageId)=>{\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/storageGetMetadata\", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version,\n                storageId\n            });\n        }\n    };\n}\nfunction setupStorageWriter(requestId) {\n    const reader = setupStorageReader(requestId);\n    return {\n        generateUploadUrl: async ()=>{\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/storageGenerateUploadUrl\", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version\n            });\n        },\n        delete: async (storageId)=>{\n            await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/storageDelete\", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version,\n                storageId\n            });\n        },\n        getUrl: reader.getUrl,\n        getMetadata: reader.getMetadata\n    };\n}\nfunction setupStorageActionWriter(requestId) {\n    const writer = setupStorageWriter(requestId);\n    return {\n        ...writer,\n        store: async (blob, options)=>{\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performJsSyscall)(\"storage/storeBlob\", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version,\n                blob,\n                options\n            });\n        },\n        get: async (storageId)=>{\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performJsSyscall)(\"storage/getBlob\", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version,\n                storageId\n            });\n        }\n    };\n} //# sourceMappingURL=storage_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL3N0b3JhZ2VfaW1wbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBYTtBQUM0QjtBQUM0QjtBQUN6QjtBQUNyQyxTQUFTSSxtQkFBbUJDLFNBQVM7SUFDMUMsT0FBTztRQUNMQyxRQUFRLE9BQU9DO1lBQ2JKLHlEQUFXQSxDQUFDSSxXQUFXLEdBQUcsVUFBVTtZQUNwQyxPQUFPLE1BQU1OLGdFQUFtQkEsQ0FBQyxxQkFBcUI7Z0JBQ3BESTtnQkFDQUwsT0FBT0EsZ0RBQUFBO2dCQUNQTztZQUNGO1FBQ0Y7UUFDQUMsYUFBYSxPQUFPRDtZQUNsQixPQUFPLE1BQU1OLGdFQUFtQkEsQ0FBQywwQkFBMEI7Z0JBQ3pESTtnQkFDQUwsT0FBT0EsZ0RBQUFBO2dCQUNQTztZQUNGO1FBQ0Y7SUFDRjtBQUNGO0FBQ08sU0FBU0UsbUJBQW1CSixTQUFTO0lBQzFDLE1BQU1LLFNBQVNOLG1CQUFtQkM7SUFDbEMsT0FBTztRQUNMTSxtQkFBbUI7WUFDakIsT0FBTyxNQUFNVixnRUFBbUJBLENBQUMsZ0NBQWdDO2dCQUMvREk7Z0JBQ0FMLE9BQU9BLGdEQUFBQTtZQUNUO1FBQ0Y7UUFDQVksUUFBUSxPQUFPTDtZQUNiLE1BQU1OLGdFQUFtQkEsQ0FBQyxxQkFBcUI7Z0JBQzdDSTtnQkFDQUwsT0FBT0EsZ0RBQUFBO2dCQUNQTztZQUNGO1FBQ0Y7UUFDQUQsUUFBUUksT0FBT0osTUFBTTtRQUNyQkUsYUFBYUUsT0FBT0YsV0FBVztJQUNqQztBQUNGO0FBQ08sU0FBU0sseUJBQXlCUixTQUFTO0lBQ2hELE1BQU1TLFNBQVNMLG1CQUFtQko7SUFDbEMsT0FBTztRQUNMLEdBQUdTLE1BQU07UUFDVEMsT0FBTyxPQUFPQyxNQUFNQztZQUNsQixPQUFPLE1BQU1mLDZEQUFnQkEsQ0FBQyxxQkFBcUI7Z0JBQ2pERztnQkFDQUwsT0FBT0EsZ0RBQUFBO2dCQUNQZ0I7Z0JBQ0FDO1lBQ0Y7UUFDRjtRQUNBQyxLQUFLLE9BQU9YO1lBQ1YsT0FBTyxNQUFNTCw2REFBZ0JBLENBQUMsbUJBQW1CO2dCQUMvQ0c7Z0JBQ0FMLE9BQU9BLGdEQUFBQTtnQkFDUE87WUFDRjtRQUNGO0lBQ0Y7QUFDRixFQUNBLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYXNvcl9jbG9uZS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2ltcGwvc3RvcmFnZV9pbXBsLmpzPzg5MGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4uLy4uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBwZXJmb3JtQXN5bmNTeXNjYWxsLCBwZXJmb3JtSnNTeXNjYWxsIH0gZnJvbSBcIi4vc3lzY2FsbC5qc1wiO1xuaW1wb3J0IHsgdmFsaWRhdGVBcmcgfSBmcm9tIFwiLi92YWxpZGF0ZS5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHNldHVwU3RvcmFnZVJlYWRlcihyZXF1ZXN0SWQpIHtcbiAgcmV0dXJuIHtcbiAgICBnZXRVcmw6IGFzeW5jIChzdG9yYWdlSWQpID0+IHtcbiAgICAgIHZhbGlkYXRlQXJnKHN0b3JhZ2VJZCwgMSwgXCJnZXRVcmxcIiwgXCJzdG9yYWdlSWRcIik7XG4gICAgICByZXR1cm4gYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9zdG9yYWdlR2V0VXJsXCIsIHtcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICB2ZXJzaW9uLFxuICAgICAgICBzdG9yYWdlSWRcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0TWV0YWRhdGE6IGFzeW5jIChzdG9yYWdlSWQpID0+IHtcbiAgICAgIHJldHVybiBhd2FpdCBwZXJmb3JtQXN5bmNTeXNjYWxsKFwiMS4wL3N0b3JhZ2VHZXRNZXRhZGF0YVwiLCB7XG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgdmVyc2lvbixcbiAgICAgICAgc3RvcmFnZUlkXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0dXBTdG9yYWdlV3JpdGVyKHJlcXVlc3RJZCkge1xuICBjb25zdCByZWFkZXIgPSBzZXR1cFN0b3JhZ2VSZWFkZXIocmVxdWVzdElkKTtcbiAgcmV0dXJuIHtcbiAgICBnZW5lcmF0ZVVwbG9hZFVybDogYXN5bmMgKCkgPT4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHBlcmZvcm1Bc3luY1N5c2NhbGwoXCIxLjAvc3RvcmFnZUdlbmVyYXRlVXBsb2FkVXJsXCIsIHtcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICB2ZXJzaW9uXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRlbGV0ZTogYXN5bmMgKHN0b3JhZ2VJZCkgPT4ge1xuICAgICAgYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9zdG9yYWdlRGVsZXRlXCIsIHtcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICB2ZXJzaW9uLFxuICAgICAgICBzdG9yYWdlSWRcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0VXJsOiByZWFkZXIuZ2V0VXJsLFxuICAgIGdldE1ldGFkYXRhOiByZWFkZXIuZ2V0TWV0YWRhdGFcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFN0b3JhZ2VBY3Rpb25Xcml0ZXIocmVxdWVzdElkKSB7XG4gIGNvbnN0IHdyaXRlciA9IHNldHVwU3RvcmFnZVdyaXRlcihyZXF1ZXN0SWQpO1xuICByZXR1cm4ge1xuICAgIC4uLndyaXRlcixcbiAgICBzdG9yZTogYXN5bmMgKGJsb2IsIG9wdGlvbnMpID0+IHtcbiAgICAgIHJldHVybiBhd2FpdCBwZXJmb3JtSnNTeXNjYWxsKFwic3RvcmFnZS9zdG9yZUJsb2JcIiwge1xuICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgIHZlcnNpb24sXG4gICAgICAgIGJsb2IsXG4gICAgICAgIG9wdGlvbnNcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBhc3luYyAoc3RvcmFnZUlkKSA9PiB7XG4gICAgICByZXR1cm4gYXdhaXQgcGVyZm9ybUpzU3lzY2FsbChcInN0b3JhZ2UvZ2V0QmxvYlwiLCB7XG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgdmVyc2lvbixcbiAgICAgICAgc3RvcmFnZUlkXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdG9yYWdlX2ltcGwuanMubWFwXG4iXSwibmFtZXMiOlsidmVyc2lvbiIsInBlcmZvcm1Bc3luY1N5c2NhbGwiLCJwZXJmb3JtSnNTeXNjYWxsIiwidmFsaWRhdGVBcmciLCJzZXR1cFN0b3JhZ2VSZWFkZXIiLCJyZXF1ZXN0SWQiLCJnZXRVcmwiLCJzdG9yYWdlSWQiLCJnZXRNZXRhZGF0YSIsInNldHVwU3RvcmFnZVdyaXRlciIsInJlYWRlciIsImdlbmVyYXRlVXBsb2FkVXJsIiwiZGVsZXRlIiwic2V0dXBTdG9yYWdlQWN0aW9uV3JpdGVyIiwid3JpdGVyIiwic3RvcmUiLCJibG9iIiwib3B0aW9ucyIsImdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/storage_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js":
/*!*************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/syscall.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   performAsyncSyscall: () => (/* binding */ performAsyncSyscall),\n/* harmony export */   performJsSyscall: () => (/* binding */ performJsSyscall),\n/* harmony export */   performSyscall: () => (/* binding */ performSyscall)\n/* harmony export */ });\n/* harmony import */ var _values_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/errors.js */ \"(ssr)/./node_modules/convex/dist/esm/values/errors.js\");\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../values/value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n\n\n\nfunction performSyscall(op, arg) {\n    if (typeof Convex === \"undefined\" || Convex.syscall === void 0) {\n        throw new Error(\"The Convex database and auth objects are being used outside of a Convex backend. Did you mean to use `useQuery` or `useMutation` to call a Convex function?\");\n    }\n    const resultStr = Convex.syscall(op, JSON.stringify(arg));\n    return JSON.parse(resultStr);\n}\nasync function performAsyncSyscall(op, arg) {\n    if (typeof Convex === \"undefined\" || Convex.asyncSyscall === void 0) {\n        throw new Error(\"The Convex database and auth objects are being used outside of a Convex backend. Did you mean to use `useQuery` or `useMutation` to call a Convex function?\");\n    }\n    let resultStr;\n    try {\n        resultStr = await Convex.asyncSyscall(op, JSON.stringify(arg));\n    } catch (e) {\n        if (e.data !== void 0) {\n            const rethrown = new _values_errors_js__WEBPACK_IMPORTED_MODULE_0__.ConvexError(e.message);\n            rethrown.data = (0,_values_value_js__WEBPACK_IMPORTED_MODULE_1__.jsonToConvex)(e.data);\n            throw rethrown;\n        }\n        throw new Error(e.message);\n    }\n    return JSON.parse(resultStr);\n}\nfunction performJsSyscall(op, arg) {\n    if (typeof Convex === \"undefined\" || Convex.jsSyscall === void 0) {\n        throw new Error(\"The Convex database and auth objects are being used outside of a Convex backend. Did you mean to use `useQuery` or `useMutation` to call a Convex function?\");\n    }\n    return Convex.jsSyscall(op, arg);\n} //# sourceMappingURL=syscall.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL3N5c2NhbGwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBYTtBQUN3QztBQUNBO0FBQzlDLFNBQVNFLGVBQWVDLEVBQUUsRUFBRUMsR0FBRztJQUNwQyxJQUFJLE9BQU9DLFdBQVcsZUFBZUEsT0FBT0MsT0FBTyxLQUFLLEtBQUssR0FBRztRQUM5RCxNQUFNLElBQUlDLE1BQ1I7SUFFSjtJQUNBLE1BQU1DLFlBQVlILE9BQU9DLE9BQU8sQ0FBQ0gsSUFBSU0sS0FBS0MsU0FBUyxDQUFDTjtJQUNwRCxPQUFPSyxLQUFLRSxLQUFLLENBQUNIO0FBQ3BCO0FBQ08sZUFBZUksb0JBQW9CVCxFQUFFLEVBQUVDLEdBQUc7SUFDL0MsSUFBSSxPQUFPQyxXQUFXLGVBQWVBLE9BQU9RLFlBQVksS0FBSyxLQUFLLEdBQUc7UUFDbkUsTUFBTSxJQUFJTixNQUNSO0lBRUo7SUFDQSxJQUFJQztJQUNKLElBQUk7UUFDRkEsWUFBWSxNQUFNSCxPQUFPUSxZQUFZLENBQUNWLElBQUlNLEtBQUtDLFNBQVMsQ0FBQ047SUFDM0QsRUFBRSxPQUFPVSxHQUFHO1FBQ1YsSUFBSUEsRUFBRUMsSUFBSSxLQUFLLEtBQUssR0FBRztZQUNyQixNQUFNQyxXQUFXLElBQUloQiwwREFBV0EsQ0FBQ2MsRUFBRUcsT0FBTztZQUMxQ0QsU0FBU0QsSUFBSSxHQUFHZCw4REFBWUEsQ0FBQ2EsRUFBRUMsSUFBSTtZQUNuQyxNQUFNQztRQUNSO1FBQ0EsTUFBTSxJQUFJVCxNQUFNTyxFQUFFRyxPQUFPO0lBQzNCO0lBQ0EsT0FBT1IsS0FBS0UsS0FBSyxDQUFDSDtBQUNwQjtBQUNPLFNBQVNVLGlCQUFpQmYsRUFBRSxFQUFFQyxHQUFHO0lBQ3RDLElBQUksT0FBT0MsV0FBVyxlQUFlQSxPQUFPYyxTQUFTLEtBQUssS0FBSyxHQUFHO1FBQ2hFLE1BQU0sSUFBSVosTUFDUjtJQUVKO0lBQ0EsT0FBT0YsT0FBT2MsU0FBUyxDQUFDaEIsSUFBSUM7QUFDOUIsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmFzb3JfY2xvbmUvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL3N5c2NhbGwuanM/NDg1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IENvbnZleEVycm9yIH0gZnJvbSBcIi4uLy4uL3ZhbHVlcy9lcnJvcnMuanNcIjtcbmltcG9ydCB7IGpzb25Ub0NvbnZleCB9IGZyb20gXCIuLi8uLi92YWx1ZXMvdmFsdWUuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBwZXJmb3JtU3lzY2FsbChvcCwgYXJnKSB7XG4gIGlmICh0eXBlb2YgQ29udmV4ID09PSBcInVuZGVmaW5lZFwiIHx8IENvbnZleC5zeXNjYWxsID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIlRoZSBDb252ZXggZGF0YWJhc2UgYW5kIGF1dGggb2JqZWN0cyBhcmUgYmVpbmcgdXNlZCBvdXRzaWRlIG9mIGEgQ29udmV4IGJhY2tlbmQuIERpZCB5b3UgbWVhbiB0byB1c2UgYHVzZVF1ZXJ5YCBvciBgdXNlTXV0YXRpb25gIHRvIGNhbGwgYSBDb252ZXggZnVuY3Rpb24/XCJcbiAgICApO1xuICB9XG4gIGNvbnN0IHJlc3VsdFN0ciA9IENvbnZleC5zeXNjYWxsKG9wLCBKU09OLnN0cmluZ2lmeShhcmcpKTtcbiAgcmV0dXJuIEpTT04ucGFyc2UocmVzdWx0U3RyKTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwZXJmb3JtQXN5bmNTeXNjYWxsKG9wLCBhcmcpIHtcbiAgaWYgKHR5cGVvZiBDb252ZXggPT09IFwidW5kZWZpbmVkXCIgfHwgQ29udmV4LmFzeW5jU3lzY2FsbCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJUaGUgQ29udmV4IGRhdGFiYXNlIGFuZCBhdXRoIG9iamVjdHMgYXJlIGJlaW5nIHVzZWQgb3V0c2lkZSBvZiBhIENvbnZleCBiYWNrZW5kLiBEaWQgeW91IG1lYW4gdG8gdXNlIGB1c2VRdWVyeWAgb3IgYHVzZU11dGF0aW9uYCB0byBjYWxsIGEgQ29udmV4IGZ1bmN0aW9uP1wiXG4gICAgKTtcbiAgfVxuICBsZXQgcmVzdWx0U3RyO1xuICB0cnkge1xuICAgIHJlc3VsdFN0ciA9IGF3YWl0IENvbnZleC5hc3luY1N5c2NhbGwob3AsIEpTT04uc3RyaW5naWZ5KGFyZykpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUuZGF0YSAhPT0gdm9pZCAwKSB7XG4gICAgICBjb25zdCByZXRocm93biA9IG5ldyBDb252ZXhFcnJvcihlLm1lc3NhZ2UpO1xuICAgICAgcmV0aHJvd24uZGF0YSA9IGpzb25Ub0NvbnZleChlLmRhdGEpO1xuICAgICAgdGhyb3cgcmV0aHJvd247XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihlLm1lc3NhZ2UpO1xuICB9XG4gIHJldHVybiBKU09OLnBhcnNlKHJlc3VsdFN0cik7XG59XG5leHBvcnQgZnVuY3Rpb24gcGVyZm9ybUpzU3lzY2FsbChvcCwgYXJnKSB7XG4gIGlmICh0eXBlb2YgQ29udmV4ID09PSBcInVuZGVmaW5lZFwiIHx8IENvbnZleC5qc1N5c2NhbGwgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiVGhlIENvbnZleCBkYXRhYmFzZSBhbmQgYXV0aCBvYmplY3RzIGFyZSBiZWluZyB1c2VkIG91dHNpZGUgb2YgYSBDb252ZXggYmFja2VuZC4gRGlkIHlvdSBtZWFuIHRvIHVzZSBgdXNlUXVlcnlgIG9yIGB1c2VNdXRhdGlvbmAgdG8gY2FsbCBhIENvbnZleCBmdW5jdGlvbj9cIlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIENvbnZleC5qc1N5c2NhbGwob3AsIGFyZyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zeXNjYWxsLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkNvbnZleEVycm9yIiwianNvblRvQ29udmV4IiwicGVyZm9ybVN5c2NhbGwiLCJvcCIsImFyZyIsIkNvbnZleCIsInN5c2NhbGwiLCJFcnJvciIsInJlc3VsdFN0ciIsIkpTT04iLCJzdHJpbmdpZnkiLCJwYXJzZSIsInBlcmZvcm1Bc3luY1N5c2NhbGwiLCJhc3luY1N5c2NhbGwiLCJlIiwiZGF0YSIsInJldGhyb3duIiwibWVzc2FnZSIsInBlcmZvcm1Kc1N5c2NhbGwiLCJqc1N5c2NhbGwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/validate.js":
/*!**************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/validate.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateArg: () => (/* binding */ validateArg),\n/* harmony export */   validateArgIsInteger: () => (/* binding */ validateArgIsInteger),\n/* harmony export */   validateArgIsNonNegativeInteger: () => (/* binding */ validateArgIsNonNegativeInteger)\n/* harmony export */ });\n\nfunction validateArg(arg, idx, method, argName) {\n    if (arg === void 0) {\n        throw new TypeError(`Must provide arg ${idx} \\`${argName}\\` to \\`${method}\\``);\n    }\n}\nfunction validateArgIsInteger(arg, idx, method, argName) {\n    if (!Number.isInteger(arg)) {\n        throw new TypeError(`Arg ${idx} \\`${argName}\\` to \\`${method}\\` must be an integer`);\n    }\n}\nfunction validateArgIsNonNegativeInteger(arg, idx, method, argName) {\n    if (!Number.isInteger(arg) || arg < 0) {\n        throw new TypeError(`Arg ${idx} \\`${argName}\\` to \\`${method}\\` must be a non-negative integer`);\n    }\n} //# sourceMappingURL=validate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL3ZhbGlkYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFhO0FBQ04sU0FBU0EsWUFBWUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsT0FBTztJQUNuRCxJQUFJSCxRQUFRLEtBQUssR0FBRztRQUNsQixNQUFNLElBQUlJLFVBQ1IsQ0FBQyxpQkFBaUIsRUFBRUgsSUFBSSxHQUFHLEVBQUVFLFFBQVEsUUFBUSxFQUFFRCxPQUFPLEVBQUUsQ0FBQztJQUU3RDtBQUNGO0FBQ08sU0FBU0cscUJBQXFCTCxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsTUFBTSxFQUFFQyxPQUFPO0lBQzVELElBQUksQ0FBQ0csT0FBT0MsU0FBUyxDQUFDUCxNQUFNO1FBQzFCLE1BQU0sSUFBSUksVUFDUixDQUFDLElBQUksRUFBRUgsSUFBSSxHQUFHLEVBQUVFLFFBQVEsUUFBUSxFQUFFRCxPQUFPLHFCQUFxQixDQUFDO0lBRW5FO0FBQ0Y7QUFDTyxTQUFTTSxnQ0FBZ0NSLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLE9BQU87SUFDdkUsSUFBSSxDQUFDRyxPQUFPQyxTQUFTLENBQUNQLFFBQVFBLE1BQU0sR0FBRztRQUNyQyxNQUFNLElBQUlJLFVBQ1IsQ0FBQyxJQUFJLEVBQUVILElBQUksR0FBRyxFQUFFRSxRQUFRLFFBQVEsRUFBRUQsT0FBTyxpQ0FBaUMsQ0FBQztJQUUvRTtBQUNGLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhc29yX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9zZXJ2ZXIvaW1wbC92YWxpZGF0ZS5qcz9hMzZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQXJnKGFyZywgaWR4LCBtZXRob2QsIGFyZ05hbWUpIHtcbiAgaWYgKGFyZyA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIGBNdXN0IHByb3ZpZGUgYXJnICR7aWR4fSBcXGAke2FyZ05hbWV9XFxgIHRvIFxcYCR7bWV0aG9kfVxcYGBcbiAgICApO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVBcmdJc0ludGVnZXIoYXJnLCBpZHgsIG1ldGhvZCwgYXJnTmFtZSkge1xuICBpZiAoIU51bWJlci5pc0ludGVnZXIoYXJnKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBgQXJnICR7aWR4fSBcXGAke2FyZ05hbWV9XFxgIHRvIFxcYCR7bWV0aG9kfVxcYCBtdXN0IGJlIGFuIGludGVnZXJgXG4gICAgKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQXJnSXNOb25OZWdhdGl2ZUludGVnZXIoYXJnLCBpZHgsIG1ldGhvZCwgYXJnTmFtZSkge1xuICBpZiAoIU51bWJlci5pc0ludGVnZXIoYXJnKSB8fCBhcmcgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIGBBcmcgJHtpZHh9IFxcYCR7YXJnTmFtZX1cXGAgdG8gXFxgJHttZXRob2R9XFxgIG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlcmBcbiAgICApO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWxpZGF0ZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ2YWxpZGF0ZUFyZyIsImFyZyIsImlkeCIsIm1ldGhvZCIsImFyZ05hbWUiLCJUeXBlRXJyb3IiLCJ2YWxpZGF0ZUFyZ0lzSW50ZWdlciIsIk51bWJlciIsImlzSW50ZWdlciIsInZhbGlkYXRlQXJnSXNOb25OZWdhdGl2ZUludGVnZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/validate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/vector_search_impl.js":
/*!************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/vector_search_impl.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExpressionImpl: () => (/* binding */ ExpressionImpl),\n/* harmony export */   VectorQueryImpl: () => (/* binding */ VectorQueryImpl),\n/* harmony export */   filterBuilderImpl: () => (/* binding */ filterBuilderImpl),\n/* harmony export */   serializeExpression: () => (/* binding */ serializeExpression),\n/* harmony export */   setupActionVectorSearch: () => (/* binding */ setupActionVectorSearch)\n/* harmony export */ });\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _vector_search_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../vector_search.js */ \"(ssr)/./node_modules/convex/dist/esm/server/vector_search.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/validate.js\");\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../values/value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\nfunction setupActionVectorSearch(requestId) {\n    return async (tableName, indexName, query)=>{\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(tableName, 1, \"vectorSearch\", \"tableName\");\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(indexName, 2, \"vectorSearch\", \"indexName\");\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(query, 3, \"vectorSearch\", \"query\");\n        if (!query.vector || !Array.isArray(query.vector) || query.vector.length === 0) {\n            throw Error(\"`vector` must be a non-empty Array in vectorSearch\");\n        }\n        return await new VectorQueryImpl(requestId, tableName + \".\" + indexName, query).collect();\n    };\n}\nclass VectorQueryImpl {\n    constructor(requestId, indexName, query){\n        __publicField(this, \"requestId\");\n        __publicField(this, \"state\");\n        this.requestId = requestId;\n        const filters = query.filter ? serializeExpression(query.filter(filterBuilderImpl)) : null;\n        this.state = {\n            type: \"preparing\",\n            query: {\n                indexName,\n                limit: query.limit,\n                vector: query.vector,\n                expressions: filters\n            }\n        };\n    }\n    async collect() {\n        if (this.state.type === \"consumed\") {\n            throw new Error(\"This query is closed and can't emit any more values.\");\n        }\n        const query = this.state.query;\n        this.state = {\n            type: \"consumed\"\n        };\n        const { results } = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_0__.performAsyncSyscall)(\"1.0/actions/vectorSearch\", {\n            requestId: this.requestId,\n            version: _index_js__WEBPACK_IMPORTED_MODULE_1__.version,\n            query\n        });\n        return results;\n    }\n}\nclass ExpressionImpl extends _vector_search_js__WEBPACK_IMPORTED_MODULE_2__.FilterExpression {\n    constructor(inner){\n        super();\n        __publicField(this, \"inner\");\n        this.inner = inner;\n    }\n    serialize() {\n        return this.inner;\n    }\n}\nfunction serializeExpression(expr) {\n    if (expr instanceof ExpressionImpl) {\n        return expr.serialize();\n    } else {\n        return {\n            $literal: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_4__.convexOrUndefinedToJson)(expr)\n        };\n    }\n}\nconst filterBuilderImpl = {\n    //  Comparisons  /////////////////////////////////////////////////////////////\n    eq (fieldName, value) {\n        if (typeof fieldName !== \"string\") {\n            throw new Error(\"The first argument to `q.eq` must be a field name.\");\n        }\n        return new ExpressionImpl({\n            $eq: [\n                serializeExpression(new ExpressionImpl({\n                    $field: fieldName\n                })),\n                serializeExpression(value)\n            ]\n        });\n    },\n    //  Logic  ///////////////////////////////////////////////////////////////////\n    or (...exprs) {\n        return new ExpressionImpl({\n            $or: exprs.map(serializeExpression)\n        });\n    }\n}; //# sourceMappingURL=vector_search_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/vector_search_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/index.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpRouter: () => (/* reexport safe */ _router_js__WEBPACK_IMPORTED_MODULE_6__.HttpRouter),\n/* harmony export */   ROUTABLE_HTTP_METHODS: () => (/* reexport safe */ _router_js__WEBPACK_IMPORTED_MODULE_6__.ROUTABLE_HTTP_METHODS),\n/* harmony export */   SearchFilter: () => (/* reexport safe */ _search_filter_builder_js__WEBPACK_IMPORTED_MODULE_3__.SearchFilter),\n/* harmony export */   actionGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.actionGeneric),\n/* harmony export */   anyApi: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_7__.anyApi),\n/* harmony export */   componentsGeneric: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.componentsGeneric),\n/* harmony export */   createFunctionHandle: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.createFunctionHandle),\n/* harmony export */   cronJobs: () => (/* reexport safe */ _cron_js__WEBPACK_IMPORTED_MODULE_5__.cronJobs),\n/* harmony export */   currentSystemUdfInComponent: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.currentSystemUdfInComponent),\n/* harmony export */   defineApp: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.defineApp),\n/* harmony export */   defineComponent: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.defineComponent),\n/* harmony export */   defineSchema: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_9__.defineSchema),\n/* harmony export */   defineTable: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_9__.defineTable),\n/* harmony export */   filterApi: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_7__.filterApi),\n/* harmony export */   getFunctionAddress: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.getFunctionAddress),\n/* harmony export */   getFunctionName: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_7__.getFunctionName),\n/* harmony export */   httpActionGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.httpActionGeneric),\n/* harmony export */   httpRouter: () => (/* reexport safe */ _router_js__WEBPACK_IMPORTED_MODULE_6__.httpRouter),\n/* harmony export */   internalActionGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.internalActionGeneric),\n/* harmony export */   internalMutationGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.internalMutationGeneric),\n/* harmony export */   internalQueryGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.internalQueryGeneric),\n/* harmony export */   makeFunctionReference: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_7__.makeFunctionReference),\n/* harmony export */   mutationGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.mutationGeneric),\n/* harmony export */   paginationOptsValidator: () => (/* reexport safe */ _pagination_js__WEBPACK_IMPORTED_MODULE_2__.paginationOptsValidator),\n/* harmony export */   queryGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.queryGeneric)\n/* harmony export */ });\n/* harmony import */ var _database_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./database.js */ \"(ssr)/./node_modules/convex/dist/esm/server/database.js\");\n/* harmony import */ var _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./impl/registration_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/registration_impl.js\");\n/* harmony import */ var _pagination_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pagination.js */ \"(ssr)/./node_modules/convex/dist/esm/server/pagination.js\");\n/* harmony import */ var _search_filter_builder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./search_filter_builder.js */ \"(ssr)/./node_modules/convex/dist/esm/server/search_filter_builder.js\");\n/* harmony import */ var _storage_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./storage.js */ \"(ssr)/./node_modules/convex/dist/esm/server/storage.js\");\n/* harmony import */ var _cron_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cron.js */ \"(ssr)/./node_modules/convex/dist/esm/server/cron.js\");\n/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./router.js */ \"(ssr)/./node_modules/convex/dist/esm/server/router.js\");\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/index.js */ \"(ssr)/./node_modules/convex/dist/esm/server/components/index.js\");\n/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./schema.js */ \"(ssr)/./node_modules/convex/dist/esm/server/schema.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFhO0FBQ2lCO0FBU087QUFDTDtBQUNXO0FBQ2Q7QUFDUTtBQUN1QztBQU0xRDtBQU1hO0FBQ3FDO0FBQ1Q7QUFDSCxDQUN4RCxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmFzb3JfY2xvbmUvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbmRleC5qcz84MzkwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZGF0YWJhc2UuanNcIjtcbmV4cG9ydCB7XG4gIGFjdGlvbkdlbmVyaWMsXG4gIGh0dHBBY3Rpb25HZW5lcmljLFxuICBtdXRhdGlvbkdlbmVyaWMsXG4gIHF1ZXJ5R2VuZXJpYyxcbiAgaW50ZXJuYWxBY3Rpb25HZW5lcmljLFxuICBpbnRlcm5hbE11dGF0aW9uR2VuZXJpYyxcbiAgaW50ZXJuYWxRdWVyeUdlbmVyaWNcbn0gZnJvbSBcIi4vaW1wbC9yZWdpc3RyYXRpb25faW1wbC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vcGFnaW5hdGlvbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2VhcmNoX2ZpbHRlcl9idWlsZGVyLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zdG9yYWdlLmpzXCI7XG5leHBvcnQgeyBjcm9uSm9icyB9IGZyb20gXCIuL2Nyb24uanNcIjtcbmV4cG9ydCB7IGh0dHBSb3V0ZXIsIEh0dHBSb3V0ZXIsIFJPVVRBQkxFX0hUVFBfTUVUSE9EUyB9IGZyb20gXCIuL3JvdXRlci5qc1wiO1xuZXhwb3J0IHtcbiAgYW55QXBpLFxuICBnZXRGdW5jdGlvbk5hbWUsXG4gIG1ha2VGdW5jdGlvblJlZmVyZW5jZSxcbiAgZmlsdGVyQXBpXG59IGZyb20gXCIuL2FwaS5qc1wiO1xuZXhwb3J0IHtcbiAgZGVmaW5lQXBwLFxuICBkZWZpbmVDb21wb25lbnQsXG4gIGNvbXBvbmVudHNHZW5lcmljLFxuICBjcmVhdGVGdW5jdGlvbkhhbmRsZVxufSBmcm9tIFwiLi9jb21wb25lbnRzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBjdXJyZW50U3lzdGVtVWRmSW5Db21wb25lbnQgfSBmcm9tIFwiLi9jb21wb25lbnRzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBnZXRGdW5jdGlvbkFkZHJlc3MgfSBmcm9tIFwiLi9jb21wb25lbnRzL2luZGV4LmpzXCI7XG5leHBvcnQgeyBkZWZpbmVUYWJsZSwgZGVmaW5lU2NoZW1hIH0gZnJvbSBcIi4vc2NoZW1hLmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJhY3Rpb25HZW5lcmljIiwiaHR0cEFjdGlvbkdlbmVyaWMiLCJtdXRhdGlvbkdlbmVyaWMiLCJxdWVyeUdlbmVyaWMiLCJpbnRlcm5hbEFjdGlvbkdlbmVyaWMiLCJpbnRlcm5hbE11dGF0aW9uR2VuZXJpYyIsImludGVybmFsUXVlcnlHZW5lcmljIiwiY3JvbkpvYnMiLCJodHRwUm91dGVyIiwiSHR0cFJvdXRlciIsIlJPVVRBQkxFX0hUVFBfTUVUSE9EUyIsImFueUFwaSIsImdldEZ1bmN0aW9uTmFtZSIsIm1ha2VGdW5jdGlvblJlZmVyZW5jZSIsImZpbHRlckFwaSIsImRlZmluZUFwcCIsImRlZmluZUNvbXBvbmVudCIsImNvbXBvbmVudHNHZW5lcmljIiwiY3JlYXRlRnVuY3Rpb25IYW5kbGUiLCJjdXJyZW50U3lzdGVtVWRmSW5Db21wb25lbnQiLCJnZXRGdW5jdGlvbkFkZHJlc3MiLCJkZWZpbmVUYWJsZSIsImRlZmluZVNjaGVtYSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/index_range_builder.js":
/*!********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/index_range_builder.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IndexRange: () => (/* binding */ IndexRange)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nclass IndexRange {\n    /**\n   * @internal\n   */ constructor(){\n        // Property for nominal type support.\n        __publicField(this, \"_isIndexRange\");\n    }\n} //# sourceMappingURL=index_range_builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbmRleF9yYW5nZV9idWlsZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBYTtBQUNiLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1KLFVBQVVJLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksZ0JBQWdCLENBQUNOLEtBQUtDLEtBQUtDLFFBQVVILGdCQUFnQkMsS0FBSyxPQUFPQyxRQUFRLFdBQVdBLE1BQU0sS0FBS0EsS0FBS0M7QUFDakcsTUFBTUs7SUFDWDs7R0FFQyxHQUNEQyxhQUFjO1FBQ1oscUNBQXFDO1FBQ3JDRixjQUFjLElBQUksRUFBRTtJQUN0QjtBQUNGLEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhc29yX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9zZXJ2ZXIvaW5kZXhfcmFuZ2VfYnVpbGRlci5qcz9mNTkzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4gX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbmV4cG9ydCBjbGFzcyBJbmRleFJhbmdlIHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gUHJvcGVydHkgZm9yIG5vbWluYWwgdHlwZSBzdXBwb3J0LlxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJfaXNJbmRleFJhbmdlXCIpO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleF9yYW5nZV9idWlsZGVyLmpzLm1hcFxuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19kZWZOb3JtYWxQcm9wIiwib2JqIiwia2V5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfX3B1YmxpY0ZpZWxkIiwiSW5kZXhSYW5nZSIsImNvbnN0cnVjdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/index_range_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/pagination.js":
/*!***********************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/pagination.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   paginationOptsValidator: () => (/* binding */ paginationOptsValidator)\n/* harmony export */ });\n/* harmony import */ var _values_validator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../values/validator.js */ \"(ssr)/./node_modules/convex/dist/esm/values/validator.js\");\n\n\nconst paginationOptsValidator = _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n    numItems: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.number(),\n    cursor: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.union(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string(), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.null()),\n    endCursor: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.union(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string(), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.null())),\n    id: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.number()),\n    maximumRowsRead: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.number()),\n    maximumBytesRead: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.number())\n}); //# sourceMappingURL=pagination.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9wYWdpbmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWE7QUFDOEI7QUFDcEMsTUFBTUMsMEJBQTBCRCxtREFBQ0EsQ0FBQ0UsTUFBTSxDQUFDO0lBQzlDQyxVQUFVSCxtREFBQ0EsQ0FBQ0ksTUFBTTtJQUNsQkMsUUFBUUwsbURBQUNBLENBQUNNLEtBQUssQ0FBQ04sbURBQUNBLENBQUNPLE1BQU0sSUFBSVAsbURBQUNBLENBQUNRLElBQUk7SUFDbENDLFdBQVdULG1EQUFDQSxDQUFDVSxRQUFRLENBQUNWLG1EQUFDQSxDQUFDTSxLQUFLLENBQUNOLG1EQUFDQSxDQUFDTyxNQUFNLElBQUlQLG1EQUFDQSxDQUFDUSxJQUFJO0lBQ2hERyxJQUFJWCxtREFBQ0EsQ0FBQ1UsUUFBUSxDQUFDVixtREFBQ0EsQ0FBQ0ksTUFBTTtJQUN2QlEsaUJBQWlCWixtREFBQ0EsQ0FBQ1UsUUFBUSxDQUFDVixtREFBQ0EsQ0FBQ0ksTUFBTTtJQUNwQ1Msa0JBQWtCYixtREFBQ0EsQ0FBQ1UsUUFBUSxDQUFDVixtREFBQ0EsQ0FBQ0ksTUFBTTtBQUN2QyxHQUFHLENBQ0gsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZXJhc29yX2Nsb25lLy4vbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9zZXJ2ZXIvcGFnaW5hdGlvbi5qcz9lMTE0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgdiB9IGZyb20gXCIuLi92YWx1ZXMvdmFsaWRhdG9yLmpzXCI7XG5leHBvcnQgY29uc3QgcGFnaW5hdGlvbk9wdHNWYWxpZGF0b3IgPSB2Lm9iamVjdCh7XG4gIG51bUl0ZW1zOiB2Lm51bWJlcigpLFxuICBjdXJzb3I6IHYudW5pb24odi5zdHJpbmcoKSwgdi5udWxsKCkpLFxuICBlbmRDdXJzb3I6IHYub3B0aW9uYWwodi51bmlvbih2LnN0cmluZygpLCB2Lm51bGwoKSkpLFxuICBpZDogdi5vcHRpb25hbCh2Lm51bWJlcigpKSxcbiAgbWF4aW11bVJvd3NSZWFkOiB2Lm9wdGlvbmFsKHYubnVtYmVyKCkpLFxuICBtYXhpbXVtQnl0ZXNSZWFkOiB2Lm9wdGlvbmFsKHYubnVtYmVyKCkpXG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2luYXRpb24uanMubWFwXG4iXSwibmFtZXMiOlsidiIsInBhZ2luYXRpb25PcHRzVmFsaWRhdG9yIiwib2JqZWN0IiwibnVtSXRlbXMiLCJudW1iZXIiLCJjdXJzb3IiLCJ1bmlvbiIsInN0cmluZyIsIm51bGwiLCJlbmRDdXJzb3IiLCJvcHRpb25hbCIsImlkIiwibWF4aW11bVJvd3NSZWFkIiwibWF4aW11bUJ5dGVzUmVhZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/pagination.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/router.js":
/*!*******************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/router.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpRouter: () => (/* binding */ HttpRouter),\n/* harmony export */   ROUTABLE_HTTP_METHODS: () => (/* binding */ ROUTABLE_HTTP_METHODS),\n/* harmony export */   httpRouter: () => (/* binding */ httpRouter),\n/* harmony export */   normalizeMethod: () => (/* binding */ normalizeMethod)\n/* harmony export */ });\n/* harmony import */ var _impl_syscall_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./impl/syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\nconst ROUTABLE_HTTP_METHODS = [\n    \"GET\",\n    \"POST\",\n    \"PUT\",\n    \"DELETE\",\n    \"OPTIONS\",\n    \"PATCH\"\n];\nfunction normalizeMethod(method) {\n    if (method === \"HEAD\") return \"GET\";\n    return method;\n}\nconst httpRouter = ()=>new HttpRouter();\nclass HttpRouter {\n    constructor(){\n        __publicField(this, \"exactRoutes\", /* @__PURE__ */ new Map());\n        __publicField(this, \"prefixRoutes\", /* @__PURE__ */ new Map());\n        __publicField(this, \"isRouter\", true);\n        /**\n     * Specify an HttpAction to be used to respond to requests\n     * for an HTTP method (e.g. \"GET\") and a path or pathPrefix.\n     *\n     * Paths must begin with a slash. Path prefixes must also end in a slash.\n     *\n     * ```js\n     * // matches `/profile` (but not `/profile/`)\n     * http.route({ path: \"/profile\", method: \"GET\", handler: getProfile})\n     *\n     * // matches `/profiles/`, `/profiles/abc`, and `/profiles/a/c/b` (but not `/profile`)\n     * http.route({ pathPrefix: \"/profile/\", method: \"GET\", handler: getProfile})\n     * ```\n     */ __publicField(this, \"route\", (spec)=>{\n            if (!spec.handler) throw new Error(`route requires handler`);\n            if (!spec.method) throw new Error(`route requires method`);\n            const { method, handler } = spec;\n            if (!ROUTABLE_HTTP_METHODS.includes(method)) {\n                throw new Error(`'${method}' is not an allowed HTTP method (like GET, POST, PUT etc.)`);\n            }\n            if (\"path\" in spec) {\n                if (\"pathPrefix\" in spec) {\n                    throw new Error(`Invalid httpRouter route: cannot contain both 'path' and 'pathPrefix'`);\n                }\n                if (!spec.path.startsWith(\"/\")) {\n                    throw new Error(`path '${spec.path}' does not start with a /`);\n                }\n                const methods = this.exactRoutes.has(spec.path) ? this.exactRoutes.get(spec.path) : /* @__PURE__ */ new Map();\n                if (methods.has(method)) {\n                    throw new Error(`Path '${spec.path}' for method ${method} already in use`);\n                }\n                methods.set(method, handler);\n                this.exactRoutes.set(spec.path, methods);\n            } else if (\"pathPrefix\" in spec) {\n                if (!spec.pathPrefix.startsWith(\"/\")) {\n                    throw new Error(`pathPrefix '${spec.pathPrefix}' does not start with a /`);\n                }\n                if (!spec.pathPrefix.endsWith(\"/\")) {\n                    throw new Error(`pathPrefix ${spec.pathPrefix} must end with a /`);\n                }\n                const prefixes = this.prefixRoutes.get(method) || /* @__PURE__ */ new Map();\n                if (prefixes.has(spec.pathPrefix)) {\n                    throw new Error(`${spec.method} pathPrefix ${spec.pathPrefix} is already defined`);\n                }\n                prefixes.set(spec.pathPrefix, handler);\n                this.prefixRoutes.set(method, prefixes);\n            } else {\n                throw new Error(`Invalid httpRouter route entry: must contain either field 'path' or 'pathPrefix'`);\n            }\n        });\n        /**\n     * Returns a list of routed HTTP actions.\n     *\n     * These are used to populate the list of routes shown in the Functions page of the Convex dashboard.\n     *\n     * @returns - an array of [path, method, endpoint] tuples.\n     */ __publicField(this, \"getRoutes\", ()=>{\n            const exactPaths = [\n                ...this.exactRoutes.keys()\n            ].sort();\n            const exact = exactPaths.flatMap((path)=>[\n                    ...this.exactRoutes.get(path).keys()\n                ].sort().map((method)=>[\n                        path,\n                        method,\n                        this.exactRoutes.get(path).get(method)\n                    ]));\n            const prefixPathMethods = [\n                ...this.prefixRoutes.keys()\n            ].sort();\n            const prefixes = prefixPathMethods.flatMap((method)=>[\n                    ...this.prefixRoutes.get(method).keys()\n                ].sort().map((pathPrefix)=>[\n                        `${pathPrefix}*`,\n                        method,\n                        this.prefixRoutes.get(method).get(pathPrefix)\n                    ]));\n            return [\n                ...exact,\n                ...prefixes\n            ];\n        });\n        /**\n     * Returns the appropriate HTTP action and its routed request path and method.\n     *\n     * The path and method returned are used for logging and metrics, and should\n     * match up with one of the routes returned by `getRoutes`.\n     *\n     * For example,\n     *\n     * ```js\n     * http.route({ pathPrefix: \"/profile/\", method: \"GET\", handler: getProfile});\n     *\n     * http.lookup(\"/profile/abc\", \"GET\") // returns [getProfile, \"GET\", \"/profile/*\"]\n     *```\n     *\n     * @returns - a tuple [{@link PublicHttpAction}, method, path] or null.\n     */ __publicField(this, \"lookup\", (path, method)=>{\n            method = normalizeMethod(method);\n            const exactMatch = this.exactRoutes.get(path)?.get(method);\n            if (exactMatch) return [\n                exactMatch,\n                method,\n                path\n            ];\n            const prefixes = this.prefixRoutes.get(method) || /* @__PURE__ */ new Map();\n            const prefixesSorted = [\n                ...prefixes.entries()\n            ].sort(([prefixA, _a], [prefixB, _b])=>prefixB.length - prefixA.length);\n            for (const [pathPrefix, endpoint] of prefixesSorted){\n                if (path.startsWith(pathPrefix)) {\n                    return [\n                        endpoint,\n                        method,\n                        `${pathPrefix}*`\n                    ];\n                }\n            }\n            return null;\n        });\n        /**\n     * Given a JSON string representation of a Request object, return a Response\n     * by routing the request and running the appropriate endpoint or returning\n     * a 404 Response.\n     *\n     * @param argsStr - a JSON string representing a Request object.\n     *\n     * @returns - a Response object.\n     */ __publicField(this, \"runRequest\", async (argsStr, requestRoute)=>{\n            const request = (0,_impl_syscall_js__WEBPACK_IMPORTED_MODULE_0__.performJsSyscall)(\"requestFromConvexJson\", {\n                convexJson: JSON.parse(argsStr)\n            });\n            let pathname = requestRoute;\n            if (!pathname || typeof pathname !== \"string\") {\n                pathname = new URL(request.url).pathname;\n            }\n            const method = request.method;\n            const match = this.lookup(pathname, method);\n            if (!match) {\n                const response2 = new Response(`No HttpAction routed for ${pathname}`, {\n                    status: 404\n                });\n                return JSON.stringify((0,_impl_syscall_js__WEBPACK_IMPORTED_MODULE_0__.performJsSyscall)(\"convexJsonFromResponse\", {\n                    response: response2\n                }));\n            }\n            const [endpoint, _method, _path] = match;\n            const response = await endpoint.invokeHttpAction(request);\n            return JSON.stringify((0,_impl_syscall_js__WEBPACK_IMPORTED_MODULE_0__.performJsSyscall)(\"convexJsonFromResponse\", {\n                response\n            }));\n        });\n    }\n} //# sourceMappingURL=router.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/router.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/schema.js":
/*!*******************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/schema.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SchemaDefinition: () => (/* binding */ SchemaDefinition),\n/* harmony export */   TableDefinition: () => (/* binding */ TableDefinition),\n/* harmony export */   defineSchema: () => (/* binding */ defineSchema),\n/* harmony export */   defineTable: () => (/* binding */ defineTable)\n/* harmony export */ });\n/* harmony import */ var _values_validator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../values/validator.js */ \"(ssr)/./node_modules/convex/dist/esm/values/validator.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\nclass TableDefinition {\n    /**\n   * @internal\n   */ constructor(documentType){\n        __publicField(this, \"indexes\");\n        __publicField(this, \"searchIndexes\");\n        __publicField(this, \"vectorIndexes\");\n        // The type of documents stored in this table.\n        __publicField(this, \"validator\");\n        this.indexes = [];\n        this.searchIndexes = [];\n        this.vectorIndexes = [];\n        this.validator = documentType;\n    }\n    /**\n   * Define an index on this table.\n   *\n   * To learn about indexes, see [Defining Indexes](https://docs.convex.dev/using/indexes).\n   *\n   * @param name - The name of the index.\n   * @param fields - The fields to index, in order. Must specify at least one\n   * field.\n   * @returns A {@link TableDefinition} with this index included.\n   */ index(name, fields) {\n        this.indexes.push({\n            indexDescriptor: name,\n            fields\n        });\n        return this;\n    }\n    /**\n   * Define a search index on this table.\n   *\n   * To learn about search indexes, see [Search](https://docs.convex.dev/text-search).\n   *\n   * @param name - The name of the index.\n   * @param indexConfig - The search index configuration object.\n   * @returns A {@link TableDefinition} with this search index included.\n   */ searchIndex(name, indexConfig) {\n        this.searchIndexes.push({\n            indexDescriptor: name,\n            searchField: indexConfig.searchField,\n            filterFields: indexConfig.filterFields || []\n        });\n        return this;\n    }\n    /**\n   * Define a vector index on this table.\n   *\n   * To learn about vector indexes, see [Vector Search](https://docs.convex.dev/vector-search).\n   *\n   * @param name - The name of the index.\n   * @param indexConfig - The vector index configuration object.\n   * @returns A {@link TableDefinition} with this vector index included.\n   */ vectorIndex(name, indexConfig) {\n        this.vectorIndexes.push({\n            indexDescriptor: name,\n            vectorField: indexConfig.vectorField,\n            dimensions: indexConfig.dimensions,\n            filterFields: indexConfig.filterFields || []\n        });\n        return this;\n    }\n    /**\n   * Work around for https://github.com/microsoft/TypeScript/issues/57035\n   */ self() {\n        return this;\n    }\n    /**\n   * Export the contents of this definition.\n   *\n   * This is called internally by the Convex framework.\n   * @internal\n   */ export() {\n        return {\n            indexes: this.indexes,\n            searchIndexes: this.searchIndexes,\n            vectorIndexes: this.vectorIndexes,\n            documentType: this.validator.json\n        };\n    }\n}\nfunction defineTable(documentSchema) {\n    if ((0,_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.isValidator)(documentSchema)) {\n        return new TableDefinition(documentSchema);\n    } else {\n        return new TableDefinition(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object(documentSchema));\n    }\n}\nclass SchemaDefinition {\n    /**\n   * @internal\n   */ constructor(tables, options){\n        __publicField(this, \"tables\");\n        __publicField(this, \"strictTableNameTypes\");\n        __publicField(this, \"schemaValidation\");\n        this.tables = tables;\n        this.schemaValidation = options?.schemaValidation === void 0 ? true : options.schemaValidation;\n    }\n    /**\n   * Export the contents of this definition.\n   *\n   * This is called internally by the Convex framework.\n   * @internal\n   */ export() {\n        return JSON.stringify({\n            tables: Object.entries(this.tables).map(([tableName, definition])=>{\n                const { indexes, searchIndexes, vectorIndexes, documentType } = definition.export();\n                return {\n                    tableName,\n                    indexes,\n                    searchIndexes,\n                    vectorIndexes,\n                    documentType\n                };\n            }),\n            schemaValidation: this.schemaValidation\n        });\n    }\n}\nfunction defineSchema(schema, options) {\n    return new SchemaDefinition(schema, options);\n}\nconst _systemSchema = defineSchema({\n    _scheduled_functions: defineTable({\n        name: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string(),\n        args: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.array(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.any()),\n        scheduledTime: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.float64(),\n        completedTime: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.float64()),\n        state: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.union(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n            kind: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.literal(\"pending\")\n        }), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n            kind: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.literal(\"inProgress\")\n        }), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n            kind: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.literal(\"success\")\n        }), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n            kind: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.literal(\"failed\"),\n            error: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string()\n        }), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n            kind: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.literal(\"canceled\")\n        }))\n    }),\n    _storage: defineTable({\n        sha256: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string(),\n        size: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.float64(),\n        contentType: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string())\n    })\n}); //# sourceMappingURL=schema.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/schema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/search_filter_builder.js":
/*!**********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/search_filter_builder.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SearchFilter: () => (/* binding */ SearchFilter)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nclass SearchFilter {\n    /**\n   * @internal\n   */ constructor(){\n        // Property for nominal type support.\n        __publicField(this, \"_isSearchFilter\");\n    }\n} //# sourceMappingURL=search_filter_builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9zZWFyY2hfZmlsdGVyX2J1aWxkZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFhO0FBQ2IsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxrQkFBa0IsQ0FBQ0MsS0FBS0MsS0FBS0MsUUFBVUQsT0FBT0QsTUFBTUosVUFBVUksS0FBS0MsS0FBSztRQUFFRSxZQUFZO1FBQU1DLGNBQWM7UUFBTUMsVUFBVTtRQUFNSDtJQUFNLEtBQUtGLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHQztBQUMxSixJQUFJSSxnQkFBZ0IsQ0FBQ04sS0FBS0MsS0FBS0MsUUFBVUgsZ0JBQWdCQyxLQUFLLE9BQU9DLFFBQVEsV0FBV0EsTUFBTSxLQUFLQSxLQUFLQztBQUNqRyxNQUFNSztJQUNYOztHQUVDLEdBQ0RDLGFBQWM7UUFDWixxQ0FBcUM7UUFDckNGLGNBQWMsSUFBSSxFQUFFO0lBQ3RCO0FBQ0YsRUFDQSxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmFzb3JfY2xvbmUvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9zZWFyY2hfZmlsdGVyX2J1aWxkZXIuanM/NjBmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19kZWZOb3JtYWxQcm9wID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ga2V5IGluIG9iaiA/IF9fZGVmUHJvcChvYmosIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlLCB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7XG52YXIgX19wdWJsaWNGaWVsZCA9IChvYmosIGtleSwgdmFsdWUpID0+IF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG5leHBvcnQgY2xhc3MgU2VhcmNoRmlsdGVyIHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gUHJvcGVydHkgZm9yIG5vbWluYWwgdHlwZSBzdXBwb3J0LlxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJfaXNTZWFyY2hGaWx0ZXJcIik7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlYXJjaF9maWx0ZXJfYnVpbGRlci5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZGVmTm9ybWFsUHJvcCIsIm9iaiIsImtleSIsInZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX19wdWJsaWNGaWVsZCIsIlNlYXJjaEZpbHRlciIsImNvbnN0cnVjdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/search_filter_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/storage.js":
/*!********************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/storage.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n //# sourceMappingURL=storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9zdG9yYWdlLmpzIiwibWFwcGluZ3MiOiI7QUFBYSxDQUNiLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYXNvcl9jbG9uZS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL3N0b3JhZ2UuanM/NTZjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0b3JhZ2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/storage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/vector_search.js":
/*!**************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/vector_search.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FilterExpression: () => (/* binding */ FilterExpression)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nclass FilterExpression {\n    /**\n   * @internal\n   */ constructor(){\n        // Property for nominal type support.\n        __publicField(this, \"_isExpression\");\n        // Property to distinguish expressions by the type they resolve to.\n        __publicField(this, \"_value\");\n    }\n} //# sourceMappingURL=vector_search.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci92ZWN0b3Jfc2VhcmNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBYTtBQUNiLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1KLFVBQVVJLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksZ0JBQWdCLENBQUNOLEtBQUtDLEtBQUtDLFFBQVVILGdCQUFnQkMsS0FBSyxPQUFPQyxRQUFRLFdBQVdBLE1BQU0sS0FBS0EsS0FBS0M7QUFDakcsTUFBTUs7SUFDWDs7R0FFQyxHQUNEQyxhQUFjO1FBQ1oscUNBQXFDO1FBQ3JDRixjQUFjLElBQUksRUFBRTtRQUNwQixtRUFBbUU7UUFDbkVBLGNBQWMsSUFBSSxFQUFFO0lBQ3RCO0FBQ0YsRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lcmFzb3JfY2xvbmUvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci92ZWN0b3Jfc2VhcmNoLmpzP2Q0YzEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBfX2RlZk5vcm1hbFByb3Aob2JqLCB0eXBlb2Yga2V5ICE9PSBcInN5bWJvbFwiID8ga2V5ICsgXCJcIiA6IGtleSwgdmFsdWUpO1xuZXhwb3J0IGNsYXNzIEZpbHRlckV4cHJlc3Npb24ge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBQcm9wZXJ0eSBmb3Igbm9taW5hbCB0eXBlIHN1cHBvcnQuXG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcIl9pc0V4cHJlc3Npb25cIik7XG4gICAgLy8gUHJvcGVydHkgdG8gZGlzdGluZ3Vpc2ggZXhwcmVzc2lvbnMgYnkgdGhlIHR5cGUgdGhleSByZXNvbHZlIHRvLlxuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJfdmFsdWVcIik7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlY3Rvcl9zZWFyY2guanMubWFwXG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2RlZk5vcm1hbFByb3AiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9fcHVibGljRmllbGQiLCJGaWx0ZXJFeHByZXNzaW9uIiwiY29uc3RydWN0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/vector_search.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/values/base64.js":
/*!*******************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/base64.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   byteLength: () => (/* binding */ byteLength),\n/* harmony export */   fromByteArray: () => (/* binding */ fromByteArray),\n/* harmony export */   toByteArray: () => (/* binding */ toByteArray)\n/* harmony export */ });\n\nvar lookup = [];\nvar revLookup = [];\nvar Arr = Uint8Array;\nvar code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfor(var i = 0, len = code.length; i < len; ++i){\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n}\nrevLookup[\"-\".charCodeAt(0)] = 62;\nrevLookup[\"_\".charCodeAt(0)] = 63;\nfunction getLens(b64) {\n    var len = b64.length;\n    if (len % 4 > 0) {\n        throw new Error(\"Invalid string. Length must be a multiple of 4\");\n    }\n    var validLen = b64.indexOf(\"=\");\n    if (validLen === -1) validLen = len;\n    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n    return [\n        validLen,\n        placeHoldersLen\n    ];\n}\nfunction byteLength(b64) {\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction _byteLength(_b64, validLen, placeHoldersLen) {\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction toByteArray(b64) {\n    var tmp;\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n    var curByte = 0;\n    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n    var i;\n    for(i = 0; i < len; i += 4){\n        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n        arr[curByte++] = tmp >> 16 & 255;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n    }\n    if (placeHoldersLen === 2) {\n        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n        arr[curByte++] = tmp & 255;\n    }\n    if (placeHoldersLen === 1) {\n        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n    }\n    return arr;\n}\nfunction tripletToBase64(num) {\n    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n}\nfunction encodeChunk(uint8, start, end) {\n    var tmp;\n    var output = [];\n    for(var i = start; i < end; i += 3){\n        tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);\n        output.push(tripletToBase64(tmp));\n    }\n    return output.join(\"\");\n}\nfunction fromByteArray(uint8) {\n    var tmp;\n    var len = uint8.length;\n    var extraBytes = len % 3;\n    var parts = [];\n    var maxChunkLength = 16383;\n    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength){\n        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n    }\n    if (extraBytes === 1) {\n        tmp = uint8[len - 1];\n        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\");\n    } else if (extraBytes === 2) {\n        tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\");\n    }\n    return parts.join(\"\");\n} //# sourceMappingURL=base64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/values/base64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/values/errors.js":
/*!*******************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/errors.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexError: () => (/* binding */ ConvexError)\n/* harmony export */ });\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nvar _a, _b;\n\nconst IDENTIFYING_FIELD = Symbol.for(\"ConvexError\");\nclass ConvexError extends (_b = Error, _a = IDENTIFYING_FIELD, _b) {\n    constructor(data){\n        super(typeof data === \"string\" ? data : (0,_value_js__WEBPACK_IMPORTED_MODULE_0__.stringifyValueForError)(data));\n        __publicField(this, \"name\", \"ConvexError\");\n        __publicField(this, \"data\");\n        __publicField(this, _a, true);\n        this.data = data;\n    }\n} //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3ZhbHVlcy9lcnJvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBYTtBQUNiLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1KLFVBQVVJLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksZ0JBQWdCLENBQUNOLEtBQUtDLEtBQUtDLFFBQVVILGdCQUFnQkMsS0FBSyxPQUFPQyxRQUFRLFdBQVdBLE1BQU0sS0FBS0EsS0FBS0M7QUFDeEcsSUFBSUssSUFBSUM7QUFDNEM7QUFDcEQsTUFBTUUsb0JBQW9CQyxPQUFPQyxHQUFHLENBQUM7QUFDOUIsTUFBTUMsb0JBQXFCTCxDQUFBQSxLQUFLTSxPQUFPUCxLQUFLRyxtQkFBbUJGLEVBQUM7SUFDckVPLFlBQVlDLElBQUksQ0FBRTtRQUNoQixLQUFLLENBQUMsT0FBT0EsU0FBUyxXQUFXQSxPQUFPUCxpRUFBc0JBLENBQUNPO1FBQy9EVixjQUFjLElBQUksRUFBRSxRQUFRO1FBQzVCQSxjQUFjLElBQUksRUFBRTtRQUNwQkEsY0FBYyxJQUFJLEVBQUVDLElBQUk7UUFDeEIsSUFBSSxDQUFDUyxJQUFJLEdBQUdBO0lBQ2Q7QUFDRixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYXNvcl9jbG9uZS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vdmFsdWVzL2Vycm9ycy5qcz81OWQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4gX19kZWZOb3JtYWxQcm9wKG9iaiwgdHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIiA/IGtleSArIFwiXCIgOiBrZXksIHZhbHVlKTtcbnZhciBfYSwgX2I7XG5pbXBvcnQgeyBzdHJpbmdpZnlWYWx1ZUZvckVycm9yIH0gZnJvbSBcIi4vdmFsdWUuanNcIjtcbmNvbnN0IElERU5USUZZSU5HX0ZJRUxEID0gU3ltYm9sLmZvcihcIkNvbnZleEVycm9yXCIpO1xuZXhwb3J0IGNsYXNzIENvbnZleEVycm9yIGV4dGVuZHMgKF9iID0gRXJyb3IsIF9hID0gSURFTlRJRllJTkdfRklFTEQsIF9iKSB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICBzdXBlcih0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiA/IGRhdGEgOiBzdHJpbmdpZnlWYWx1ZUZvckVycm9yKGRhdGEpKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwibmFtZVwiLCBcIkNvbnZleEVycm9yXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJkYXRhXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgX2EsIHRydWUpO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZGVmTm9ybWFsUHJvcCIsIm9iaiIsImtleSIsInZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX19wdWJsaWNGaWVsZCIsIl9hIiwiX2IiLCJzdHJpbmdpZnlWYWx1ZUZvckVycm9yIiwiSURFTlRJRllJTkdfRklFTEQiLCJTeW1ib2wiLCJmb3IiLCJDb252ZXhFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/values/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/values/index.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Base64: () => (/* reexport module object */ _base64_js__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   ConvexError: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError),\n/* harmony export */   asObjectValidator: () => (/* reexport safe */ _validator_js__WEBPACK_IMPORTED_MODULE_1__.asObjectValidator),\n/* harmony export */   convexToJson: () => (/* reexport safe */ _value_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson),\n/* harmony export */   jsonToConvex: () => (/* reexport safe */ _value_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex),\n/* harmony export */   v: () => (/* reexport safe */ _validator_js__WEBPACK_IMPORTED_MODULE_1__.v)\n/* harmony export */ });\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n/* harmony import */ var _validator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validator.js */ \"(ssr)/./node_modules/convex/dist/esm/values/validator.js\");\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base64.js */ \"(ssr)/./node_modules/convex/dist/esm/values/base64.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/convex/dist/esm/values/errors.js\");\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3ZhbHVlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQWE7QUFDMkM7QUFDRjtBQUNoQjtBQUNwQjtBQUNVLENBQzVCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VyYXNvcl9jbG9uZS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vdmFsdWVzL2luZGV4LmpzPzQwNTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnQgeyBjb252ZXhUb0pzb24sIGpzb25Ub0NvbnZleCB9IGZyb20gXCIuL3ZhbHVlLmpzXCI7XG5leHBvcnQgeyB2LCBhc09iamVjdFZhbGlkYXRvciB9IGZyb20gXCIuL3ZhbGlkYXRvci5qc1wiO1xuaW1wb3J0ICogYXMgQmFzZTY0IGZyb20gXCIuL2Jhc2U2NC5qc1wiO1xuZXhwb3J0IHsgQmFzZTY0IH07XG5leHBvcnQgKiBmcm9tIFwiLi9lcnJvcnMuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbImNvbnZleFRvSnNvbiIsImpzb25Ub0NvbnZleCIsInYiLCJhc09iamVjdFZhbGlkYXRvciIsIkJhc2U2NCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/values/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/values/validator.js":
/*!**********************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/validator.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asObjectValidator: () => (/* binding */ asObjectValidator),\n/* harmony export */   isValidator: () => (/* binding */ isValidator),\n/* harmony export */   v: () => (/* binding */ v)\n/* harmony export */ });\n/* harmony import */ var _validators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validators.js */ \"(ssr)/./node_modules/convex/dist/esm/values/validators.js\");\n\n\nfunction isValidator(v2) {\n    return !!v2.isConvexValidator;\n}\nfunction asObjectValidator(obj) {\n    if (isValidator(obj)) {\n        return obj;\n    } else {\n        return v.object(obj);\n    }\n}\nconst v = {\n    /**\n   * Validates that the value corresponds to an ID of a document in given table.\n   * @param tableName The name of the table.\n   */ id: (tableName)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VId({\n            isOptional: \"required\",\n            tableName\n        });\n    },\n    /**\n   * Validates that the value is of type Null.\n   */ null: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VNull({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of Convex type Float64 (Number in JS).\n   *\n   * Alias for `v.float64()`\n   */ number: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VFloat64({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of Convex type Float64 (Number in JS).\n   */ float64: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VFloat64({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * @deprecated Use `v.int64()` instead\n   */ bigint: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VInt64({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of Convex type Int64 (BigInt in JS).\n   */ int64: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VInt64({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of type Boolean.\n   */ boolean: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VBoolean({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of type String.\n   */ string: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VString({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of Convex type Bytes (constructed in JS via `ArrayBuffer`).\n   */ bytes: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VBytes({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is equal to the given literal value.\n   * @param literal The literal value to compare against.\n   */ literal: (literal)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VLiteral({\n            isOptional: \"required\",\n            value: literal\n        });\n    },\n    /**\n   * Validates that the value is an Array of the given element type.\n   * @param element The validator for the elements of the array.\n   */ array: (element)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VArray({\n            isOptional: \"required\",\n            element\n        });\n    },\n    /**\n   * Validates that the value is an Object with the given properties.\n   * @param fields An object specifying the validator for each property.\n   */ object: (fields)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VObject({\n            isOptional: \"required\",\n            fields\n        });\n    },\n    /**\n   * Validates that the value is a Record with keys and values that match the given types.\n   * @param keys The validator for the keys of the record. This cannot contain string literals.\n   * @param values The validator for the values of the record.\n   */ record: (keys, values)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VRecord({\n            isOptional: \"required\",\n            key: keys,\n            value: values\n        });\n    },\n    /**\n   * Validates that the value matches one of the given validators.\n   * @param members The validators to match against.\n   */ union: (...members)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VUnion({\n            isOptional: \"required\",\n            members\n        });\n    },\n    /**\n   * Does not validate the value.\n   */ any: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VAny({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Allows not specifying a value for a property in an Object.\n   * @param value The property value validator to make optional.\n   *\n   * ```typescript\n   * const objectWithOptionalFields = v.object({\n   *   requiredField: v.string(),\n   *   optionalField: v.optional(v.string()),\n   * });\n   * ```\n   */ optional: (value)=>{\n        return value.asOptional();\n    }\n}; //# sourceMappingURL=validator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/values/validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/values/validators.js":
/*!***********************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/validators.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VAny: () => (/* binding */ VAny),\n/* harmony export */   VArray: () => (/* binding */ VArray),\n/* harmony export */   VBoolean: () => (/* binding */ VBoolean),\n/* harmony export */   VBytes: () => (/* binding */ VBytes),\n/* harmony export */   VFloat64: () => (/* binding */ VFloat64),\n/* harmony export */   VId: () => (/* binding */ VId),\n/* harmony export */   VInt64: () => (/* binding */ VInt64),\n/* harmony export */   VLiteral: () => (/* binding */ VLiteral),\n/* harmony export */   VNull: () => (/* binding */ VNull),\n/* harmony export */   VObject: () => (/* binding */ VObject),\n/* harmony export */   VRecord: () => (/* binding */ VRecord),\n/* harmony export */   VString: () => (/* binding */ VString),\n/* harmony export */   VUnion: () => (/* binding */ VUnion)\n/* harmony export */ });\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\nclass BaseValidator {\n    constructor({ isOptional }){\n        /**\n     * Only for TypeScript, the TS type of the JS values validated\n     * by this validator.\n     */ __publicField(this, \"type\");\n        /**\n     * Only for TypeScript, if this an Object validator, then\n     * this is the TS type of its property names.\n     */ __publicField(this, \"fieldPaths\");\n        /**\n     * Whether this is an optional Object property value validator.\n     */ __publicField(this, \"isOptional\");\n        /**\n     * Always `\"true\"`.\n     */ __publicField(this, \"isConvexValidator\");\n        this.isOptional = isOptional;\n        this.isConvexValidator = true;\n    }\n    /** @deprecated - use isOptional instead */ get optional() {\n        return this.isOptional === \"optional\" ? true : false;\n    }\n}\nclass VId extends BaseValidator {\n    /**\n   * Usually you'd use `v.id(tableName)` instead.\n   */ constructor({ isOptional, tableName }){\n        super({\n            isOptional\n        });\n        /**\n     * The name of the table that the validated IDs must belong to.\n     */ __publicField(this, \"tableName\");\n        /**\n     * The kind of validator, `\"id\"`.\n     */ __publicField(this, \"kind\", \"id\");\n        this.tableName = tableName;\n    }\n    /** @internal */ get json() {\n        return {\n            type: \"id\",\n            tableName: this.tableName\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VId({\n            isOptional: \"optional\",\n            tableName: this.tableName\n        });\n    }\n}\nclass VFloat64 extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"float64\"`.\n     */ __publicField(this, \"kind\", \"float64\");\n    }\n    /** @internal */ get json() {\n        return {\n            type: \"number\"\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VFloat64({\n            isOptional: \"optional\"\n        });\n    }\n}\nclass VInt64 extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"int64\"`.\n     */ __publicField(this, \"kind\", \"int64\");\n    }\n    /** @internal */ get json() {\n        return {\n            type: \"bigint\"\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VInt64({\n            isOptional: \"optional\"\n        });\n    }\n}\nclass VBoolean extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"boolean\"`.\n     */ __publicField(this, \"kind\", \"boolean\");\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VBoolean({\n            isOptional: \"optional\"\n        });\n    }\n}\nclass VBytes extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"bytes\"`.\n     */ __publicField(this, \"kind\", \"bytes\");\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VBytes({\n            isOptional: \"optional\"\n        });\n    }\n}\nclass VString extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"string\"`.\n     */ __publicField(this, \"kind\", \"string\");\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VString({\n            isOptional: \"optional\"\n        });\n    }\n}\nclass VNull extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"null\"`.\n     */ __publicField(this, \"kind\", \"null\");\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VNull({\n            isOptional: \"optional\"\n        });\n    }\n}\nclass VAny extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"any\"`.\n     */ __publicField(this, \"kind\", \"any\");\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VAny({\n            isOptional: \"optional\"\n        });\n    }\n}\nclass VObject extends BaseValidator {\n    /**\n   * Usually you'd use `v.object({ ... })` instead.\n   */ constructor({ isOptional, fields }){\n        super({\n            isOptional\n        });\n        /**\n     * An object with the validator for each property.\n     */ __publicField(this, \"fields\");\n        /**\n     * The kind of validator, `\"object\"`.\n     */ __publicField(this, \"kind\", \"object\");\n        this.fields = fields;\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            value: globalThis.Object.fromEntries(globalThis.Object.entries(this.fields).map(([k, v])=>[\n                    k,\n                    {\n                        fieldType: v.json,\n                        optional: v.isOptional === \"optional\" ? true : false\n                    }\n                ]))\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VObject({\n            isOptional: \"optional\",\n            fields: this.fields\n        });\n    }\n}\nclass VLiteral extends BaseValidator {\n    /**\n   * Usually you'd use `v.literal(value)` instead.\n   */ constructor({ isOptional, value }){\n        super({\n            isOptional\n        });\n        /**\n     * The value that the validated values must be equal to.\n     */ __publicField(this, \"value\");\n        /**\n     * The kind of validator, `\"literal\"`.\n     */ __publicField(this, \"kind\", \"literal\");\n        this.value = value;\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            value: (0,_value_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(this.value)\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VLiteral({\n            isOptional: \"optional\",\n            value: this.value\n        });\n    }\n}\nclass VArray extends BaseValidator {\n    /**\n   * Usually you'd use `v.array(element)` instead.\n   */ constructor({ isOptional, element }){\n        super({\n            isOptional\n        });\n        /**\n     * The validator for the elements of the array.\n     */ __publicField(this, \"element\");\n        /**\n     * The kind of validator, `\"array\"`.\n     */ __publicField(this, \"kind\", \"array\");\n        this.element = element;\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            value: this.element.json\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VArray({\n            isOptional: \"optional\",\n            element: this.element\n        });\n    }\n}\nclass VRecord extends BaseValidator {\n    /**\n   * Usually you'd use `v.record(key, value)` instead.\n   */ constructor({ isOptional, key, value }){\n        super({\n            isOptional\n        });\n        /**\n     * The validator for the keys of the record.\n     */ __publicField(this, \"key\");\n        /**\n     * The validator for the values of the record.\n     */ __publicField(this, \"value\");\n        /**\n     * The kind of validator, `\"record\"`.\n     */ __publicField(this, \"kind\", \"record\");\n        if (key.isOptional === \"optional\") {\n            throw new Error(\"Record validator cannot have optional keys\");\n        }\n        if (value.isOptional === \"optional\") {\n            throw new Error(\"Record validator cannot have optional values\");\n        }\n        this.key = key;\n        this.value = value;\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            // This cast is needed because TypeScript thinks the key type is too wide\n            keys: this.key.json,\n            values: {\n                fieldType: this.value.json,\n                optional: false\n            }\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VRecord({\n            isOptional: \"optional\",\n            key: this.key,\n            value: this.value\n        });\n    }\n}\nclass VUnion extends BaseValidator {\n    /**\n   * Usually you'd use `v.union(...members)` instead.\n   */ constructor({ isOptional, members }){\n        super({\n            isOptional\n        });\n        /**\n     * The array of validators, one of which must match the value.\n     */ __publicField(this, \"members\");\n        /**\n     * The kind of validator, `\"union\"`.\n     */ __publicField(this, \"kind\", \"union\");\n        this.members = members;\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            value: this.members.map((v)=>v.json)\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VUnion({\n            isOptional: \"optional\",\n            members: this.members\n        });\n    }\n} //# sourceMappingURL=validators.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/values/validators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/values/value.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/value.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64ToBigInt: () => (/* binding */ base64ToBigInt),\n/* harmony export */   bigIntToBase64: () => (/* binding */ bigIntToBase64),\n/* harmony export */   convexOrUndefinedToJson: () => (/* binding */ convexOrUndefinedToJson),\n/* harmony export */   convexToJson: () => (/* binding */ convexToJson),\n/* harmony export */   jsonToConvex: () => (/* binding */ jsonToConvex),\n/* harmony export */   modernBase64ToBigInt: () => (/* binding */ modernBase64ToBigInt),\n/* harmony export */   modernBigIntToBase64: () => (/* binding */ modernBigIntToBase64),\n/* harmony export */   patchValueToJson: () => (/* binding */ patchValueToJson),\n/* harmony export */   slowBase64ToBigInt: () => (/* binding */ slowBase64ToBigInt),\n/* harmony export */   slowBigIntToBase64: () => (/* binding */ slowBigIntToBase64),\n/* harmony export */   stringifyValueForError: () => (/* binding */ stringifyValueForError)\n/* harmony export */ });\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64.js */ \"(ssr)/./node_modules/convex/dist/esm/values/base64.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n\n\n\nconst LITTLE_ENDIAN = true;\nconst MIN_INT64 = BigInt(\"-9223372036854775808\");\nconst MAX_INT64 = BigInt(\"9223372036854775807\");\nconst ZERO = BigInt(\"0\");\nconst EIGHT = BigInt(\"8\");\nconst TWOFIFTYSIX = BigInt(\"256\");\nfunction isSpecial(n) {\n    return Number.isNaN(n) || !Number.isFinite(n) || Object.is(n, -0);\n}\nfunction slowBigIntToBase64(value) {\n    if (value < ZERO) {\n        value -= MIN_INT64 + MIN_INT64;\n    }\n    let hex = value.toString(16);\n    if (hex.length % 2 === 1) hex = \"0\" + hex;\n    const bytes = new Uint8Array(new ArrayBuffer(8));\n    let i = 0;\n    for (const hexByte of hex.match(/.{2}/g).reverse()){\n        bytes.set([\n            parseInt(hexByte, 16)\n        ], i++);\n        value >>= EIGHT;\n    }\n    return _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(bytes);\n}\nfunction slowBase64ToBigInt(encoded) {\n    const integerBytes = _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(encoded);\n    if (integerBytes.byteLength !== 8) {\n        throw new Error(`Received ${integerBytes.byteLength} bytes, expected 8 for $integer`);\n    }\n    let value = ZERO;\n    let power = ZERO;\n    for (const byte of integerBytes){\n        value += BigInt(byte) * TWOFIFTYSIX ** power;\n        power++;\n    }\n    if (value > MAX_INT64) {\n        value += MIN_INT64 + MIN_INT64;\n    }\n    return value;\n}\nfunction modernBigIntToBase64(value) {\n    if (value < MIN_INT64 || MAX_INT64 < value) {\n        throw new Error(`BigInt ${value} does not fit into a 64-bit signed integer.`);\n    }\n    const buffer = new ArrayBuffer(8);\n    new DataView(buffer).setBigInt64(0, value, true);\n    return _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(new Uint8Array(buffer));\n}\nfunction modernBase64ToBigInt(encoded) {\n    const integerBytes = _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(encoded);\n    if (integerBytes.byteLength !== 8) {\n        throw new Error(`Received ${integerBytes.byteLength} bytes, expected 8 for $integer`);\n    }\n    const intBytesView = new DataView(integerBytes.buffer);\n    return intBytesView.getBigInt64(0, true);\n}\nconst bigIntToBase64 = DataView.prototype.setBigInt64 ? modernBigIntToBase64 : slowBigIntToBase64;\nconst base64ToBigInt = DataView.prototype.getBigInt64 ? modernBase64ToBigInt : slowBase64ToBigInt;\nconst MAX_IDENTIFIER_LEN = 1024;\nfunction validateObjectField(k) {\n    if (k.length > MAX_IDENTIFIER_LEN) {\n        throw new Error(`Field name ${k} exceeds maximum field name length ${MAX_IDENTIFIER_LEN}.`);\n    }\n    if (k.startsWith(\"$\")) {\n        throw new Error(`Field name ${k} starts with a '$', which is reserved.`);\n    }\n    for(let i = 0; i < k.length; i += 1){\n        const charCode = k.charCodeAt(i);\n        if (charCode < 32 || charCode >= 127) {\n            throw new Error(`Field name ${k} has invalid character '${k[i]}': Field names can only contain non-control ASCII characters`);\n        }\n    }\n}\nfunction jsonToConvex(value) {\n    if (value === null) {\n        return value;\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    if (typeof value === \"number\") {\n        return value;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        return value.map((value2)=>jsonToConvex(value2));\n    }\n    if (typeof value !== \"object\") {\n        throw new Error(`Unexpected type of ${value}`);\n    }\n    const entries = Object.entries(value);\n    if (entries.length === 1) {\n        const key = entries[0][0];\n        if (key === \"$bytes\") {\n            if (typeof value.$bytes !== \"string\") {\n                throw new Error(`Malformed $bytes field on ${value}`);\n            }\n            return _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(value.$bytes).buffer;\n        }\n        if (key === \"$integer\") {\n            if (typeof value.$integer !== \"string\") {\n                throw new Error(`Malformed $integer field on ${value}`);\n            }\n            return base64ToBigInt(value.$integer);\n        }\n        if (key === \"$float\") {\n            if (typeof value.$float !== \"string\") {\n                throw new Error(`Malformed $float field on ${value}`);\n            }\n            const floatBytes = _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(value.$float);\n            if (floatBytes.byteLength !== 8) {\n                throw new Error(`Received ${floatBytes.byteLength} bytes, expected 8 for $float`);\n            }\n            const floatBytesView = new DataView(floatBytes.buffer);\n            const float = floatBytesView.getFloat64(0, LITTLE_ENDIAN);\n            if (!isSpecial(float)) {\n                throw new Error(`Float ${float} should be encoded as a number`);\n            }\n            return float;\n        }\n        if (key === \"$set\") {\n            throw new Error(`Received a Set which is no longer supported as a Convex type.`);\n        }\n        if (key === \"$map\") {\n            throw new Error(`Received a Map which is no longer supported as a Convex type.`);\n        }\n    }\n    const out = {};\n    for (const [k, v] of Object.entries(value)){\n        validateObjectField(k);\n        out[k] = jsonToConvex(v);\n    }\n    return out;\n}\nfunction stringifyValueForError(value) {\n    return JSON.stringify(value, (_key, value2)=>{\n        if (value2 === void 0) {\n            return \"undefined\";\n        }\n        if (typeof value2 === \"bigint\") {\n            return `${value2.toString()}n`;\n        }\n        return value2;\n    });\n}\nfunction convexToJsonInternal(value, originalValue, context, includeTopLevelUndefined) {\n    if (value === void 0) {\n        const contextText = context && ` (present at path ${context} in original object ${stringifyValueForError(originalValue)})`;\n        throw new Error(`undefined is not a valid Convex value${contextText}. To learn about Convex's supported types, see https://docs.convex.dev/using/types.`);\n    }\n    if (value === null) {\n        return value;\n    }\n    if (typeof value === \"bigint\") {\n        if (value < MIN_INT64 || MAX_INT64 < value) {\n            throw new Error(`BigInt ${value} does not fit into a 64-bit signed integer.`);\n        }\n        return {\n            $integer: bigIntToBase64(value)\n        };\n    }\n    if (typeof value === \"number\") {\n        if (isSpecial(value)) {\n            const buffer = new ArrayBuffer(8);\n            new DataView(buffer).setFloat64(0, value, LITTLE_ENDIAN);\n            return {\n                $float: _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(new Uint8Array(buffer))\n            };\n        } else {\n            return value;\n        }\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if (value instanceof ArrayBuffer) {\n        return {\n            $bytes: _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(new Uint8Array(value))\n        };\n    }\n    if (Array.isArray(value)) {\n        return value.map((value2, i)=>convexToJsonInternal(value2, originalValue, context + `[${i}]`, false));\n    }\n    if (value instanceof Set) {\n        throw new Error(errorMessageForUnsupportedType(context, \"Set\", [\n            ...value\n        ], originalValue));\n    }\n    if (value instanceof Map) {\n        throw new Error(errorMessageForUnsupportedType(context, \"Map\", [\n            ...value\n        ], originalValue));\n    }\n    if (!(0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.isSimpleObject)(value)) {\n        const theType = value?.constructor?.name;\n        const typeName = theType ? `${theType} ` : \"\";\n        throw new Error(errorMessageForUnsupportedType(context, typeName, value, originalValue));\n    }\n    const out = {};\n    const entries = Object.entries(value);\n    entries.sort(([k1, _v1], [k2, _v2])=>k1 === k2 ? 0 : k1 < k2 ? -1 : 1);\n    for (const [k, v] of entries){\n        if (v !== void 0) {\n            validateObjectField(k);\n            out[k] = convexToJsonInternal(v, originalValue, context + `.${k}`, false);\n        } else if (includeTopLevelUndefined) {\n            validateObjectField(k);\n            out[k] = convexOrUndefinedToJsonInternal(v, originalValue, context + `.${k}`);\n        }\n    }\n    return out;\n}\nfunction errorMessageForUnsupportedType(context, typeName, value, originalValue) {\n    if (context) {\n        return `${typeName}${stringifyValueForError(value)} is not a supported Convex type (present at path ${context} in original object ${stringifyValueForError(originalValue)}). To learn about Convex's supported types, see https://docs.convex.dev/using/types.`;\n    } else {\n        return `${typeName}${stringifyValueForError(value)} is not a supported Convex type.`;\n    }\n}\nfunction convexOrUndefinedToJsonInternal(value, originalValue, context) {\n    if (value === void 0) {\n        return {\n            $undefined: null\n        };\n    } else {\n        if (originalValue === void 0) {\n            throw new Error(`Programming error. Current value is ${stringifyValueForError(value)} but original value is undefined`);\n        }\n        return convexToJsonInternal(value, originalValue, context, false);\n    }\n}\nfunction convexToJson(value) {\n    return convexToJsonInternal(value, value, \"\", false);\n}\nfunction convexOrUndefinedToJson(value) {\n    return convexOrUndefinedToJsonInternal(value, value, \"\");\n}\nfunction patchValueToJson(value) {\n    return convexToJsonInternal(value, value, \"\", true);\n} //# sourceMappingURL=value.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/values/value.js\n");

/***/ })

};
;